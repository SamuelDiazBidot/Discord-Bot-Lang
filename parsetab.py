
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BINARY_OPERATOR BOOLEAN CATCH COMMAND ELSE FLOAT FN HANDLER ID IF INTEGER SIGN STRING TRY UNITARY_OPERATOR\n    program : exp\n    \n    exp : term binop exp\n        | term\n        | IF exp '{' exp '}' ELSE '{' exp '}'\n        | TRY '{' exp '}' CATCH '{' exp '}'\n    \n    variable : ID '=' exp ';'\n    \n    term : unop term\n         | number\n         | BOOLEAN\n         | STRING\n         | empty\n    \n    unop : SIGN\n         | UNITARY_OPERATOR\n    \n    binop : SIGN\n          | BINARY_OPERATOR\n    \n    number : FLOAT\n           | INTEGER\n    \n    empty :\n    "
    
_lr_action_items = {'IF':([0,4,15,16,17,19,22,29,30,],[4,4,4,-14,-15,4,4,4,4,]),'TRY':([0,4,15,16,17,19,22,29,30,],[5,5,5,-14,-15,5,5,5,5,]),'BOOLEAN':([0,4,6,11,12,15,16,17,19,22,29,30,],[8,8,8,-12,-13,8,-14,-15,8,8,8,8,]),'STRING':([0,4,6,11,12,15,16,17,19,22,29,30,],[9,9,9,-12,-13,9,-14,-15,9,9,9,9,]),'SIGN':([0,3,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,22,29,30,],[11,16,11,11,-8,-9,-10,-11,-12,-13,-16,-17,11,-14,-15,11,-7,11,11,11,]),'UNITARY_OPERATOR':([0,4,6,11,12,15,16,17,19,22,29,30,],[12,12,12,-12,-13,12,-14,-15,12,12,12,12,]),'FLOAT':([0,4,6,11,12,15,16,17,19,22,29,30,],[13,13,13,-12,-13,13,-14,-15,13,13,13,13,]),'INTEGER':([0,4,6,11,12,15,16,17,19,22,29,30,],[14,14,14,-12,-13,14,-14,-15,14,14,14,14,]),'BINARY_OPERATOR':([0,3,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,22,29,30,],[-18,17,-18,-18,-8,-9,-10,-11,-12,-13,-16,-17,-18,-14,-15,-18,-7,-18,-18,-18,]),'$end':([0,1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,20,21,33,34,],[-18,0,-1,-3,-18,-8,-9,-10,-11,-12,-13,-16,-17,-18,-14,-15,-7,-2,-5,-4,]),'{':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,27,28,33,34,],[-3,-18,19,-18,-8,-9,-10,-11,-12,-13,-16,-17,-18,-14,-15,22,-7,-2,29,30,-5,-4,]),'}':([3,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,29,30,31,32,33,34,],[-3,-18,-8,-9,-10,-11,-12,-13,-16,-17,-18,-14,-15,-18,-7,-2,-18,25,26,-18,-18,33,34,-5,-4,]),'CATCH':([25,],[27,]),'ELSE':([26,],[28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'exp':([0,4,15,19,22,29,30,],[2,18,21,23,24,31,32,]),'term':([0,4,6,15,19,22,29,30,],[3,3,20,3,3,3,3,3,]),'unop':([0,4,6,15,19,22,29,30,],[6,6,6,6,6,6,6,6,]),'number':([0,4,6,15,19,22,29,30,],[7,7,7,7,7,7,7,7,]),'empty':([0,4,6,15,19,22,29,30,],[10,10,10,10,10,10,10,10,]),'binop':([3,],[15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> exp','program',1,'p_program','main.py',74),
  ('exp -> term binop exp','exp',3,'p_exp','main.py',80),
  ('exp -> term','exp',1,'p_exp','main.py',81),
  ('exp -> IF exp { exp } ELSE { exp }','exp',9,'p_exp','main.py',82),
  ('exp -> TRY { exp } CATCH { exp }','exp',8,'p_exp','main.py',83),
  ('variable -> ID = exp ;','variable',4,'p_variable','main.py',96),
  ('term -> unop term','term',2,'p_term','main.py',102),
  ('term -> number','term',1,'p_term','main.py',103),
  ('term -> BOOLEAN','term',1,'p_term','main.py',104),
  ('term -> STRING','term',1,'p_term','main.py',105),
  ('term -> empty','term',1,'p_term','main.py',106),
  ('unop -> SIGN','unop',1,'p_unop','main.py',115),
  ('unop -> UNITARY_OPERATOR','unop',1,'p_unop','main.py',116),
  ('binop -> SIGN','binop',1,'p_binop','main.py',122),
  ('binop -> BINARY_OPERATOR','binop',1,'p_binop','main.py',123),
  ('number -> FLOAT','number',1,'p_number','main.py',129),
  ('number -> INTEGER','number',1,'p_number','main.py',130),
  ('empty -> <empty>','empty',0,'p_empty','main.py',136),
]
