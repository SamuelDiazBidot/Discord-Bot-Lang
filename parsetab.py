
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BINARY_OPERATOR BOOLEAN CATCH COMMAND ELSE FLOAT FN FOR GLOBAL ID IF IN INTEGER RET SIGN STRING TOKEN TRY UNITARY_OPERATOR\n    run : program\n    \n    program : program function\n            | program function_call\n            | program python_function_call\n            | program variable\n            | program token\n            | function\n            | function_call\n            | python_function_call\n            | variable\n            | token\n    \n    function : FN id '(' parameter ')' '{' body '}'\n             | COMMAND id '(' parameter ')' '{' body '}'\n    \n    token : TOKEN '(' string ')'\n    \n    function_call : id '(' term_list ')' \n    \n    python_function_call : '.' id '(' term_list ')'\n    \n    parameter : id ',' parameter\n              | id\n              | empty\n    \n    body : body exp\n         | body variable\n         | body return\n         | body global\n         | body function_call\n         | body python_function_call\n         | function_call\n         | python_function_call\n         | exp\n         | variable\n         | return\n         | global\n    \n    exp : term binop exp\n        | term\n        | IF exp '{' body '}' ELSE '{' body '}'\n        | IF exp '{' body '}'\n        | TRY '{' body '}' CATCH '{' body '}'\n        | FOR id IN number '.' '.' number '{' body '}'\n        | FOR id IN id '{' body '}'\n    \n    variable : id '=' exp \n             | id '=' closure\n    \n    closure : '|' term_list '|' ':' body\n    \n    return : RET id\n    \n    global : GLOBAL term_list\n    \n    term_map : term ':' term ',' term_map\n             | term ':' term\n    \n    term_list : term_list ',' term\n              | term\n    \n    term : unop term\n         | number\n         | boolean\n         | string\n         | function_call\n         | python_function_call\n         | id\n         | list\n         | dict\n         | empty\n    \n    unop : SIGN\n         | UNITARY_OPERATOR\n    \n    binop : SIGN\n          | BINARY_OPERATOR\n    \n    dict : '{' term_map '}'\n         | '{' empty '}'\n    \n    list : '[' term_list ']'\n    \n    number : FLOAT\n           | INTEGER\n    \n    boolean : BOOLEAN\n    \n    string : STRING\n    \n    id : ID\n    \n    empty :\n    "
    
_lr_action_items = {'FN':([0,2,3,4,5,6,7,13,14,15,16,17,18,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,59,60,61,66,67,68,75,78,79,80,81,83,86,87,88,89,90,91,92,94,98,104,105,106,107,108,109,110,111,112,115,119,123,125,131,134,137,139,141,],[8,8,-7,-8,-9,-10,-11,-69,-2,-3,-4,-5,-6,-70,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,-33,-15,-70,-48,-70,-60,-61,-14,-46,-64,-62,-63,-32,-28,-29,-30,-31,-26,-27,-54,-70,-16,-20,-21,-22,-23,-24,-25,-54,-42,-43,-70,-35,-41,-12,-13,-38,-36,-34,-37,]),'COMMAND':([0,2,3,4,5,6,7,13,14,15,16,17,18,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,59,60,61,66,67,68,75,78,79,80,81,83,86,87,88,89,90,91,92,94,98,104,105,106,107,108,109,110,111,112,115,119,123,125,131,134,137,139,141,],[10,10,-7,-8,-9,-10,-11,-69,-2,-3,-4,-5,-6,-70,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,-33,-15,-70,-48,-70,-60,-61,-14,-46,-64,-62,-63,-32,-28,-29,-30,-31,-26,-27,-54,-70,-16,-20,-21,-22,-23,-24,-25,-54,-42,-43,-70,-35,-41,-12,-13,-38,-36,-34,-37,]),'.':([0,2,3,4,5,6,7,13,14,15,16,17,18,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,54,59,60,61,66,67,68,70,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,121,122,123,124,125,128,129,131,132,133,134,136,137,138,139,140,141,],[11,11,-7,-8,-9,-10,-11,-69,-2,-3,-4,-5,-6,11,11,-54,-47,11,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,11,11,-39,-40,-33,11,11,11,-15,11,-48,11,-60,-61,11,-14,-46,-64,-62,-63,11,-32,11,11,-28,-29,-30,-31,-26,-27,-54,11,-16,11,11,-20,-21,-22,-23,-24,-25,-54,-42,-43,122,11,11,11,11,-35,11,130,11,11,-12,11,11,-13,11,11,-38,11,-36,11,-34,11,-37,]),'TOKEN':([0,2,3,4,5,6,7,13,14,15,16,17,18,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,59,60,61,66,67,68,75,78,79,80,81,83,86,87,88,89,90,91,92,94,98,104,105,106,107,108,109,110,111,112,115,119,123,125,131,134,137,139,141,],[12,12,-7,-8,-9,-10,-11,-69,-2,-3,-4,-5,-6,-70,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,-33,-15,-70,-48,-70,-60,-61,-14,-46,-64,-62,-63,-32,-28,-29,-30,-31,-26,-27,-54,-70,-16,-20,-21,-22,-23,-24,-25,-54,-42,-43,-70,-35,-41,-12,-13,-38,-36,-34,-37,]),'ID':([0,2,3,4,5,6,7,8,10,11,13,14,15,16,17,18,20,21,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,59,60,61,66,67,68,70,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,118,119,121,123,124,125,128,129,131,132,133,134,136,137,138,139,140,141,],[13,13,-7,-8,-9,-10,-11,13,13,13,-69,-2,-3,-4,-5,-6,13,13,13,-54,-47,13,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,13,13,-39,-40,-33,13,13,13,13,13,-15,13,-48,13,-60,-61,13,-14,13,-46,-64,-62,-63,13,-32,13,13,-28,-29,-30,-31,-26,-27,-54,13,13,13,-16,13,13,-20,-21,-22,-23,-24,-25,-54,-42,-43,13,13,13,13,-35,13,13,13,-12,13,13,-13,13,13,-38,13,-36,13,-34,13,-37,]),'$end':([1,2,3,4,5,6,7,13,14,15,16,17,18,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,59,60,61,66,67,68,75,78,79,80,81,83,86,87,88,89,90,91,92,94,98,104,105,106,107,108,109,110,111,112,115,119,123,125,131,134,137,139,141,],[0,-1,-7,-8,-9,-10,-11,-69,-2,-3,-4,-5,-6,-70,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,-33,-15,-70,-48,-70,-60,-61,-14,-46,-64,-62,-63,-32,-28,-29,-30,-31,-26,-27,-54,-70,-16,-20,-21,-22,-23,-24,-25,-54,-42,-43,-70,-35,-41,-12,-13,-38,-36,-34,-37,]),'(':([9,12,13,19,22,23,26,92,110,],[20,24,-69,25,53,54,20,20,20,]),'=':([9,13,92,110,],[21,-69,21,21,]),')':([13,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,53,54,55,56,57,58,59,60,61,73,74,76,78,79,80,81,98,99,],[-69,-70,-70,-54,59,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-70,-70,75,-18,77,-19,-15,-70,-48,97,98,-70,-46,-64,-62,-63,-16,-17,]),',':([13,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,52,54,56,59,60,61,62,72,74,78,79,80,81,82,94,98,101,112,],[-69,-70,-54,60,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-70,-70,-70,76,-15,-70,-48,60,60,60,-46,-64,-62,-63,-70,-70,-16,118,60,]),'SIGN':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,54,59,60,61,66,67,68,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,118,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,38,38,-54,-47,38,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,38,38,-39,-40,67,38,38,38,-15,38,-48,38,-60,-61,38,-46,-64,-62,-63,38,-32,38,38,-28,-29,-30,-31,-26,-27,-54,38,-16,38,38,-20,-21,-22,-23,-24,-25,-54,-42,-43,38,38,38,38,-35,38,38,38,38,38,38,38,-38,38,-36,38,-34,38,-37,]),'BINARY_OPERATOR':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,59,60,61,66,67,68,70,78,79,80,81,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,-70,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,68,-70,-15,-70,-48,-70,-60,-61,-70,-46,-64,-62,-63,-32,-70,-70,-28,-29,-30,-31,-26,-27,-54,-70,-16,-70,-70,-20,-21,-22,-23,-24,-25,-54,-42,-43,-70,-70,-70,-35,-70,-41,-70,-70,-70,-70,-70,-38,-70,-36,-70,-34,-70,-37,]),'}':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,59,60,61,63,64,66,67,68,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,98,100,101,102,104,105,106,107,108,109,110,111,112,115,116,117,119,121,123,124,126,128,129,132,133,134,136,137,138,139,140,141,],[-69,-70,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-70,-39,-40,-33,-15,-70,-48,80,81,-70,-60,-61,-70,-46,-64,-62,-63,-70,-32,-70,103,-28,-29,-30,-31,-26,-27,-54,-70,-16,-70,-45,119,-20,-21,-22,-23,-24,-25,-54,-42,-43,-70,-70,125,-35,-70,-41,131,-44,-70,134,-70,137,-38,139,-36,-70,-34,141,-37,]),'IF':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,59,60,61,66,67,68,70,78,79,80,81,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,49,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,-33,49,-15,-70,-48,49,-60,-61,49,-46,-64,-62,-63,-32,49,49,-28,-29,-30,-31,-26,-27,-54,-70,-16,49,49,-20,-21,-22,-23,-24,-25,-54,-42,-43,49,49,49,-35,49,49,49,49,49,49,49,-38,49,-36,49,-34,49,-37,]),'TRY':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,59,60,61,66,67,68,70,78,79,80,81,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,50,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,-33,50,-15,-70,-48,50,-60,-61,50,-46,-64,-62,-63,-32,50,50,-28,-29,-30,-31,-26,-27,-54,-70,-16,50,50,-20,-21,-22,-23,-24,-25,-54,-42,-43,50,50,50,-35,50,50,50,50,50,50,50,-38,50,-36,50,-34,50,-37,]),'FOR':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,59,60,61,66,67,68,70,78,79,80,81,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,51,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,-33,51,-15,-70,-48,51,-60,-61,51,-46,-64,-62,-63,-32,51,51,-28,-29,-30,-31,-26,-27,-54,-70,-16,51,51,-20,-21,-22,-23,-24,-25,-54,-42,-43,51,51,51,-35,51,51,51,51,51,51,51,-38,51,-36,51,-34,51,-37,]),'RET':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,59,60,61,66,67,68,70,78,79,80,81,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,-70,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,-33,-15,-70,-48,-70,-60,-61,93,-46,-64,-62,-63,-32,93,93,-28,-29,-30,-31,-26,-27,-54,-70,-16,93,93,-20,-21,-22,-23,-24,-25,-54,-42,-43,93,93,93,-35,93,93,93,93,93,93,93,-38,93,-36,93,-34,93,-37,]),'GLOBAL':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,59,60,61,66,67,68,70,78,79,80,81,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,-70,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-39,-40,-33,-15,-70,-48,-70,-60,-61,94,-46,-64,-62,-63,-32,94,94,-28,-29,-30,-31,-26,-27,-54,-70,-16,94,94,-20,-21,-22,-23,-24,-25,-54,-42,-43,94,94,94,-35,94,94,94,94,94,94,94,-38,94,-36,94,-34,94,-37,]),'UNITARY_OPERATOR':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,54,59,60,61,66,67,68,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,118,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,39,39,-54,-47,39,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,39,39,-39,-40,-33,39,39,39,-15,39,-48,39,-60,-61,39,-46,-64,-62,-63,39,-32,39,39,-28,-29,-30,-31,-26,-27,-54,39,-16,39,39,-20,-21,-22,-23,-24,-25,-54,-42,-43,39,39,39,39,-35,39,39,39,39,39,39,39,-38,39,-36,39,-34,39,-37,]),'FLOAT':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,54,59,60,61,66,67,68,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,118,119,121,123,124,128,129,130,132,133,134,136,137,138,139,140,141,],[-69,40,40,-54,-47,40,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,40,40,-39,-40,-33,40,40,40,-15,40,-48,40,-60,-61,40,-46,-64,-62,-63,40,-32,40,40,-28,-29,-30,-31,-26,-27,-54,40,40,-16,40,40,-20,-21,-22,-23,-24,-25,-54,-42,-43,40,40,40,40,-35,40,40,40,40,40,40,40,40,-38,40,-36,40,-34,40,-37,]),'INTEGER':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,54,59,60,61,66,67,68,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,118,119,121,123,124,128,129,130,132,133,134,136,137,138,139,140,141,],[-69,41,41,-54,-47,41,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,41,41,-39,-40,-33,41,41,41,-15,41,-48,41,-60,-61,41,-46,-64,-62,-63,41,-32,41,41,-28,-29,-30,-31,-26,-27,-54,41,41,-16,41,41,-20,-21,-22,-23,-24,-25,-54,-42,-43,41,41,41,41,-35,41,41,41,41,41,41,41,41,-38,41,-36,41,-34,41,-37,]),'BOOLEAN':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,54,59,60,61,66,67,68,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,118,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,42,42,-54,-47,42,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,42,42,-39,-40,-33,42,42,42,-15,42,-48,42,-60,-61,42,-46,-64,-62,-63,42,-32,42,42,-28,-29,-30,-31,-26,-27,-54,42,-16,42,42,-20,-21,-22,-23,-24,-25,-54,-42,-43,42,42,42,42,-35,42,42,42,42,42,42,42,-38,42,-36,42,-34,42,-37,]),'STRING':([13,20,21,24,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,54,59,60,61,66,67,68,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,118,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,43,43,43,-54,-47,43,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,43,43,-39,-40,-33,43,43,43,-15,43,-48,43,-60,-61,43,-46,-64,-62,-63,43,-32,43,43,-28,-29,-30,-31,-26,-27,-54,43,-16,43,43,-20,-21,-22,-23,-24,-25,-54,-42,-43,43,43,43,43,-35,43,43,43,43,43,43,43,-38,43,-36,43,-34,43,-37,]),'[':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,54,59,60,61,66,67,68,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,98,100,102,104,105,106,107,108,109,110,111,112,115,116,117,118,119,121,123,124,128,129,132,133,134,136,137,138,139,140,141,],[-69,44,44,-54,-47,44,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,44,44,-39,-40,-33,44,44,44,-15,44,-48,44,-60,-61,44,-46,-64,-62,-63,44,-32,44,44,-28,-29,-30,-31,-26,-27,-54,44,-16,44,44,-20,-21,-22,-23,-24,-25,-54,-42,-43,44,44,44,44,-35,44,44,44,44,44,44,44,-38,44,-36,44,-34,44,-37,]),'{':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,59,60,61,66,67,68,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,97,98,100,102,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,121,123,124,127,128,129,132,133,134,135,136,137,138,139,140,141,],[-69,45,45,-54,-47,45,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,45,45,-39,-40,-33,45,70,45,45,-15,45,-48,45,-60,-61,84,45,100,-46,-64,-62,-63,45,-32,45,45,-28,-29,-30,-31,-26,-27,-54,45,116,-16,45,45,-20,-21,-22,-23,-24,-25,-54,-42,-43,121,45,45,45,45,-35,128,45,45,45,132,45,45,45,45,-38,138,45,-36,45,-34,45,-37,]),']':([13,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,59,60,61,62,78,79,80,81,98,],[-69,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-70,-15,-70,-48,79,-46,-64,-62,-63,-16,]),':':([13,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,59,61,64,65,79,80,81,96,98,118,],[-69,-54,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-70,-15,-48,-57,82,-64,-62,-63,115,-16,-70,]),'|':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,52,59,60,61,72,78,79,80,81,98,],[-69,52,-54,-47,-70,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-65,-66,-67,-68,-70,-15,-70,-48,96,-46,-64,-62,-63,-16,]),'IN':([13,71,],[-69,95,]),'CATCH':([103,],[120,]),'ELSE':([119,],[127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'run':([0,],[1,]),'program':([0,],[2,]),'function':([0,2,],[3,14,]),'function_call':([0,2,20,21,29,44,45,49,52,54,60,66,70,82,84,85,94,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[4,15,33,33,33,33,33,33,33,33,33,33,90,33,90,108,33,90,108,90,90,108,33,90,108,108,90,108,90,108,108,90,108,]),'python_function_call':([0,2,20,21,29,44,45,49,52,54,60,66,70,82,84,85,94,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[5,16,34,34,34,34,34,34,34,34,34,34,91,34,91,109,34,91,109,91,91,109,34,91,109,109,91,109,91,109,109,91,109,]),'variable':([0,2,70,84,85,100,102,115,116,117,121,123,124,128,129,132,133,136,138,140,],[6,17,87,87,105,87,105,87,87,105,87,105,105,87,105,87,105,105,87,105,]),'token':([0,2,],[7,18,]),'id':([0,2,8,10,11,20,21,25,29,44,45,49,51,52,53,54,60,66,70,76,82,84,85,93,94,95,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[9,9,19,22,23,26,26,56,26,26,26,26,71,26,56,26,26,26,92,56,26,92,110,111,26,113,92,110,92,92,110,26,92,110,110,92,110,92,110,110,92,110,]),'term_list':([20,44,52,54,94,],[27,62,72,74,112,]),'term':([20,21,29,44,45,49,52,54,60,66,70,82,84,85,94,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[28,48,61,28,65,48,28,28,78,48,48,101,48,48,28,48,48,48,48,48,65,48,48,48,48,48,48,48,48,48,48,]),'unop':([20,21,29,44,45,49,52,54,60,66,70,82,84,85,94,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'number':([20,21,29,44,45,49,52,54,60,66,70,82,84,85,94,95,100,102,115,116,117,118,121,123,124,128,129,130,132,133,136,138,140,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,114,30,30,30,30,30,30,30,30,30,30,30,135,30,30,30,30,30,]),'boolean':([20,21,29,44,45,49,52,54,60,66,70,82,84,85,94,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'string':([20,21,24,29,44,45,49,52,54,60,66,70,82,84,85,94,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[32,32,55,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'list':([20,21,29,44,45,49,52,54,60,66,70,82,84,85,94,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'dict':([20,21,29,44,45,49,52,54,60,66,70,82,84,85,94,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'empty':([20,21,25,29,44,45,49,52,53,54,60,66,70,76,82,84,85,94,100,102,115,116,117,118,121,123,124,128,129,132,133,136,138,140,],[37,37,58,37,37,64,37,37,58,37,37,37,37,58,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'exp':([21,49,66,70,84,85,100,102,115,116,117,121,123,124,128,129,132,133,136,138,140,],[46,69,83,86,86,104,86,104,86,86,104,86,104,104,86,104,86,104,104,86,104,]),'closure':([21,],[47,]),'parameter':([25,53,76,],[57,73,99,]),'term_map':([45,118,],[63,126,]),'binop':([48,],[66,]),'body':([70,84,100,115,116,121,128,132,138,],[85,102,117,123,124,129,133,136,140,]),'return':([70,84,85,100,102,115,116,117,121,123,124,128,129,132,133,136,138,140,],[88,88,106,88,106,88,88,106,88,106,106,88,106,88,106,106,88,106,]),'global':([70,84,85,100,102,115,116,117,121,123,124,128,129,132,133,136,138,140,],[89,89,107,89,107,89,89,107,89,107,107,89,107,89,107,107,89,107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> run","S'",1,None,None,None),
  ('run -> program','run',1,'p_run','lexerParser.py',82),
  ('program -> program function','program',2,'p_program','lexerParser.py',88),
  ('program -> program function_call','program',2,'p_program','lexerParser.py',89),
  ('program -> program python_function_call','program',2,'p_program','lexerParser.py',90),
  ('program -> program variable','program',2,'p_program','lexerParser.py',91),
  ('program -> program token','program',2,'p_program','lexerParser.py',92),
  ('program -> function','program',1,'p_program','lexerParser.py',93),
  ('program -> function_call','program',1,'p_program','lexerParser.py',94),
  ('program -> python_function_call','program',1,'p_program','lexerParser.py',95),
  ('program -> variable','program',1,'p_program','lexerParser.py',96),
  ('program -> token','program',1,'p_program','lexerParser.py',97),
  ('function -> FN id ( parameter ) { body }','function',8,'p_function','lexerParser.py',106),
  ('function -> COMMAND id ( parameter ) { body }','function',8,'p_function','lexerParser.py',107),
  ('token -> TOKEN ( string )','token',4,'p_token','lexerParser.py',113),
  ('function_call -> id ( term_list )','function_call',4,'p_function_call','lexerParser.py',119),
  ('python_function_call -> . id ( term_list )','python_function_call',5,'p_python_function_call','lexerParser.py',125),
  ('parameter -> id , parameter','parameter',3,'p_parameter','lexerParser.py',131),
  ('parameter -> id','parameter',1,'p_parameter','lexerParser.py',132),
  ('parameter -> empty','parameter',1,'p_parameter','lexerParser.py',133),
  ('body -> body exp','body',2,'p_body','lexerParser.py',142),
  ('body -> body variable','body',2,'p_body','lexerParser.py',143),
  ('body -> body return','body',2,'p_body','lexerParser.py',144),
  ('body -> body global','body',2,'p_body','lexerParser.py',145),
  ('body -> body function_call','body',2,'p_body','lexerParser.py',146),
  ('body -> body python_function_call','body',2,'p_body','lexerParser.py',147),
  ('body -> function_call','body',1,'p_body','lexerParser.py',148),
  ('body -> python_function_call','body',1,'p_body','lexerParser.py',149),
  ('body -> exp','body',1,'p_body','lexerParser.py',150),
  ('body -> variable','body',1,'p_body','lexerParser.py',151),
  ('body -> return','body',1,'p_body','lexerParser.py',152),
  ('body -> global','body',1,'p_body','lexerParser.py',153),
  ('exp -> term binop exp','exp',3,'p_exp','lexerParser.py',162),
  ('exp -> term','exp',1,'p_exp','lexerParser.py',163),
  ('exp -> IF exp { body } ELSE { body }','exp',9,'p_exp','lexerParser.py',164),
  ('exp -> IF exp { body }','exp',5,'p_exp','lexerParser.py',165),
  ('exp -> TRY { body } CATCH { body }','exp',8,'p_exp','lexerParser.py',166),
  ('exp -> FOR id IN number . . number { body }','exp',10,'p_exp','lexerParser.py',167),
  ('exp -> FOR id IN id { body }','exp',7,'p_exp','lexerParser.py',168),
  ('variable -> id = exp','variable',3,'p_variable','lexerParser.py',187),
  ('variable -> id = closure','variable',3,'p_variable','lexerParser.py',188),
  ('closure -> | term_list | : body','closure',5,'p_closure','lexerParser.py',194),
  ('return -> RET id','return',2,'p_return','lexerParser.py',200),
  ('global -> GLOBAL term_list','global',2,'p_global','lexerParser.py',206),
  ('term_map -> term : term , term_map','term_map',5,'p_term_map','lexerParser.py',212),
  ('term_map -> term : term','term_map',3,'p_term_map','lexerParser.py',213),
  ('term_list -> term_list , term','term_list',3,'p_term_list','lexerParser.py',222),
  ('term_list -> term','term_list',1,'p_term_list','lexerParser.py',223),
  ('term -> unop term','term',2,'p_term','lexerParser.py',232),
  ('term -> number','term',1,'p_term','lexerParser.py',233),
  ('term -> boolean','term',1,'p_term','lexerParser.py',234),
  ('term -> string','term',1,'p_term','lexerParser.py',235),
  ('term -> function_call','term',1,'p_term','lexerParser.py',236),
  ('term -> python_function_call','term',1,'p_term','lexerParser.py',237),
  ('term -> id','term',1,'p_term','lexerParser.py',238),
  ('term -> list','term',1,'p_term','lexerParser.py',239),
  ('term -> dict','term',1,'p_term','lexerParser.py',240),
  ('term -> empty','term',1,'p_term','lexerParser.py',241),
  ('unop -> SIGN','unop',1,'p_unop','lexerParser.py',250),
  ('unop -> UNITARY_OPERATOR','unop',1,'p_unop','lexerParser.py',251),
  ('binop -> SIGN','binop',1,'p_binop','lexerParser.py',257),
  ('binop -> BINARY_OPERATOR','binop',1,'p_binop','lexerParser.py',258),
  ('dict -> { term_map }','dict',3,'p_dict','lexerParser.py',264),
  ('dict -> { empty }','dict',3,'p_dict','lexerParser.py',265),
  ('list -> [ term_list ]','list',3,'p_list','lexerParser.py',271),
  ('number -> FLOAT','number',1,'p_number','lexerParser.py',277),
  ('number -> INTEGER','number',1,'p_number','lexerParser.py',278),
  ('boolean -> BOOLEAN','boolean',1,'p_boolean','lexerParser.py',284),
  ('string -> STRING','string',1,'p_string','lexerParser.py',290),
  ('id -> ID','id',1,'p_id','lexerParser.py',296),
  ('empty -> <empty>','empty',0,'p_empty','lexerParser.py',302),
]
