
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BINARY_OPERATOR BOOLEAN CATCH COMMAND ELSE FLOAT FN FOR GLOBAL ID IF IN INTEGER RET SIGN STRING TOKEN TRY UNITARY_OPERATOR\n    run : program\n    \n    program : program function\n            | program function_call\n            | program python_function_call\n            | program variable\n            | program token\n            | function\n            | function_call\n            | python_function_call\n            | variable\n            | token\n    \n    function : FN id '(' parameter ')' '{' body '}'\n             | COMMAND id '(' parameter ')' '{' body '}'\n    \n    token : TOKEN '(' string ')'\n    \n    function_call : id '(' term_list ')' \n    \n    python_function_call : '.' id '(' term_list ')'\n    \n    parameter : id ',' parameter\n              | id\n              | empty\n    \n    body : body exp\n         | body variable\n         | body return\n         | body global\n         | body function_call\n         | body python_function_call\n         | function_call\n         | python_function_call\n         | exp\n         | variable\n         | return\n         | global\n    \n    exp : term binop exp\n        | term\n        | IF exp '{' body '}' ELSE '{' body '}'\n        | IF exp '{' body '}'\n        | TRY '{' body '}' CATCH '{' body '}'\n        | FOR id IN number '.' '.' number '{' body '}'\n        | FOR id IN id '{' body '}'\n    \n    variable : id '=' exp \n    \n    return : RET id\n    \n    global : GLOBAL term_list\n    \n    term_map : term ':' term ',' term_map\n             | term ':' term\n    \n    term_list : term_list ',' term\n              | term\n    \n    term : unop term\n         | number\n         | boolean\n         | string\n         | function_call\n         | python_function_call\n         | id\n         | list\n         | dict\n         | empty\n    \n    unop : SIGN\n         | UNITARY_OPERATOR\n    \n    binop : SIGN\n          | BINARY_OPERATOR\n    \n    dict : '{' term_map '}'\n         | '{' empty '}'\n    \n    list : '[' term_list ']'\n    \n    number : FLOAT\n           | INTEGER\n    \n    boolean : BOOLEAN\n    \n    string : STRING\n    \n    id : ID\n    \n    empty :\n    "
    
_lr_action_items = {'FN':([0,2,3,4,5,6,7,13,14,15,16,17,18,21,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,57,59,64,65,66,72,76,77,78,80,94,114,119,125,128,131,133,135,],[8,8,-7,-8,-9,-10,-11,-67,-2,-3,-4,-5,-6,-68,-52,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,-33,-15,-46,-68,-58,-59,-14,-62,-60,-61,-32,-16,-35,-12,-13,-38,-36,-34,-37,]),'COMMAND':([0,2,3,4,5,6,7,13,14,15,16,17,18,21,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,57,59,64,65,66,72,76,77,78,80,94,114,119,125,128,131,133,135,],[10,10,-7,-8,-9,-10,-11,-67,-2,-3,-4,-5,-6,-68,-52,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,-33,-15,-46,-68,-58,-59,-14,-62,-60,-61,-32,-16,-35,-12,-13,-38,-36,-34,-37,]),'.':([0,2,3,4,5,6,7,13,14,15,16,17,18,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,57,58,59,64,65,66,68,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,110,111,112,113,114,116,117,118,119,122,123,125,126,127,128,130,131,132,133,134,135,],[11,11,-7,-8,-9,-10,-11,-67,-2,-3,-4,-5,-6,11,11,-52,-45,11,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,11,11,-39,-33,11,11,-15,11,-46,11,-58,-59,11,-14,-44,-62,-60,-61,11,-32,11,11,-28,-29,-30,-31,-26,-27,-52,11,-16,11,11,-20,-21,-22,-23,-24,-25,-52,-40,-41,117,11,11,11,-35,11,124,11,-12,11,11,-13,11,11,-38,11,-36,11,-34,11,-37,]),'TOKEN':([0,2,3,4,5,6,7,13,14,15,16,17,18,21,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,57,59,64,65,66,72,76,77,78,80,94,114,119,125,128,131,133,135,],[12,12,-7,-8,-9,-10,-11,-67,-2,-3,-4,-5,-6,-68,-52,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,-33,-15,-46,-68,-58,-59,-14,-62,-60,-61,-32,-16,-35,-12,-13,-38,-36,-34,-37,]),'ID':([0,2,3,4,5,6,7,8,10,11,13,14,15,16,17,18,20,21,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,57,58,59,64,65,66,68,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,96,98,100,101,102,103,104,105,106,107,108,111,112,113,114,116,118,119,122,123,125,126,127,128,130,131,132,133,134,135,],[13,13,-7,-8,-9,-10,-11,13,13,13,-67,-2,-3,-4,-5,-6,13,13,13,-52,-45,13,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,13,13,-39,-33,13,13,13,13,-15,13,-46,13,-58,-59,13,-14,13,-44,-62,-60,-61,13,-32,13,13,-28,-29,-30,-31,-26,-27,-52,13,13,13,-16,13,13,-20,-21,-22,-23,-24,-25,-52,-40,-41,13,13,13,-35,13,13,-12,13,13,-13,13,13,-38,13,-36,13,-34,13,-37,]),'$end':([1,2,3,4,5,6,7,13,14,15,16,17,18,21,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,57,59,64,65,66,72,76,77,78,80,94,114,119,125,128,131,133,135,],[0,-1,-7,-8,-9,-10,-11,-67,-2,-3,-4,-5,-6,-68,-52,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,-33,-15,-46,-68,-58,-59,-14,-62,-60,-61,-32,-16,-35,-12,-13,-38,-36,-34,-37,]),'(':([9,12,13,19,22,23,26,89,106,],[20,24,-67,25,51,52,20,20,20,]),'=':([9,13,89,106,],[21,-67,21,21,]),')':([13,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,51,52,53,54,55,56,57,58,59,70,71,73,75,76,77,78,94,95,],[-67,-68,-68,-52,57,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-68,-68,72,-18,74,-19,-15,-68,-46,93,94,-68,-44,-62,-60,-61,-16,-17,]),',':([13,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,52,54,57,58,59,60,71,75,76,77,78,79,91,94,97,108,],[-67,-68,-52,58,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-68,-68,73,-15,-68,-46,58,58,-44,-62,-60,-61,-68,-68,-16,113,58,]),'SIGN':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,57,58,59,64,65,66,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,113,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,38,38,-52,-45,38,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,38,38,-39,65,38,38,-15,38,-46,38,-58,-59,38,-44,-62,-60,-61,38,-32,38,38,-28,-29,-30,-31,-26,-27,-52,38,-16,38,38,-20,-21,-22,-23,-24,-25,-52,-40,-41,38,38,38,-35,38,38,38,38,38,38,-38,38,-36,38,-34,38,-37,]),'BINARY_OPERATOR':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,57,58,59,64,65,66,68,75,76,77,78,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,-68,-52,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,66,-68,-15,-68,-46,-68,-58,-59,-68,-44,-62,-60,-61,-32,-68,-68,-28,-29,-30,-31,-26,-27,-52,-68,-16,-68,-68,-20,-21,-22,-23,-24,-25,-52,-40,-41,-68,-68,-35,-68,-68,-68,-68,-68,-68,-38,-68,-36,-68,-34,-68,-37,]),'}':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,57,58,59,61,62,64,65,66,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,96,97,98,100,101,102,103,104,105,106,107,108,111,112,114,116,118,120,122,123,126,127,128,130,131,132,133,134,135,],[-67,-68,-52,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-68,-39,-33,-15,-68,-46,77,78,-68,-58,-59,-68,-44,-62,-60,-61,-68,-32,-68,99,-28,-29,-30,-31,-26,-27,-52,-68,-16,-68,-43,114,-20,-21,-22,-23,-24,-25,-52,-40,-41,-68,119,-35,-68,125,-42,-68,128,-68,131,-38,133,-36,-68,-34,135,-37,]),'IF':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,57,58,59,64,65,66,68,75,76,77,78,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,48,-52,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,-33,48,-15,-68,-46,48,-58,-59,48,-44,-62,-60,-61,-32,48,48,-28,-29,-30,-31,-26,-27,-52,-68,-16,48,48,-20,-21,-22,-23,-24,-25,-52,-40,-41,48,48,-35,48,48,48,48,48,48,-38,48,-36,48,-34,48,-37,]),'TRY':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,57,58,59,64,65,66,68,75,76,77,78,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,49,-52,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,-33,49,-15,-68,-46,49,-58,-59,49,-44,-62,-60,-61,-32,49,49,-28,-29,-30,-31,-26,-27,-52,-68,-16,49,49,-20,-21,-22,-23,-24,-25,-52,-40,-41,49,49,-35,49,49,49,49,49,49,-38,49,-36,49,-34,49,-37,]),'FOR':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,57,58,59,64,65,66,68,75,76,77,78,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,50,-52,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,-33,50,-15,-68,-46,50,-58,-59,50,-44,-62,-60,-61,-32,50,50,-28,-29,-30,-31,-26,-27,-52,-68,-16,50,50,-20,-21,-22,-23,-24,-25,-52,-40,-41,50,50,-35,50,50,50,50,50,50,-38,50,-36,50,-34,50,-37,]),'RET':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,57,58,59,64,65,66,68,75,76,77,78,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,-68,-52,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,-33,-15,-68,-46,-68,-58,-59,90,-44,-62,-60,-61,-32,90,90,-28,-29,-30,-31,-26,-27,-52,-68,-16,90,90,-20,-21,-22,-23,-24,-25,-52,-40,-41,90,90,-35,90,90,90,90,90,90,-38,90,-36,90,-34,90,-37,]),'GLOBAL':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,57,58,59,64,65,66,68,75,76,77,78,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,-68,-52,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-39,-33,-15,-68,-46,-68,-58,-59,91,-44,-62,-60,-61,-32,91,91,-28,-29,-30,-31,-26,-27,-52,-68,-16,91,91,-20,-21,-22,-23,-24,-25,-52,-40,-41,91,91,-35,91,91,91,91,91,91,-38,91,-36,91,-34,91,-37,]),'UNITARY_OPERATOR':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,57,58,59,64,65,66,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,113,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,39,39,-52,-45,39,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,39,39,-39,-33,39,39,-15,39,-46,39,-58,-59,39,-44,-62,-60,-61,39,-32,39,39,-28,-29,-30,-31,-26,-27,-52,39,-16,39,39,-20,-21,-22,-23,-24,-25,-52,-40,-41,39,39,39,-35,39,39,39,39,39,39,-38,39,-36,39,-34,39,-37,]),'FLOAT':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,57,58,59,64,65,66,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,94,96,98,100,101,102,103,104,105,106,107,108,111,112,113,114,116,118,122,123,124,126,127,128,130,131,132,133,134,135,],[-67,40,40,-52,-45,40,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,40,40,-39,-33,40,40,-15,40,-46,40,-58,-59,40,-44,-62,-60,-61,40,-32,40,40,-28,-29,-30,-31,-26,-27,-52,40,40,-16,40,40,-20,-21,-22,-23,-24,-25,-52,-40,-41,40,40,40,-35,40,40,40,40,40,40,40,-38,40,-36,40,-34,40,-37,]),'INTEGER':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,57,58,59,64,65,66,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,94,96,98,100,101,102,103,104,105,106,107,108,111,112,113,114,116,118,122,123,124,126,127,128,130,131,132,133,134,135,],[-67,41,41,-52,-45,41,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,41,41,-39,-33,41,41,-15,41,-46,41,-58,-59,41,-44,-62,-60,-61,41,-32,41,41,-28,-29,-30,-31,-26,-27,-52,41,41,-16,41,41,-20,-21,-22,-23,-24,-25,-52,-40,-41,41,41,41,-35,41,41,41,41,41,41,41,-38,41,-36,41,-34,41,-37,]),'BOOLEAN':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,57,58,59,64,65,66,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,113,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,42,42,-52,-45,42,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,42,42,-39,-33,42,42,-15,42,-46,42,-58,-59,42,-44,-62,-60,-61,42,-32,42,42,-28,-29,-30,-31,-26,-27,-52,42,-16,42,42,-20,-21,-22,-23,-24,-25,-52,-40,-41,42,42,42,-35,42,42,42,42,42,42,-38,42,-36,42,-34,42,-37,]),'STRING':([13,20,21,24,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,57,58,59,64,65,66,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,113,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,43,43,43,-52,-45,43,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,43,43,-39,-33,43,43,-15,43,-46,43,-58,-59,43,-44,-62,-60,-61,43,-32,43,43,-28,-29,-30,-31,-26,-27,-52,43,-16,43,43,-20,-21,-22,-23,-24,-25,-52,-40,-41,43,43,43,-35,43,43,43,43,43,43,-38,43,-36,43,-34,43,-37,]),'[':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,57,58,59,64,65,66,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,96,98,100,101,102,103,104,105,106,107,108,111,112,113,114,116,118,122,123,126,127,128,130,131,132,133,134,135,],[-67,44,44,-52,-45,44,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,44,44,-39,-33,44,44,-15,44,-46,44,-58,-59,44,-44,-62,-60,-61,44,-32,44,44,-28,-29,-30,-31,-26,-27,-52,44,-16,44,44,-20,-21,-22,-23,-24,-25,-52,-40,-41,44,44,44,-35,44,44,44,44,44,44,-38,44,-36,44,-34,44,-37,]),'{':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,57,58,59,64,65,66,67,68,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,94,96,98,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,118,121,122,123,126,127,128,129,130,131,132,133,134,135,],[-67,45,45,-52,-45,45,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,45,45,-39,-33,45,68,45,-15,45,-46,45,-58,-59,81,45,96,-44,-62,-60,-61,45,-32,45,45,-28,-29,-30,-31,-26,-27,-52,45,111,-16,45,45,-20,-21,-22,-23,-24,-25,-52,-40,-41,116,45,45,45,-35,122,45,45,126,45,45,45,45,-38,132,45,-36,45,-34,45,-37,]),']':([13,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,57,58,59,60,75,76,77,78,94,],[-67,-52,-45,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-68,-15,-68,-46,76,-44,-62,-60,-61,-16,]),':':([13,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,57,59,62,63,76,77,78,94,113,],[-67,-52,-68,-47,-48,-49,-50,-51,-53,-54,-55,-56,-57,-63,-64,-65,-66,-68,-15,-46,-55,79,-62,-60,-61,-16,-68,]),'IN':([13,69,],[-67,92,]),'CATCH':([99,],[115,]),'ELSE':([114,],[121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'run':([0,],[1,]),'program':([0,],[2,]),'function':([0,2,],[3,14,]),'function_call':([0,2,20,21,29,44,45,48,52,58,64,68,79,81,82,91,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[4,15,33,33,33,33,33,33,33,33,33,87,33,87,104,33,87,104,87,104,33,87,104,87,104,87,104,104,87,104,]),'python_function_call':([0,2,20,21,29,44,45,48,52,58,64,68,79,81,82,91,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[5,16,34,34,34,34,34,34,34,34,34,88,34,88,105,34,88,105,88,105,34,88,105,88,105,88,105,105,88,105,]),'variable':([0,2,68,81,82,96,98,111,112,116,118,122,123,126,127,130,132,134,],[6,17,84,84,101,84,101,84,101,84,101,84,101,84,101,101,84,101,]),'token':([0,2,],[7,18,]),'id':([0,2,8,10,11,20,21,25,29,44,45,48,50,51,52,58,64,68,73,79,81,82,90,91,92,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[9,9,19,22,23,26,26,54,26,26,26,26,69,54,26,26,26,89,54,26,89,106,107,26,109,89,106,89,106,26,89,106,89,106,89,106,106,89,106,]),'term_list':([20,44,52,91,],[27,60,71,108,]),'term':([20,21,29,44,45,48,52,58,64,68,79,81,82,91,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[28,47,59,28,63,47,28,75,47,47,97,47,47,28,47,47,47,47,63,47,47,47,47,47,47,47,47,47,]),'unop':([20,21,29,44,45,48,52,58,64,68,79,81,82,91,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'number':([20,21,29,44,45,48,52,58,64,68,79,81,82,91,92,96,98,111,112,113,116,118,122,123,124,126,127,130,132,134,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,110,30,30,30,30,30,30,30,30,30,129,30,30,30,30,30,]),'boolean':([20,21,29,44,45,48,52,58,64,68,79,81,82,91,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'string':([20,21,24,29,44,45,48,52,58,64,68,79,81,82,91,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[32,32,53,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'list':([20,21,29,44,45,48,52,58,64,68,79,81,82,91,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'dict':([20,21,29,44,45,48,52,58,64,68,79,81,82,91,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'empty':([20,21,25,29,44,45,48,51,52,58,64,68,73,79,81,82,91,96,98,111,112,113,116,118,122,123,126,127,130,132,134,],[37,37,56,37,37,62,37,56,37,37,37,37,56,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'exp':([21,48,64,68,81,82,96,98,111,112,116,118,122,123,126,127,130,132,134,],[46,67,80,83,83,100,83,100,83,100,83,100,83,100,83,100,100,83,100,]),'parameter':([25,51,73,],[55,70,95,]),'term_map':([45,113,],[61,120,]),'binop':([47,],[64,]),'body':([68,81,96,111,116,122,126,132,],[82,98,112,118,123,127,130,134,]),'return':([68,81,82,96,98,111,112,116,118,122,123,126,127,130,132,134,],[85,85,102,85,102,85,102,85,102,85,102,85,102,102,85,102,]),'global':([68,81,82,96,98,111,112,116,118,122,123,126,127,130,132,134,],[86,86,103,86,103,86,103,86,103,86,103,86,103,103,86,103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> run","S'",1,None,None,None),
  ('run -> program','run',1,'p_run','lexerParser.py',82),
  ('program -> program function','program',2,'p_program','lexerParser.py',88),
  ('program -> program function_call','program',2,'p_program','lexerParser.py',89),
  ('program -> program python_function_call','program',2,'p_program','lexerParser.py',90),
  ('program -> program variable','program',2,'p_program','lexerParser.py',91),
  ('program -> program token','program',2,'p_program','lexerParser.py',92),
  ('program -> function','program',1,'p_program','lexerParser.py',93),
  ('program -> function_call','program',1,'p_program','lexerParser.py',94),
  ('program -> python_function_call','program',1,'p_program','lexerParser.py',95),
  ('program -> variable','program',1,'p_program','lexerParser.py',96),
  ('program -> token','program',1,'p_program','lexerParser.py',97),
  ('function -> FN id ( parameter ) { body }','function',8,'p_function','lexerParser.py',106),
  ('function -> COMMAND id ( parameter ) { body }','function',8,'p_function','lexerParser.py',107),
  ('token -> TOKEN ( string )','token',4,'p_token','lexerParser.py',113),
  ('function_call -> id ( term_list )','function_call',4,'p_function_call','lexerParser.py',119),
  ('python_function_call -> . id ( term_list )','python_function_call',5,'p_python_function_call','lexerParser.py',125),
  ('parameter -> id , parameter','parameter',3,'p_parameter','lexerParser.py',131),
  ('parameter -> id','parameter',1,'p_parameter','lexerParser.py',132),
  ('parameter -> empty','parameter',1,'p_parameter','lexerParser.py',133),
  ('body -> body exp','body',2,'p_body','lexerParser.py',142),
  ('body -> body variable','body',2,'p_body','lexerParser.py',143),
  ('body -> body return','body',2,'p_body','lexerParser.py',144),
  ('body -> body global','body',2,'p_body','lexerParser.py',145),
  ('body -> body function_call','body',2,'p_body','lexerParser.py',146),
  ('body -> body python_function_call','body',2,'p_body','lexerParser.py',147),
  ('body -> function_call','body',1,'p_body','lexerParser.py',148),
  ('body -> python_function_call','body',1,'p_body','lexerParser.py',149),
  ('body -> exp','body',1,'p_body','lexerParser.py',150),
  ('body -> variable','body',1,'p_body','lexerParser.py',151),
  ('body -> return','body',1,'p_body','lexerParser.py',152),
  ('body -> global','body',1,'p_body','lexerParser.py',153),
  ('exp -> term binop exp','exp',3,'p_exp','lexerParser.py',162),
  ('exp -> term','exp',1,'p_exp','lexerParser.py',163),
  ('exp -> IF exp { body } ELSE { body }','exp',9,'p_exp','lexerParser.py',164),
  ('exp -> IF exp { body }','exp',5,'p_exp','lexerParser.py',165),
  ('exp -> TRY { body } CATCH { body }','exp',8,'p_exp','lexerParser.py',166),
  ('exp -> FOR id IN number . . number { body }','exp',10,'p_exp','lexerParser.py',167),
  ('exp -> FOR id IN id { body }','exp',7,'p_exp','lexerParser.py',168),
  ('variable -> id = exp','variable',3,'p_variable','lexerParser.py',187),
  ('return -> RET id','return',2,'p_return','lexerParser.py',193),
  ('global -> GLOBAL term_list','global',2,'p_global','lexerParser.py',199),
  ('term_map -> term : term , term_map','term_map',5,'p_term_map','lexerParser.py',205),
  ('term_map -> term : term','term_map',3,'p_term_map','lexerParser.py',206),
  ('term_list -> term_list , term','term_list',3,'p_term_list','lexerParser.py',215),
  ('term_list -> term','term_list',1,'p_term_list','lexerParser.py',216),
  ('term -> unop term','term',2,'p_term','lexerParser.py',225),
  ('term -> number','term',1,'p_term','lexerParser.py',226),
  ('term -> boolean','term',1,'p_term','lexerParser.py',227),
  ('term -> string','term',1,'p_term','lexerParser.py',228),
  ('term -> function_call','term',1,'p_term','lexerParser.py',229),
  ('term -> python_function_call','term',1,'p_term','lexerParser.py',230),
  ('term -> id','term',1,'p_term','lexerParser.py',231),
  ('term -> list','term',1,'p_term','lexerParser.py',232),
  ('term -> dict','term',1,'p_term','lexerParser.py',233),
  ('term -> empty','term',1,'p_term','lexerParser.py',234),
  ('unop -> SIGN','unop',1,'p_unop','lexerParser.py',243),
  ('unop -> UNITARY_OPERATOR','unop',1,'p_unop','lexerParser.py',244),
  ('binop -> SIGN','binop',1,'p_binop','lexerParser.py',250),
  ('binop -> BINARY_OPERATOR','binop',1,'p_binop','lexerParser.py',251),
  ('dict -> { term_map }','dict',3,'p_dict','lexerParser.py',257),
  ('dict -> { empty }','dict',3,'p_dict','lexerParser.py',258),
  ('list -> [ term_list ]','list',3,'p_list','lexerParser.py',264),
  ('number -> FLOAT','number',1,'p_number','lexerParser.py',270),
  ('number -> INTEGER','number',1,'p_number','lexerParser.py',271),
  ('boolean -> BOOLEAN','boolean',1,'p_boolean','lexerParser.py',277),
  ('string -> STRING','string',1,'p_string','lexerParser.py',283),
  ('id -> ID','id',1,'p_id','lexerParser.py',289),
  ('empty -> <empty>','empty',0,'p_empty','lexerParser.py',295),
]
