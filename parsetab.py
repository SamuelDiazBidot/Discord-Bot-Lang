
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BINARY_OPERATOR BOOLEAN CATCH COMMAND ELSE FLOAT FN GLOBAL ID IF INTEGER RET SIGN STRING TOKEN TRY UNITARY_OPERATOR\n    run : program\n    \n    program : program function\n            | program function_call\n            | program python_function_call\n            | program variable\n            | program token\n            | function\n            | function_call\n            | python_function_call\n            | variable\n            | token\n    \n    function : FN id '(' parameter ')' '{' body '}'\n             | COMMAND id '(' parameter ')' '{' body '}'\n    \n    token : TOKEN '(' string ')'\n    \n    function_call : id '(' term_list ')' \n    \n    python_function_call : '.' id '(' term_list ')'\n    \n    parameter : id ',' parameter\n              | id\n              | empty\n    \n    body : body exp\n         | body variable\n         | body return\n         | body global\n         | body function_call\n         | body python_function_call\n         | function_call\n         | python_function_call\n         | exp\n         | variable\n         | return\n         | global\n    \n    exp : term binop exp\n        | term\n        | IF exp '{' body '}' ELSE '{' body '}'\n        | IF exp '{' body '}'\n        | TRY '{' body '}' CATCH '{' body '}'\n    \n    variable : id '=' exp \n    \n    return : RET id\n    \n    global : GLOBAL term_list\n    \n    term_map : term ':' term ',' term_map\n             | term ':' term\n    \n    term_list : term_list ',' term\n              | term\n    \n    term : unop term\n         | number\n         | boolean\n         | string\n         | function_call\n         | python_function_call\n         | id\n         | list\n         | dict\n         | empty\n    \n    unop : SIGN\n         | UNITARY_OPERATOR\n    \n    binop : SIGN\n          | BINARY_OPERATOR\n    \n    dict : '{' term_map '}'\n         | '{' empty '}'\n    \n    list : '[' term_list ']'\n    \n    number : FLOAT\n           | INTEGER\n    \n    boolean : BOOLEAN\n    \n    string : STRING\n    \n    id : ID\n    \n    empty :\n    "
    
_lr_action_items = {'FN':([0,2,3,4,5,6,7,13,14,15,16,17,18,21,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,56,58,63,64,65,70,74,75,76,78,91,109,112,116,120,121,],[8,8,-7,-8,-9,-10,-11,-65,-2,-3,-4,-5,-6,-66,-50,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-37,-33,-15,-44,-66,-56,-57,-14,-60,-58,-59,-32,-16,-35,-12,-13,-36,-34,]),'COMMAND':([0,2,3,4,5,6,7,13,14,15,16,17,18,21,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,56,58,63,64,65,70,74,75,76,78,91,109,112,116,120,121,],[10,10,-7,-8,-9,-10,-11,-65,-2,-3,-4,-5,-6,-66,-50,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-37,-33,-15,-44,-66,-56,-57,-14,-60,-58,-59,-32,-16,-35,-12,-13,-36,-34,]),'.':([0,2,3,4,5,6,7,13,14,15,16,17,18,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,57,58,63,64,65,67,70,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,115,116,117,118,119,120,121,],[11,11,-7,-8,-9,-10,-11,-65,-2,-3,-4,-5,-6,11,11,-50,-43,11,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,11,11,-37,-33,11,11,-15,11,-44,11,-56,-57,11,-14,-42,-60,-58,-59,11,-32,11,11,-28,-29,-30,-31,-26,-27,-50,11,-16,11,11,-20,-21,-22,-23,-24,-25,-50,-38,-39,11,11,11,-35,11,-12,11,-13,11,11,11,-36,-34,]),'TOKEN':([0,2,3,4,5,6,7,13,14,15,16,17,18,21,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,56,58,63,64,65,70,74,75,76,78,91,109,112,116,120,121,],[12,12,-7,-8,-9,-10,-11,-65,-2,-3,-4,-5,-6,-66,-50,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-37,-33,-15,-44,-66,-56,-57,-14,-60,-58,-59,-32,-16,-35,-12,-13,-36,-34,]),'ID':([0,2,3,4,5,6,7,8,10,11,13,14,15,16,17,18,20,21,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,56,57,58,63,64,65,67,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,115,116,117,118,119,120,121,],[13,13,-7,-8,-9,-10,-11,13,13,13,-65,-2,-3,-4,-5,-6,13,13,13,-50,-43,13,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,13,13,-37,-33,13,13,13,-15,13,-44,13,-56,-57,13,-14,13,-42,-60,-58,-59,13,-32,13,13,-28,-29,-30,-31,-26,-27,-50,13,13,-16,13,13,-20,-21,-22,-23,-24,-25,-50,-38,-39,13,13,13,-35,13,-12,13,-13,13,13,13,-36,-34,]),'$end':([1,2,3,4,5,6,7,13,14,15,16,17,18,21,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,56,58,63,64,65,70,74,75,76,78,91,109,112,116,120,121,],[0,-1,-7,-8,-9,-10,-11,-65,-2,-3,-4,-5,-6,-66,-50,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-37,-33,-15,-44,-66,-56,-57,-14,-60,-58,-59,-32,-16,-35,-12,-13,-36,-34,]),'(':([9,12,13,19,22,23,26,87,103,],[20,24,-65,25,50,51,20,20,20,]),'=':([9,13,87,103,],[21,-65,21,21,]),')':([13,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,50,51,52,53,54,55,56,57,58,68,69,71,73,74,75,76,91,92,],[-65,-66,-66,-50,56,-43,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-66,-66,70,-18,72,-19,-15,-66,-44,90,91,-66,-42,-60,-58,-59,-16,-17,]),',':([13,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,51,53,56,57,58,59,69,73,74,75,76,77,89,91,94,105,],[-65,-66,-50,57,-43,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-66,-66,71,-15,-66,-44,57,57,-42,-60,-58,-59,-66,-66,-16,108,57,]),'SIGN':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,57,58,63,64,65,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,111,115,117,118,119,120,121,],[-65,38,38,-50,-43,38,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,38,38,-37,64,38,38,-15,38,-44,38,-56,-57,38,-42,-60,-58,-59,38,-32,38,38,-28,-29,-30,-31,-26,-27,-50,38,-16,38,38,-20,-21,-22,-23,-24,-25,-50,-38,-39,38,38,38,-35,38,38,38,38,38,-36,-34,]),'BINARY_OPERATOR':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,56,57,58,63,64,65,67,73,74,75,76,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,109,111,115,117,118,119,120,121,],[-65,-66,-50,-43,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-37,65,-66,-15,-66,-44,-66,-56,-57,-66,-42,-60,-58,-59,-32,-66,-66,-28,-29,-30,-31,-26,-27,-50,-66,-16,-66,-66,-20,-21,-22,-23,-24,-25,-50,-38,-39,-66,-66,-35,-66,-66,-66,-66,-66,-36,-34,]),'}':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,56,57,58,60,61,63,64,65,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,94,95,97,98,99,100,101,102,103,104,105,106,107,109,111,113,115,117,118,119,120,121,],[-65,-66,-50,-43,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-66,-37,-33,-15,-66,-44,75,76,-66,-56,-57,-66,-42,-60,-58,-59,-66,-32,-66,96,-28,-29,-30,-31,-26,-27,-50,-66,-16,-66,-41,109,-20,-21,-22,-23,-24,-25,-50,-38,-39,-66,112,-35,116,-40,-66,-66,120,121,-36,-34,]),'IF':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,56,57,58,63,64,65,67,73,74,75,76,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,109,111,115,117,118,119,120,121,],[-65,48,-50,-43,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-37,-33,48,-15,-66,-44,48,-56,-57,48,-42,-60,-58,-59,-32,48,48,-28,-29,-30,-31,-26,-27,-50,-66,-16,48,48,-20,-21,-22,-23,-24,-25,-50,-38,-39,48,48,-35,48,48,48,48,48,-36,-34,]),'TRY':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,56,57,58,63,64,65,67,73,74,75,76,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,109,111,115,117,118,119,120,121,],[-65,49,-50,-43,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-37,-33,49,-15,-66,-44,49,-56,-57,49,-42,-60,-58,-59,-32,49,49,-28,-29,-30,-31,-26,-27,-50,-66,-16,49,49,-20,-21,-22,-23,-24,-25,-50,-38,-39,49,49,-35,49,49,49,49,49,-36,-34,]),'RET':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,56,57,58,63,64,65,67,73,74,75,76,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,109,111,115,117,118,119,120,121,],[-65,-66,-50,-43,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-37,-33,-15,-66,-44,-66,-56,-57,88,-42,-60,-58,-59,-32,88,88,-28,-29,-30,-31,-26,-27,-50,-66,-16,88,88,-20,-21,-22,-23,-24,-25,-50,-38,-39,88,88,-35,88,88,88,88,88,-36,-34,]),'GLOBAL':([13,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,56,57,58,63,64,65,67,73,74,75,76,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,109,111,115,117,118,119,120,121,],[-65,-66,-50,-43,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-37,-33,-15,-66,-44,-66,-56,-57,89,-42,-60,-58,-59,-32,89,89,-28,-29,-30,-31,-26,-27,-50,-66,-16,89,89,-20,-21,-22,-23,-24,-25,-50,-38,-39,89,89,-35,89,89,89,89,89,-36,-34,]),'UNITARY_OPERATOR':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,57,58,63,64,65,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,111,115,117,118,119,120,121,],[-65,39,39,-50,-43,39,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,39,39,-37,-33,39,39,-15,39,-44,39,-56,-57,39,-42,-60,-58,-59,39,-32,39,39,-28,-29,-30,-31,-26,-27,-50,39,-16,39,39,-20,-21,-22,-23,-24,-25,-50,-38,-39,39,39,39,-35,39,39,39,39,39,-36,-34,]),'FLOAT':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,57,58,63,64,65,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,111,115,117,118,119,120,121,],[-65,40,40,-50,-43,40,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,40,40,-37,-33,40,40,-15,40,-44,40,-56,-57,40,-42,-60,-58,-59,40,-32,40,40,-28,-29,-30,-31,-26,-27,-50,40,-16,40,40,-20,-21,-22,-23,-24,-25,-50,-38,-39,40,40,40,-35,40,40,40,40,40,-36,-34,]),'INTEGER':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,57,58,63,64,65,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,111,115,117,118,119,120,121,],[-65,41,41,-50,-43,41,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,41,41,-37,-33,41,41,-15,41,-44,41,-56,-57,41,-42,-60,-58,-59,41,-32,41,41,-28,-29,-30,-31,-26,-27,-50,41,-16,41,41,-20,-21,-22,-23,-24,-25,-50,-38,-39,41,41,41,-35,41,41,41,41,41,-36,-34,]),'BOOLEAN':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,57,58,63,64,65,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,111,115,117,118,119,120,121,],[-65,42,42,-50,-43,42,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,42,42,-37,-33,42,42,-15,42,-44,42,-56,-57,42,-42,-60,-58,-59,42,-32,42,42,-28,-29,-30,-31,-26,-27,-50,42,-16,42,42,-20,-21,-22,-23,-24,-25,-50,-38,-39,42,42,42,-35,42,42,42,42,42,-36,-34,]),'STRING':([13,20,21,24,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,57,58,63,64,65,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,111,115,117,118,119,120,121,],[-65,43,43,43,-50,-43,43,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,43,43,-37,-33,43,43,-15,43,-44,43,-56,-57,43,-42,-60,-58,-59,43,-32,43,43,-28,-29,-30,-31,-26,-27,-50,43,-16,43,43,-20,-21,-22,-23,-24,-25,-50,-38,-39,43,43,43,-35,43,43,43,43,43,-36,-34,]),'[':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,57,58,63,64,65,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,111,115,117,118,119,120,121,],[-65,44,44,-50,-43,44,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,44,44,-37,-33,44,44,-15,44,-44,44,-56,-57,44,-42,-60,-58,-59,44,-32,44,44,-28,-29,-30,-31,-26,-27,-50,44,-16,44,44,-20,-21,-22,-23,-24,-25,-50,-38,-39,44,44,44,-35,44,44,44,44,44,-36,-34,]),'{':([13,20,21,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,56,57,58,63,64,65,66,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,93,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,117,118,119,120,121,],[-65,45,45,-50,-43,45,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,45,45,-37,-33,45,67,45,-15,45,-44,45,-56,-57,79,45,93,-42,-60,-58,-59,45,-32,45,45,-28,-29,-30,-31,-26,-27,-50,45,106,-16,45,45,-20,-21,-22,-23,-24,-25,-50,-38,-39,45,45,45,-35,115,45,117,45,45,45,45,-36,-34,]),']':([13,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,56,57,58,59,73,74,75,76,91,],[-65,-50,-43,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-66,-15,-66,-44,74,-42,-60,-58,-59,-16,]),':':([13,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,56,58,61,62,74,75,76,91,108,],[-65,-50,-66,-45,-46,-47,-48,-49,-51,-52,-53,-54,-55,-61,-62,-63,-64,-66,-15,-44,-53,77,-60,-58,-59,-16,-66,]),'CATCH':([96,],[110,]),'ELSE':([109,],[114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'run':([0,],[1,]),'program':([0,],[2,]),'function':([0,2,],[3,14,]),'function_call':([0,2,20,21,29,44,45,48,51,57,63,67,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[4,15,33,33,33,33,33,33,33,33,33,85,33,85,101,33,85,101,85,101,33,101,85,85,101,101,]),'python_function_call':([0,2,20,21,29,44,45,48,51,57,63,67,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[5,16,34,34,34,34,34,34,34,34,34,86,34,86,102,34,86,102,86,102,34,102,86,86,102,102,]),'variable':([0,2,67,79,80,93,95,106,107,111,115,117,118,119,],[6,17,82,82,98,82,98,82,98,98,82,82,98,98,]),'token':([0,2,],[7,18,]),'id':([0,2,8,10,11,20,21,25,29,44,45,48,50,51,57,63,67,71,77,79,80,88,89,93,95,106,107,108,111,115,117,118,119,],[9,9,19,22,23,26,26,53,26,26,26,26,53,26,26,26,87,53,26,87,103,104,26,87,103,87,103,26,103,87,87,103,103,]),'term_list':([20,44,51,89,],[27,59,69,105,]),'term':([20,21,29,44,45,48,51,57,63,67,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[28,47,58,28,62,47,28,73,47,47,94,47,47,28,47,47,47,47,62,47,47,47,47,47,]),'unop':([20,21,29,44,45,48,51,57,63,67,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'number':([20,21,29,44,45,48,51,57,63,67,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'boolean':([20,21,29,44,45,48,51,57,63,67,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'string':([20,21,24,29,44,45,48,51,57,63,67,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[32,32,52,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'list':([20,21,29,44,45,48,51,57,63,67,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'dict':([20,21,29,44,45,48,51,57,63,67,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'empty':([20,21,25,29,44,45,48,50,51,57,63,67,71,77,79,80,89,93,95,106,107,108,111,115,117,118,119,],[37,37,55,37,37,61,37,55,37,37,37,37,55,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'exp':([21,48,63,67,79,80,93,95,106,107,111,115,117,118,119,],[46,66,78,81,81,97,81,97,81,97,97,81,81,97,97,]),'parameter':([25,50,71,],[54,68,92,]),'term_map':([45,108,],[60,113,]),'binop':([47,],[63,]),'body':([67,79,93,106,115,117,],[80,95,107,111,118,119,]),'return':([67,79,80,93,95,106,107,111,115,117,118,119,],[83,83,99,83,99,83,99,99,83,83,99,99,]),'global':([67,79,80,93,95,106,107,111,115,117,118,119,],[84,84,100,84,100,84,100,100,84,84,100,100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> run","S'",1,None,None,None),
  ('run -> program','run',1,'p_run','lexerParser.py',80),
  ('program -> program function','program',2,'p_program','lexerParser.py',88),
  ('program -> program function_call','program',2,'p_program','lexerParser.py',89),
  ('program -> program python_function_call','program',2,'p_program','lexerParser.py',90),
  ('program -> program variable','program',2,'p_program','lexerParser.py',91),
  ('program -> program token','program',2,'p_program','lexerParser.py',92),
  ('program -> function','program',1,'p_program','lexerParser.py',93),
  ('program -> function_call','program',1,'p_program','lexerParser.py',94),
  ('program -> python_function_call','program',1,'p_program','lexerParser.py',95),
  ('program -> variable','program',1,'p_program','lexerParser.py',96),
  ('program -> token','program',1,'p_program','lexerParser.py',97),
  ('function -> FN id ( parameter ) { body }','function',8,'p_function','lexerParser.py',106),
  ('function -> COMMAND id ( parameter ) { body }','function',8,'p_function','lexerParser.py',107),
  ('token -> TOKEN ( string )','token',4,'p_token','lexerParser.py',113),
  ('function_call -> id ( term_list )','function_call',4,'p_function_call','lexerParser.py',119),
  ('python_function_call -> . id ( term_list )','python_function_call',5,'p_python_function_call','lexerParser.py',125),
  ('parameter -> id , parameter','parameter',3,'p_parameter','lexerParser.py',131),
  ('parameter -> id','parameter',1,'p_parameter','lexerParser.py',132),
  ('parameter -> empty','parameter',1,'p_parameter','lexerParser.py',133),
  ('body -> body exp','body',2,'p_body','lexerParser.py',142),
  ('body -> body variable','body',2,'p_body','lexerParser.py',143),
  ('body -> body return','body',2,'p_body','lexerParser.py',144),
  ('body -> body global','body',2,'p_body','lexerParser.py',145),
  ('body -> body function_call','body',2,'p_body','lexerParser.py',146),
  ('body -> body python_function_call','body',2,'p_body','lexerParser.py',147),
  ('body -> function_call','body',1,'p_body','lexerParser.py',148),
  ('body -> python_function_call','body',1,'p_body','lexerParser.py',149),
  ('body -> exp','body',1,'p_body','lexerParser.py',150),
  ('body -> variable','body',1,'p_body','lexerParser.py',151),
  ('body -> return','body',1,'p_body','lexerParser.py',152),
  ('body -> global','body',1,'p_body','lexerParser.py',153),
  ('exp -> term binop exp','exp',3,'p_exp','lexerParser.py',162),
  ('exp -> term','exp',1,'p_exp','lexerParser.py',163),
  ('exp -> IF exp { body } ELSE { body }','exp',9,'p_exp','lexerParser.py',164),
  ('exp -> IF exp { body }','exp',5,'p_exp','lexerParser.py',165),
  ('exp -> TRY { body } CATCH { body }','exp',8,'p_exp','lexerParser.py',166),
  ('variable -> id = exp','variable',3,'p_variable','lexerParser.py',181),
  ('return -> RET id','return',2,'p_return','lexerParser.py',187),
  ('global -> GLOBAL term_list','global',2,'p_global','lexerParser.py',193),
  ('term_map -> term : term , term_map','term_map',5,'p_term_map','lexerParser.py',199),
  ('term_map -> term : term','term_map',3,'p_term_map','lexerParser.py',200),
  ('term_list -> term_list , term','term_list',3,'p_term_list','lexerParser.py',209),
  ('term_list -> term','term_list',1,'p_term_list','lexerParser.py',210),
  ('term -> unop term','term',2,'p_term','lexerParser.py',219),
  ('term -> number','term',1,'p_term','lexerParser.py',220),
  ('term -> boolean','term',1,'p_term','lexerParser.py',221),
  ('term -> string','term',1,'p_term','lexerParser.py',222),
  ('term -> function_call','term',1,'p_term','lexerParser.py',223),
  ('term -> python_function_call','term',1,'p_term','lexerParser.py',224),
  ('term -> id','term',1,'p_term','lexerParser.py',225),
  ('term -> list','term',1,'p_term','lexerParser.py',226),
  ('term -> dict','term',1,'p_term','lexerParser.py',227),
  ('term -> empty','term',1,'p_term','lexerParser.py',228),
  ('unop -> SIGN','unop',1,'p_unop','lexerParser.py',237),
  ('unop -> UNITARY_OPERATOR','unop',1,'p_unop','lexerParser.py',238),
  ('binop -> SIGN','binop',1,'p_binop','lexerParser.py',244),
  ('binop -> BINARY_OPERATOR','binop',1,'p_binop','lexerParser.py',245),
  ('dict -> { term_map }','dict',3,'p_dict','lexerParser.py',251),
  ('dict -> { empty }','dict',3,'p_dict','lexerParser.py',252),
  ('list -> [ term_list ]','list',3,'p_list','lexerParser.py',258),
  ('number -> FLOAT','number',1,'p_number','lexerParser.py',264),
  ('number -> INTEGER','number',1,'p_number','lexerParser.py',265),
  ('boolean -> BOOLEAN','boolean',1,'p_boolean','lexerParser.py',271),
  ('string -> STRING','string',1,'p_string','lexerParser.py',277),
  ('id -> ID','id',1,'p_id','lexerParser.py',283),
  ('empty -> <empty>','empty',0,'p_empty','lexerParser.py',289),
]
