Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> run
Rule 1     run -> program
Rule 2     program -> program function
Rule 3     program -> program function_call
Rule 4     program -> program python_function_call
Rule 5     program -> program variable
Rule 6     program -> program token
Rule 7     program -> function
Rule 8     program -> function_call
Rule 9     program -> python_function_call
Rule 10    program -> variable
Rule 11    program -> token
Rule 12    function -> FN id ( parameter ) { body }
Rule 13    function -> COMMAND id ( parameter ) { body }
Rule 14    token -> TOKEN ( string )
Rule 15    function_call -> id ( term_list )
Rule 16    python_function_call -> . id ( term_list )
Rule 17    parameter -> id , parameter
Rule 18    parameter -> id
Rule 19    parameter -> empty
Rule 20    body -> body exp
Rule 21    body -> body variable
Rule 22    body -> body return
Rule 23    body -> body global
Rule 24    body -> body function_call
Rule 25    body -> body python_function_call
Rule 26    body -> function_call
Rule 27    body -> python_function_call
Rule 28    body -> exp
Rule 29    body -> variable
Rule 30    body -> return
Rule 31    body -> global
Rule 32    exp -> term binop exp
Rule 33    exp -> term
Rule 34    exp -> IF exp { body } ELSE { body }
Rule 35    exp -> IF exp { body }
Rule 36    exp -> TRY { body } CATCH { body }
Rule 37    exp -> FOR id IN number . . number { body }
Rule 38    exp -> FOR id IN id { body }
Rule 39    variable -> id = exp
Rule 40    return -> RET id
Rule 41    global -> GLOBAL term_list
Rule 42    term_map -> term : term , term_map
Rule 43    term_map -> term : term
Rule 44    term_list -> term_list , term
Rule 45    term_list -> term
Rule 46    term -> unop term
Rule 47    term -> number
Rule 48    term -> boolean
Rule 49    term -> string
Rule 50    term -> function_call
Rule 51    term -> python_function_call
Rule 52    term -> id
Rule 53    term -> list
Rule 54    term -> dict
Rule 55    term -> empty
Rule 56    unop -> SIGN
Rule 57    unop -> UNITARY_OPERATOR
Rule 58    binop -> SIGN
Rule 59    binop -> BINARY_OPERATOR
Rule 60    dict -> { term_map }
Rule 61    dict -> { empty }
Rule 62    list -> [ term_list ]
Rule 63    number -> FLOAT
Rule 64    number -> INTEGER
Rule 65    boolean -> BOOLEAN
Rule 66    string -> STRING
Rule 67    id -> ID
Rule 68    empty -> <empty>

Terminals, with rules where they appear

(                    : 12 13 14 15 16
)                    : 12 13 14 15 16
,                    : 17 42 44
.                    : 16 37 37
:                    : 42 43
=                    : 39
BINARY_OPERATOR      : 59
BOOLEAN              : 65
CATCH                : 36
COMMAND              : 13
ELSE                 : 34
FLOAT                : 63
FN                   : 12
FOR                  : 37 38
GLOBAL               : 41
ID                   : 67
IF                   : 34 35
IN                   : 37 38
INTEGER              : 64
RET                  : 40
SIGN                 : 56 58
STRING               : 66
TOKEN                : 14
TRY                  : 36
UNITARY_OPERATOR     : 57
[                    : 62
]                    : 62
error                : 
{                    : 12 13 34 34 35 36 36 37 38 60 61
}                    : 12 13 34 34 35 36 36 37 38 60 61

Nonterminals, with rules where they appear

binop                : 32
body                 : 12 13 20 21 22 23 24 25 34 34 35 36 36 37 38
boolean              : 48
dict                 : 54
empty                : 19 55 61
exp                  : 20 28 32 34 35 39
function             : 2 7
function_call        : 3 8 24 26 50
global               : 23 31
id                   : 12 13 15 16 17 18 37 38 38 39 40 52
list                 : 53
number               : 37 37 47
parameter            : 12 13 17
program              : 1 2 3 4 5 6
python_function_call : 4 9 25 27 51
return               : 22 30
run                  : 0
string               : 14 49
term                 : 32 33 42 42 43 43 44 45 46
term_list            : 15 16 41 44 62
term_map             : 42 60
token                : 6 11
unop                 : 46
variable             : 5 10 21 29

Parsing method: LALR

state 0

    (0) S' -> . run
    (1) run -> . program
    (2) program -> . program function
    (3) program -> . program function_call
    (4) program -> . program python_function_call
    (5) program -> . program variable
    (6) program -> . program token
    (7) program -> . function
    (8) program -> . function_call
    (9) program -> . python_function_call
    (10) program -> . variable
    (11) program -> . token
    (12) function -> . FN id ( parameter ) { body }
    (13) function -> . COMMAND id ( parameter ) { body }
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (39) variable -> . id = exp
    (14) token -> . TOKEN ( string )
    (67) id -> . ID

    FN              shift and go to state 8
    COMMAND         shift and go to state 10
    .               shift and go to state 11
    TOKEN           shift and go to state 12
    ID              shift and go to state 13

    run                            shift and go to state 1
    program                        shift and go to state 2
    function                       shift and go to state 3
    function_call                  shift and go to state 4
    python_function_call           shift and go to state 5
    variable                       shift and go to state 6
    token                          shift and go to state 7
    id                             shift and go to state 9

state 1

    (0) S' -> run .



state 2

    (1) run -> program .
    (2) program -> program . function
    (3) program -> program . function_call
    (4) program -> program . python_function_call
    (5) program -> program . variable
    (6) program -> program . token
    (12) function -> . FN id ( parameter ) { body }
    (13) function -> . COMMAND id ( parameter ) { body }
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (39) variable -> . id = exp
    (14) token -> . TOKEN ( string )
    (67) id -> . ID

    $end            reduce using rule 1 (run -> program .)
    FN              shift and go to state 8
    COMMAND         shift and go to state 10
    .               shift and go to state 11
    TOKEN           shift and go to state 12
    ID              shift and go to state 13

    function                       shift and go to state 14
    function_call                  shift and go to state 15
    python_function_call           shift and go to state 16
    variable                       shift and go to state 17
    token                          shift and go to state 18
    id                             shift and go to state 9

state 3

    (7) program -> function .

    FN              reduce using rule 7 (program -> function .)
    COMMAND         reduce using rule 7 (program -> function .)
    .               reduce using rule 7 (program -> function .)
    TOKEN           reduce using rule 7 (program -> function .)
    ID              reduce using rule 7 (program -> function .)
    $end            reduce using rule 7 (program -> function .)


state 4

    (8) program -> function_call .

    FN              reduce using rule 8 (program -> function_call .)
    COMMAND         reduce using rule 8 (program -> function_call .)
    .               reduce using rule 8 (program -> function_call .)
    TOKEN           reduce using rule 8 (program -> function_call .)
    ID              reduce using rule 8 (program -> function_call .)
    $end            reduce using rule 8 (program -> function_call .)


state 5

    (9) program -> python_function_call .

    FN              reduce using rule 9 (program -> python_function_call .)
    COMMAND         reduce using rule 9 (program -> python_function_call .)
    .               reduce using rule 9 (program -> python_function_call .)
    TOKEN           reduce using rule 9 (program -> python_function_call .)
    ID              reduce using rule 9 (program -> python_function_call .)
    $end            reduce using rule 9 (program -> python_function_call .)


state 6

    (10) program -> variable .

    FN              reduce using rule 10 (program -> variable .)
    COMMAND         reduce using rule 10 (program -> variable .)
    .               reduce using rule 10 (program -> variable .)
    TOKEN           reduce using rule 10 (program -> variable .)
    ID              reduce using rule 10 (program -> variable .)
    $end            reduce using rule 10 (program -> variable .)


state 7

    (11) program -> token .

    FN              reduce using rule 11 (program -> token .)
    COMMAND         reduce using rule 11 (program -> token .)
    .               reduce using rule 11 (program -> token .)
    TOKEN           reduce using rule 11 (program -> token .)
    ID              reduce using rule 11 (program -> token .)
    $end            reduce using rule 11 (program -> token .)


state 8

    (12) function -> FN . id ( parameter ) { body }
    (67) id -> . ID

    ID              shift and go to state 13

    id                             shift and go to state 19

state 9

    (15) function_call -> id . ( term_list )
    (39) variable -> id . = exp

    (               shift and go to state 20
    =               shift and go to state 21


state 10

    (13) function -> COMMAND . id ( parameter ) { body }
    (67) id -> . ID

    ID              shift and go to state 13

    id                             shift and go to state 22

state 11

    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID

    ID              shift and go to state 13

    id                             shift and go to state 23

state 12

    (14) token -> TOKEN . ( string )

    (               shift and go to state 24


state 13

    (67) id -> ID .

    (               reduce using rule 67 (id -> ID .)
    =               reduce using rule 67 (id -> ID .)
    )               reduce using rule 67 (id -> ID .)
    ,               reduce using rule 67 (id -> ID .)
    SIGN            reduce using rule 67 (id -> ID .)
    BINARY_OPERATOR reduce using rule 67 (id -> ID .)
    FN              reduce using rule 67 (id -> ID .)
    COMMAND         reduce using rule 67 (id -> ID .)
    .               reduce using rule 67 (id -> ID .)
    TOKEN           reduce using rule 67 (id -> ID .)
    ID              reduce using rule 67 (id -> ID .)
    $end            reduce using rule 67 (id -> ID .)
    }               reduce using rule 67 (id -> ID .)
    IF              reduce using rule 67 (id -> ID .)
    TRY             reduce using rule 67 (id -> ID .)
    FOR             reduce using rule 67 (id -> ID .)
    RET             reduce using rule 67 (id -> ID .)
    GLOBAL          reduce using rule 67 (id -> ID .)
    UNITARY_OPERATOR reduce using rule 67 (id -> ID .)
    FLOAT           reduce using rule 67 (id -> ID .)
    INTEGER         reduce using rule 67 (id -> ID .)
    BOOLEAN         reduce using rule 67 (id -> ID .)
    STRING          reduce using rule 67 (id -> ID .)
    [               reduce using rule 67 (id -> ID .)
    {               reduce using rule 67 (id -> ID .)
    ]               reduce using rule 67 (id -> ID .)
    :               reduce using rule 67 (id -> ID .)
    IN              reduce using rule 67 (id -> ID .)


state 14

    (2) program -> program function .

    FN              reduce using rule 2 (program -> program function .)
    COMMAND         reduce using rule 2 (program -> program function .)
    .               reduce using rule 2 (program -> program function .)
    TOKEN           reduce using rule 2 (program -> program function .)
    ID              reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 15

    (3) program -> program function_call .

    FN              reduce using rule 3 (program -> program function_call .)
    COMMAND         reduce using rule 3 (program -> program function_call .)
    .               reduce using rule 3 (program -> program function_call .)
    TOKEN           reduce using rule 3 (program -> program function_call .)
    ID              reduce using rule 3 (program -> program function_call .)
    $end            reduce using rule 3 (program -> program function_call .)


state 16

    (4) program -> program python_function_call .

    FN              reduce using rule 4 (program -> program python_function_call .)
    COMMAND         reduce using rule 4 (program -> program python_function_call .)
    .               reduce using rule 4 (program -> program python_function_call .)
    TOKEN           reduce using rule 4 (program -> program python_function_call .)
    ID              reduce using rule 4 (program -> program python_function_call .)
    $end            reduce using rule 4 (program -> program python_function_call .)


state 17

    (5) program -> program variable .

    FN              reduce using rule 5 (program -> program variable .)
    COMMAND         reduce using rule 5 (program -> program variable .)
    .               reduce using rule 5 (program -> program variable .)
    TOKEN           reduce using rule 5 (program -> program variable .)
    ID              reduce using rule 5 (program -> program variable .)
    $end            reduce using rule 5 (program -> program variable .)


state 18

    (6) program -> program token .

    FN              reduce using rule 6 (program -> program token .)
    COMMAND         reduce using rule 6 (program -> program token .)
    .               reduce using rule 6 (program -> program token .)
    TOKEN           reduce using rule 6 (program -> program token .)
    ID              reduce using rule 6 (program -> program token .)
    $end            reduce using rule 6 (program -> program token .)


state 19

    (12) function -> FN id . ( parameter ) { body }

    (               shift and go to state 25


state 20

    (15) function_call -> id ( . term_list )
    (44) term_list -> . term_list , term
    (45) term_list -> . term
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    )               reduce using rule 68 (empty -> .)
    ,               reduce using rule 68 (empty -> .)

    id                             shift and go to state 26
    term_list                      shift and go to state 27
    term                           shift and go to state 28
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 21

    (39) variable -> id = . exp
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    FN              reduce using rule 68 (empty -> .)
    COMMAND         reduce using rule 68 (empty -> .)
    TOKEN           reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)
    RET             reduce using rule 68 (empty -> .)
    GLOBAL          reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    id                             shift and go to state 26
    exp                            shift and go to state 46
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 22

    (13) function -> COMMAND id . ( parameter ) { body }

    (               shift and go to state 51


state 23

    (16) python_function_call -> . id . ( term_list )

    (               shift and go to state 52


state 24

    (14) token -> TOKEN ( . string )
    (66) string -> . STRING

    STRING          shift and go to state 43

    string                         shift and go to state 53

state 25

    (12) function -> FN id ( . parameter ) { body }
    (17) parameter -> . id , parameter
    (18) parameter -> . id
    (19) parameter -> . empty
    (67) id -> . ID
    (68) empty -> .

    ID              shift and go to state 13
    )               reduce using rule 68 (empty -> .)

    id                             shift and go to state 54
    parameter                      shift and go to state 55
    empty                          shift and go to state 56

state 26

    (52) term -> id .
    (15) function_call -> id . ( term_list )

    )               reduce using rule 52 (term -> id .)
    ,               reduce using rule 52 (term -> id .)
    SIGN            reduce using rule 52 (term -> id .)
    BINARY_OPERATOR reduce using rule 52 (term -> id .)
    FN              reduce using rule 52 (term -> id .)
    COMMAND         reduce using rule 52 (term -> id .)
    .               reduce using rule 52 (term -> id .)
    TOKEN           reduce using rule 52 (term -> id .)
    ID              reduce using rule 52 (term -> id .)
    $end            reduce using rule 52 (term -> id .)
    }               reduce using rule 52 (term -> id .)
    IF              reduce using rule 52 (term -> id .)
    TRY             reduce using rule 52 (term -> id .)
    FOR             reduce using rule 52 (term -> id .)
    RET             reduce using rule 52 (term -> id .)
    GLOBAL          reduce using rule 52 (term -> id .)
    UNITARY_OPERATOR reduce using rule 52 (term -> id .)
    FLOAT           reduce using rule 52 (term -> id .)
    INTEGER         reduce using rule 52 (term -> id .)
    BOOLEAN         reduce using rule 52 (term -> id .)
    STRING          reduce using rule 52 (term -> id .)
    [               reduce using rule 52 (term -> id .)
    {               reduce using rule 52 (term -> id .)
    ]               reduce using rule 52 (term -> id .)
    :               reduce using rule 52 (term -> id .)
    (               shift and go to state 20


state 27

    (15) function_call -> id ( term_list . )
    (44) term_list -> term_list . , term

    )               shift and go to state 57
    ,               shift and go to state 58


state 28

    (45) term_list -> term .

    )               reduce using rule 45 (term_list -> term .)
    ,               reduce using rule 45 (term_list -> term .)
    ]               reduce using rule 45 (term_list -> term .)
    }               reduce using rule 45 (term_list -> term .)
    IF              reduce using rule 45 (term_list -> term .)
    TRY             reduce using rule 45 (term_list -> term .)
    FOR             reduce using rule 45 (term_list -> term .)
    RET             reduce using rule 45 (term_list -> term .)
    GLOBAL          reduce using rule 45 (term_list -> term .)
    .               reduce using rule 45 (term_list -> term .)
    ID              reduce using rule 45 (term_list -> term .)
    SIGN            reduce using rule 45 (term_list -> term .)
    UNITARY_OPERATOR reduce using rule 45 (term_list -> term .)
    FLOAT           reduce using rule 45 (term_list -> term .)
    INTEGER         reduce using rule 45 (term_list -> term .)
    BOOLEAN         reduce using rule 45 (term_list -> term .)
    STRING          reduce using rule 45 (term_list -> term .)
    [               reduce using rule 45 (term_list -> term .)
    {               reduce using rule 45 (term_list -> term .)
    BINARY_OPERATOR reduce using rule 45 (term_list -> term .)


state 29

    (46) term -> unop . term
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    )               reduce using rule 68 (empty -> .)
    ,               reduce using rule 68 (empty -> .)
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    FN              reduce using rule 68 (empty -> .)
    COMMAND         reduce using rule 68 (empty -> .)
    TOKEN           reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    TRY             reduce using rule 68 (empty -> .)
    FOR             reduce using rule 68 (empty -> .)
    RET             reduce using rule 68 (empty -> .)
    GLOBAL          reduce using rule 68 (empty -> .)
    ]               reduce using rule 68 (empty -> .)
    :               reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    unop                           shift and go to state 29
    term                           shift and go to state 59
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    id                             shift and go to state 26
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 30

    (47) term -> number .

    )               reduce using rule 47 (term -> number .)
    ,               reduce using rule 47 (term -> number .)
    SIGN            reduce using rule 47 (term -> number .)
    BINARY_OPERATOR reduce using rule 47 (term -> number .)
    FN              reduce using rule 47 (term -> number .)
    COMMAND         reduce using rule 47 (term -> number .)
    .               reduce using rule 47 (term -> number .)
    TOKEN           reduce using rule 47 (term -> number .)
    ID              reduce using rule 47 (term -> number .)
    $end            reduce using rule 47 (term -> number .)
    }               reduce using rule 47 (term -> number .)
    IF              reduce using rule 47 (term -> number .)
    TRY             reduce using rule 47 (term -> number .)
    FOR             reduce using rule 47 (term -> number .)
    RET             reduce using rule 47 (term -> number .)
    GLOBAL          reduce using rule 47 (term -> number .)
    UNITARY_OPERATOR reduce using rule 47 (term -> number .)
    FLOAT           reduce using rule 47 (term -> number .)
    INTEGER         reduce using rule 47 (term -> number .)
    BOOLEAN         reduce using rule 47 (term -> number .)
    STRING          reduce using rule 47 (term -> number .)
    [               reduce using rule 47 (term -> number .)
    {               reduce using rule 47 (term -> number .)
    ]               reduce using rule 47 (term -> number .)
    :               reduce using rule 47 (term -> number .)


state 31

    (48) term -> boolean .

    )               reduce using rule 48 (term -> boolean .)
    ,               reduce using rule 48 (term -> boolean .)
    SIGN            reduce using rule 48 (term -> boolean .)
    BINARY_OPERATOR reduce using rule 48 (term -> boolean .)
    FN              reduce using rule 48 (term -> boolean .)
    COMMAND         reduce using rule 48 (term -> boolean .)
    .               reduce using rule 48 (term -> boolean .)
    TOKEN           reduce using rule 48 (term -> boolean .)
    ID              reduce using rule 48 (term -> boolean .)
    $end            reduce using rule 48 (term -> boolean .)
    }               reduce using rule 48 (term -> boolean .)
    IF              reduce using rule 48 (term -> boolean .)
    TRY             reduce using rule 48 (term -> boolean .)
    FOR             reduce using rule 48 (term -> boolean .)
    RET             reduce using rule 48 (term -> boolean .)
    GLOBAL          reduce using rule 48 (term -> boolean .)
    UNITARY_OPERATOR reduce using rule 48 (term -> boolean .)
    FLOAT           reduce using rule 48 (term -> boolean .)
    INTEGER         reduce using rule 48 (term -> boolean .)
    BOOLEAN         reduce using rule 48 (term -> boolean .)
    STRING          reduce using rule 48 (term -> boolean .)
    [               reduce using rule 48 (term -> boolean .)
    {               reduce using rule 48 (term -> boolean .)
    ]               reduce using rule 48 (term -> boolean .)
    :               reduce using rule 48 (term -> boolean .)


state 32

    (49) term -> string .

    )               reduce using rule 49 (term -> string .)
    ,               reduce using rule 49 (term -> string .)
    SIGN            reduce using rule 49 (term -> string .)
    BINARY_OPERATOR reduce using rule 49 (term -> string .)
    FN              reduce using rule 49 (term -> string .)
    COMMAND         reduce using rule 49 (term -> string .)
    .               reduce using rule 49 (term -> string .)
    TOKEN           reduce using rule 49 (term -> string .)
    ID              reduce using rule 49 (term -> string .)
    $end            reduce using rule 49 (term -> string .)
    }               reduce using rule 49 (term -> string .)
    IF              reduce using rule 49 (term -> string .)
    TRY             reduce using rule 49 (term -> string .)
    FOR             reduce using rule 49 (term -> string .)
    RET             reduce using rule 49 (term -> string .)
    GLOBAL          reduce using rule 49 (term -> string .)
    UNITARY_OPERATOR reduce using rule 49 (term -> string .)
    FLOAT           reduce using rule 49 (term -> string .)
    INTEGER         reduce using rule 49 (term -> string .)
    BOOLEAN         reduce using rule 49 (term -> string .)
    STRING          reduce using rule 49 (term -> string .)
    [               reduce using rule 49 (term -> string .)
    {               reduce using rule 49 (term -> string .)
    ]               reduce using rule 49 (term -> string .)
    :               reduce using rule 49 (term -> string .)


state 33

    (50) term -> function_call .

    )               reduce using rule 50 (term -> function_call .)
    ,               reduce using rule 50 (term -> function_call .)
    SIGN            reduce using rule 50 (term -> function_call .)
    BINARY_OPERATOR reduce using rule 50 (term -> function_call .)
    FN              reduce using rule 50 (term -> function_call .)
    COMMAND         reduce using rule 50 (term -> function_call .)
    .               reduce using rule 50 (term -> function_call .)
    TOKEN           reduce using rule 50 (term -> function_call .)
    ID              reduce using rule 50 (term -> function_call .)
    $end            reduce using rule 50 (term -> function_call .)
    }               reduce using rule 50 (term -> function_call .)
    IF              reduce using rule 50 (term -> function_call .)
    TRY             reduce using rule 50 (term -> function_call .)
    FOR             reduce using rule 50 (term -> function_call .)
    RET             reduce using rule 50 (term -> function_call .)
    GLOBAL          reduce using rule 50 (term -> function_call .)
    UNITARY_OPERATOR reduce using rule 50 (term -> function_call .)
    FLOAT           reduce using rule 50 (term -> function_call .)
    INTEGER         reduce using rule 50 (term -> function_call .)
    BOOLEAN         reduce using rule 50 (term -> function_call .)
    STRING          reduce using rule 50 (term -> function_call .)
    [               reduce using rule 50 (term -> function_call .)
    {               reduce using rule 50 (term -> function_call .)
    ]               reduce using rule 50 (term -> function_call .)
    :               reduce using rule 50 (term -> function_call .)


state 34

    (51) term -> python_function_call .

    )               reduce using rule 51 (term -> python_function_call .)
    ,               reduce using rule 51 (term -> python_function_call .)
    SIGN            reduce using rule 51 (term -> python_function_call .)
    BINARY_OPERATOR reduce using rule 51 (term -> python_function_call .)
    FN              reduce using rule 51 (term -> python_function_call .)
    COMMAND         reduce using rule 51 (term -> python_function_call .)
    .               reduce using rule 51 (term -> python_function_call .)
    TOKEN           reduce using rule 51 (term -> python_function_call .)
    ID              reduce using rule 51 (term -> python_function_call .)
    $end            reduce using rule 51 (term -> python_function_call .)
    }               reduce using rule 51 (term -> python_function_call .)
    IF              reduce using rule 51 (term -> python_function_call .)
    TRY             reduce using rule 51 (term -> python_function_call .)
    FOR             reduce using rule 51 (term -> python_function_call .)
    RET             reduce using rule 51 (term -> python_function_call .)
    GLOBAL          reduce using rule 51 (term -> python_function_call .)
    UNITARY_OPERATOR reduce using rule 51 (term -> python_function_call .)
    FLOAT           reduce using rule 51 (term -> python_function_call .)
    INTEGER         reduce using rule 51 (term -> python_function_call .)
    BOOLEAN         reduce using rule 51 (term -> python_function_call .)
    STRING          reduce using rule 51 (term -> python_function_call .)
    [               reduce using rule 51 (term -> python_function_call .)
    {               reduce using rule 51 (term -> python_function_call .)
    ]               reduce using rule 51 (term -> python_function_call .)
    :               reduce using rule 51 (term -> python_function_call .)


state 35

    (53) term -> list .

    )               reduce using rule 53 (term -> list .)
    ,               reduce using rule 53 (term -> list .)
    SIGN            reduce using rule 53 (term -> list .)
    BINARY_OPERATOR reduce using rule 53 (term -> list .)
    FN              reduce using rule 53 (term -> list .)
    COMMAND         reduce using rule 53 (term -> list .)
    .               reduce using rule 53 (term -> list .)
    TOKEN           reduce using rule 53 (term -> list .)
    ID              reduce using rule 53 (term -> list .)
    $end            reduce using rule 53 (term -> list .)
    }               reduce using rule 53 (term -> list .)
    IF              reduce using rule 53 (term -> list .)
    TRY             reduce using rule 53 (term -> list .)
    FOR             reduce using rule 53 (term -> list .)
    RET             reduce using rule 53 (term -> list .)
    GLOBAL          reduce using rule 53 (term -> list .)
    UNITARY_OPERATOR reduce using rule 53 (term -> list .)
    FLOAT           reduce using rule 53 (term -> list .)
    INTEGER         reduce using rule 53 (term -> list .)
    BOOLEAN         reduce using rule 53 (term -> list .)
    STRING          reduce using rule 53 (term -> list .)
    [               reduce using rule 53 (term -> list .)
    {               reduce using rule 53 (term -> list .)
    ]               reduce using rule 53 (term -> list .)
    :               reduce using rule 53 (term -> list .)


state 36

    (54) term -> dict .

    )               reduce using rule 54 (term -> dict .)
    ,               reduce using rule 54 (term -> dict .)
    SIGN            reduce using rule 54 (term -> dict .)
    BINARY_OPERATOR reduce using rule 54 (term -> dict .)
    FN              reduce using rule 54 (term -> dict .)
    COMMAND         reduce using rule 54 (term -> dict .)
    .               reduce using rule 54 (term -> dict .)
    TOKEN           reduce using rule 54 (term -> dict .)
    ID              reduce using rule 54 (term -> dict .)
    $end            reduce using rule 54 (term -> dict .)
    }               reduce using rule 54 (term -> dict .)
    IF              reduce using rule 54 (term -> dict .)
    TRY             reduce using rule 54 (term -> dict .)
    FOR             reduce using rule 54 (term -> dict .)
    RET             reduce using rule 54 (term -> dict .)
    GLOBAL          reduce using rule 54 (term -> dict .)
    UNITARY_OPERATOR reduce using rule 54 (term -> dict .)
    FLOAT           reduce using rule 54 (term -> dict .)
    INTEGER         reduce using rule 54 (term -> dict .)
    BOOLEAN         reduce using rule 54 (term -> dict .)
    STRING          reduce using rule 54 (term -> dict .)
    [               reduce using rule 54 (term -> dict .)
    {               reduce using rule 54 (term -> dict .)
    ]               reduce using rule 54 (term -> dict .)
    :               reduce using rule 54 (term -> dict .)


state 37

    (55) term -> empty .

    )               reduce using rule 55 (term -> empty .)
    ,               reduce using rule 55 (term -> empty .)
    SIGN            reduce using rule 55 (term -> empty .)
    BINARY_OPERATOR reduce using rule 55 (term -> empty .)
    FN              reduce using rule 55 (term -> empty .)
    COMMAND         reduce using rule 55 (term -> empty .)
    .               reduce using rule 55 (term -> empty .)
    TOKEN           reduce using rule 55 (term -> empty .)
    ID              reduce using rule 55 (term -> empty .)
    $end            reduce using rule 55 (term -> empty .)
    }               reduce using rule 55 (term -> empty .)
    IF              reduce using rule 55 (term -> empty .)
    TRY             reduce using rule 55 (term -> empty .)
    FOR             reduce using rule 55 (term -> empty .)
    RET             reduce using rule 55 (term -> empty .)
    GLOBAL          reduce using rule 55 (term -> empty .)
    UNITARY_OPERATOR reduce using rule 55 (term -> empty .)
    FLOAT           reduce using rule 55 (term -> empty .)
    INTEGER         reduce using rule 55 (term -> empty .)
    BOOLEAN         reduce using rule 55 (term -> empty .)
    STRING          reduce using rule 55 (term -> empty .)
    [               reduce using rule 55 (term -> empty .)
    {               reduce using rule 55 (term -> empty .)
    ]               reduce using rule 55 (term -> empty .)
    :               reduce using rule 55 (term -> empty .)


state 38

    (56) unop -> SIGN .

    SIGN            reduce using rule 56 (unop -> SIGN .)
    UNITARY_OPERATOR reduce using rule 56 (unop -> SIGN .)
    FLOAT           reduce using rule 56 (unop -> SIGN .)
    INTEGER         reduce using rule 56 (unop -> SIGN .)
    BOOLEAN         reduce using rule 56 (unop -> SIGN .)
    STRING          reduce using rule 56 (unop -> SIGN .)
    .               reduce using rule 56 (unop -> SIGN .)
    ID              reduce using rule 56 (unop -> SIGN .)
    [               reduce using rule 56 (unop -> SIGN .)
    {               reduce using rule 56 (unop -> SIGN .)
    )               reduce using rule 56 (unop -> SIGN .)
    ,               reduce using rule 56 (unop -> SIGN .)
    BINARY_OPERATOR reduce using rule 56 (unop -> SIGN .)
    FN              reduce using rule 56 (unop -> SIGN .)
    COMMAND         reduce using rule 56 (unop -> SIGN .)
    TOKEN           reduce using rule 56 (unop -> SIGN .)
    $end            reduce using rule 56 (unop -> SIGN .)
    }               reduce using rule 56 (unop -> SIGN .)
    IF              reduce using rule 56 (unop -> SIGN .)
    TRY             reduce using rule 56 (unop -> SIGN .)
    FOR             reduce using rule 56 (unop -> SIGN .)
    RET             reduce using rule 56 (unop -> SIGN .)
    GLOBAL          reduce using rule 56 (unop -> SIGN .)
    ]               reduce using rule 56 (unop -> SIGN .)
    :               reduce using rule 56 (unop -> SIGN .)


state 39

    (57) unop -> UNITARY_OPERATOR .

    SIGN            reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    UNITARY_OPERATOR reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    FLOAT           reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    INTEGER         reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    BOOLEAN         reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    STRING          reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    .               reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    ID              reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    [               reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    {               reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    )               reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    ,               reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    BINARY_OPERATOR reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    FN              reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    COMMAND         reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    TOKEN           reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    $end            reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    }               reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    IF              reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    TRY             reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    FOR             reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    RET             reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    GLOBAL          reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    ]               reduce using rule 57 (unop -> UNITARY_OPERATOR .)
    :               reduce using rule 57 (unop -> UNITARY_OPERATOR .)


state 40

    (63) number -> FLOAT .

    )               reduce using rule 63 (number -> FLOAT .)
    ,               reduce using rule 63 (number -> FLOAT .)
    SIGN            reduce using rule 63 (number -> FLOAT .)
    BINARY_OPERATOR reduce using rule 63 (number -> FLOAT .)
    FN              reduce using rule 63 (number -> FLOAT .)
    COMMAND         reduce using rule 63 (number -> FLOAT .)
    .               reduce using rule 63 (number -> FLOAT .)
    TOKEN           reduce using rule 63 (number -> FLOAT .)
    ID              reduce using rule 63 (number -> FLOAT .)
    $end            reduce using rule 63 (number -> FLOAT .)
    }               reduce using rule 63 (number -> FLOAT .)
    IF              reduce using rule 63 (number -> FLOAT .)
    TRY             reduce using rule 63 (number -> FLOAT .)
    FOR             reduce using rule 63 (number -> FLOAT .)
    RET             reduce using rule 63 (number -> FLOAT .)
    GLOBAL          reduce using rule 63 (number -> FLOAT .)
    UNITARY_OPERATOR reduce using rule 63 (number -> FLOAT .)
    FLOAT           reduce using rule 63 (number -> FLOAT .)
    INTEGER         reduce using rule 63 (number -> FLOAT .)
    BOOLEAN         reduce using rule 63 (number -> FLOAT .)
    STRING          reduce using rule 63 (number -> FLOAT .)
    [               reduce using rule 63 (number -> FLOAT .)
    {               reduce using rule 63 (number -> FLOAT .)
    ]               reduce using rule 63 (number -> FLOAT .)
    :               reduce using rule 63 (number -> FLOAT .)


state 41

    (64) number -> INTEGER .

    )               reduce using rule 64 (number -> INTEGER .)
    ,               reduce using rule 64 (number -> INTEGER .)
    SIGN            reduce using rule 64 (number -> INTEGER .)
    BINARY_OPERATOR reduce using rule 64 (number -> INTEGER .)
    FN              reduce using rule 64 (number -> INTEGER .)
    COMMAND         reduce using rule 64 (number -> INTEGER .)
    .               reduce using rule 64 (number -> INTEGER .)
    TOKEN           reduce using rule 64 (number -> INTEGER .)
    ID              reduce using rule 64 (number -> INTEGER .)
    $end            reduce using rule 64 (number -> INTEGER .)
    }               reduce using rule 64 (number -> INTEGER .)
    IF              reduce using rule 64 (number -> INTEGER .)
    TRY             reduce using rule 64 (number -> INTEGER .)
    FOR             reduce using rule 64 (number -> INTEGER .)
    RET             reduce using rule 64 (number -> INTEGER .)
    GLOBAL          reduce using rule 64 (number -> INTEGER .)
    UNITARY_OPERATOR reduce using rule 64 (number -> INTEGER .)
    FLOAT           reduce using rule 64 (number -> INTEGER .)
    INTEGER         reduce using rule 64 (number -> INTEGER .)
    BOOLEAN         reduce using rule 64 (number -> INTEGER .)
    STRING          reduce using rule 64 (number -> INTEGER .)
    [               reduce using rule 64 (number -> INTEGER .)
    {               reduce using rule 64 (number -> INTEGER .)
    ]               reduce using rule 64 (number -> INTEGER .)
    :               reduce using rule 64 (number -> INTEGER .)


state 42

    (65) boolean -> BOOLEAN .

    )               reduce using rule 65 (boolean -> BOOLEAN .)
    ,               reduce using rule 65 (boolean -> BOOLEAN .)
    SIGN            reduce using rule 65 (boolean -> BOOLEAN .)
    BINARY_OPERATOR reduce using rule 65 (boolean -> BOOLEAN .)
    FN              reduce using rule 65 (boolean -> BOOLEAN .)
    COMMAND         reduce using rule 65 (boolean -> BOOLEAN .)
    .               reduce using rule 65 (boolean -> BOOLEAN .)
    TOKEN           reduce using rule 65 (boolean -> BOOLEAN .)
    ID              reduce using rule 65 (boolean -> BOOLEAN .)
    $end            reduce using rule 65 (boolean -> BOOLEAN .)
    }               reduce using rule 65 (boolean -> BOOLEAN .)
    IF              reduce using rule 65 (boolean -> BOOLEAN .)
    TRY             reduce using rule 65 (boolean -> BOOLEAN .)
    FOR             reduce using rule 65 (boolean -> BOOLEAN .)
    RET             reduce using rule 65 (boolean -> BOOLEAN .)
    GLOBAL          reduce using rule 65 (boolean -> BOOLEAN .)
    UNITARY_OPERATOR reduce using rule 65 (boolean -> BOOLEAN .)
    FLOAT           reduce using rule 65 (boolean -> BOOLEAN .)
    INTEGER         reduce using rule 65 (boolean -> BOOLEAN .)
    BOOLEAN         reduce using rule 65 (boolean -> BOOLEAN .)
    STRING          reduce using rule 65 (boolean -> BOOLEAN .)
    [               reduce using rule 65 (boolean -> BOOLEAN .)
    {               reduce using rule 65 (boolean -> BOOLEAN .)
    ]               reduce using rule 65 (boolean -> BOOLEAN .)
    :               reduce using rule 65 (boolean -> BOOLEAN .)


state 43

    (66) string -> STRING .

    )               reduce using rule 66 (string -> STRING .)
    ,               reduce using rule 66 (string -> STRING .)
    SIGN            reduce using rule 66 (string -> STRING .)
    BINARY_OPERATOR reduce using rule 66 (string -> STRING .)
    FN              reduce using rule 66 (string -> STRING .)
    COMMAND         reduce using rule 66 (string -> STRING .)
    .               reduce using rule 66 (string -> STRING .)
    TOKEN           reduce using rule 66 (string -> STRING .)
    ID              reduce using rule 66 (string -> STRING .)
    $end            reduce using rule 66 (string -> STRING .)
    }               reduce using rule 66 (string -> STRING .)
    IF              reduce using rule 66 (string -> STRING .)
    TRY             reduce using rule 66 (string -> STRING .)
    FOR             reduce using rule 66 (string -> STRING .)
    RET             reduce using rule 66 (string -> STRING .)
    GLOBAL          reduce using rule 66 (string -> STRING .)
    UNITARY_OPERATOR reduce using rule 66 (string -> STRING .)
    FLOAT           reduce using rule 66 (string -> STRING .)
    INTEGER         reduce using rule 66 (string -> STRING .)
    BOOLEAN         reduce using rule 66 (string -> STRING .)
    STRING          reduce using rule 66 (string -> STRING .)
    [               reduce using rule 66 (string -> STRING .)
    {               reduce using rule 66 (string -> STRING .)
    ]               reduce using rule 66 (string -> STRING .)
    :               reduce using rule 66 (string -> STRING .)


state 44

    (62) list -> [ . term_list ]
    (44) term_list -> . term_list , term
    (45) term_list -> . term
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    ]               reduce using rule 68 (empty -> .)
    ,               reduce using rule 68 (empty -> .)

    term_list                      shift and go to state 60
    term                           shift and go to state 28
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    id                             shift and go to state 26
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 45

    (60) dict -> { . term_map }
    (61) dict -> { . empty }
    (42) term_map -> . term : term , term_map
    (43) term_map -> . term : term
    (68) empty -> .
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }

    }               reduce using rule 68 (empty -> .)
    :               reduce using rule 68 (empty -> .)
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45

    term_map                       shift and go to state 61
    empty                          shift and go to state 62
    term                           shift and go to state 63
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    id                             shift and go to state 26
    list                           shift and go to state 35
    dict                           shift and go to state 36

state 46

    (39) variable -> id = exp .

    FN              reduce using rule 39 (variable -> id = exp .)
    COMMAND         reduce using rule 39 (variable -> id = exp .)
    .               reduce using rule 39 (variable -> id = exp .)
    TOKEN           reduce using rule 39 (variable -> id = exp .)
    ID              reduce using rule 39 (variable -> id = exp .)
    $end            reduce using rule 39 (variable -> id = exp .)
    }               reduce using rule 39 (variable -> id = exp .)
    IF              reduce using rule 39 (variable -> id = exp .)
    TRY             reduce using rule 39 (variable -> id = exp .)
    FOR             reduce using rule 39 (variable -> id = exp .)
    RET             reduce using rule 39 (variable -> id = exp .)
    GLOBAL          reduce using rule 39 (variable -> id = exp .)
    SIGN            reduce using rule 39 (variable -> id = exp .)
    UNITARY_OPERATOR reduce using rule 39 (variable -> id = exp .)
    FLOAT           reduce using rule 39 (variable -> id = exp .)
    INTEGER         reduce using rule 39 (variable -> id = exp .)
    BOOLEAN         reduce using rule 39 (variable -> id = exp .)
    STRING          reduce using rule 39 (variable -> id = exp .)
    [               reduce using rule 39 (variable -> id = exp .)
    {               reduce using rule 39 (variable -> id = exp .)
    BINARY_OPERATOR reduce using rule 39 (variable -> id = exp .)


state 47

    (32) exp -> term . binop exp
    (33) exp -> term .
    (58) binop -> . SIGN
    (59) binop -> . BINARY_OPERATOR

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for BINARY_OPERATOR resolved as shift
    FN              reduce using rule 33 (exp -> term .)
    COMMAND         reduce using rule 33 (exp -> term .)
    .               reduce using rule 33 (exp -> term .)
    TOKEN           reduce using rule 33 (exp -> term .)
    ID              reduce using rule 33 (exp -> term .)
    $end            reduce using rule 33 (exp -> term .)
    }               reduce using rule 33 (exp -> term .)
    IF              reduce using rule 33 (exp -> term .)
    TRY             reduce using rule 33 (exp -> term .)
    FOR             reduce using rule 33 (exp -> term .)
    RET             reduce using rule 33 (exp -> term .)
    GLOBAL          reduce using rule 33 (exp -> term .)
    UNITARY_OPERATOR reduce using rule 33 (exp -> term .)
    FLOAT           reduce using rule 33 (exp -> term .)
    INTEGER         reduce using rule 33 (exp -> term .)
    BOOLEAN         reduce using rule 33 (exp -> term .)
    STRING          reduce using rule 33 (exp -> term .)
    [               reduce using rule 33 (exp -> term .)
    {               reduce using rule 33 (exp -> term .)
    SIGN            shift and go to state 65
    BINARY_OPERATOR shift and go to state 66

  ! SIGN            [ reduce using rule 33 (exp -> term .) ]
  ! BINARY_OPERATOR [ reduce using rule 33 (exp -> term .) ]

    binop                          shift and go to state 64

state 48

    (34) exp -> IF . exp { body } ELSE { body }
    (35) exp -> IF . exp { body }
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for { resolved as shift
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    exp                            shift and go to state 67
    term                           shift and go to state 47
    id                             shift and go to state 26
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 49

    (36) exp -> TRY . { body } CATCH { body }

    {               shift and go to state 68


state 50

    (37) exp -> FOR . id IN number . . number { body }
    (38) exp -> FOR . id IN id { body }
    (67) id -> . ID

    ID              shift and go to state 13

    id                             shift and go to state 69

state 51

    (13) function -> COMMAND id ( . parameter ) { body }
    (17) parameter -> . id , parameter
    (18) parameter -> . id
    (19) parameter -> . empty
    (67) id -> . ID
    (68) empty -> .

    ID              shift and go to state 13
    )               reduce using rule 68 (empty -> .)

    id                             shift and go to state 54
    parameter                      shift and go to state 70
    empty                          shift and go to state 56

state 52

    (16) python_function_call -> . id ( . term_list )
    (44) term_list -> . term_list , term
    (45) term_list -> . term
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    )               reduce using rule 68 (empty -> .)
    ,               reduce using rule 68 (empty -> .)

    id                             shift and go to state 26
    term_list                      shift and go to state 71
    term                           shift and go to state 28
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 53

    (14) token -> TOKEN ( string . )

    )               shift and go to state 72


state 54

    (17) parameter -> id . , parameter
    (18) parameter -> id .

    ,               shift and go to state 73
    )               reduce using rule 18 (parameter -> id .)


state 55

    (12) function -> FN id ( parameter . ) { body }

    )               shift and go to state 74


state 56

    (19) parameter -> empty .

    )               reduce using rule 19 (parameter -> empty .)


state 57

    (15) function_call -> id ( term_list ) .

    FN              reduce using rule 15 (function_call -> id ( term_list ) .)
    COMMAND         reduce using rule 15 (function_call -> id ( term_list ) .)
    .               reduce using rule 15 (function_call -> id ( term_list ) .)
    TOKEN           reduce using rule 15 (function_call -> id ( term_list ) .)
    ID              reduce using rule 15 (function_call -> id ( term_list ) .)
    $end            reduce using rule 15 (function_call -> id ( term_list ) .)
    )               reduce using rule 15 (function_call -> id ( term_list ) .)
    ,               reduce using rule 15 (function_call -> id ( term_list ) .)
    SIGN            reduce using rule 15 (function_call -> id ( term_list ) .)
    BINARY_OPERATOR reduce using rule 15 (function_call -> id ( term_list ) .)
    }               reduce using rule 15 (function_call -> id ( term_list ) .)
    IF              reduce using rule 15 (function_call -> id ( term_list ) .)
    TRY             reduce using rule 15 (function_call -> id ( term_list ) .)
    FOR             reduce using rule 15 (function_call -> id ( term_list ) .)
    RET             reduce using rule 15 (function_call -> id ( term_list ) .)
    GLOBAL          reduce using rule 15 (function_call -> id ( term_list ) .)
    UNITARY_OPERATOR reduce using rule 15 (function_call -> id ( term_list ) .)
    FLOAT           reduce using rule 15 (function_call -> id ( term_list ) .)
    INTEGER         reduce using rule 15 (function_call -> id ( term_list ) .)
    BOOLEAN         reduce using rule 15 (function_call -> id ( term_list ) .)
    STRING          reduce using rule 15 (function_call -> id ( term_list ) .)
    [               reduce using rule 15 (function_call -> id ( term_list ) .)
    {               reduce using rule 15 (function_call -> id ( term_list ) .)
    ]               reduce using rule 15 (function_call -> id ( term_list ) .)
    :               reduce using rule 15 (function_call -> id ( term_list ) .)


state 58

    (44) term_list -> term_list , . term
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    )               reduce using rule 68 (empty -> .)
    ,               reduce using rule 68 (empty -> .)
    ]               reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    TRY             reduce using rule 68 (empty -> .)
    FOR             reduce using rule 68 (empty -> .)
    RET             reduce using rule 68 (empty -> .)
    GLOBAL          reduce using rule 68 (empty -> .)
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    term                           shift and go to state 75
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    id                             shift and go to state 26
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 59

    (46) term -> unop term .

    )               reduce using rule 46 (term -> unop term .)
    ,               reduce using rule 46 (term -> unop term .)
    SIGN            reduce using rule 46 (term -> unop term .)
    BINARY_OPERATOR reduce using rule 46 (term -> unop term .)
    FN              reduce using rule 46 (term -> unop term .)
    COMMAND         reduce using rule 46 (term -> unop term .)
    .               reduce using rule 46 (term -> unop term .)
    TOKEN           reduce using rule 46 (term -> unop term .)
    ID              reduce using rule 46 (term -> unop term .)
    $end            reduce using rule 46 (term -> unop term .)
    }               reduce using rule 46 (term -> unop term .)
    IF              reduce using rule 46 (term -> unop term .)
    TRY             reduce using rule 46 (term -> unop term .)
    FOR             reduce using rule 46 (term -> unop term .)
    RET             reduce using rule 46 (term -> unop term .)
    GLOBAL          reduce using rule 46 (term -> unop term .)
    UNITARY_OPERATOR reduce using rule 46 (term -> unop term .)
    FLOAT           reduce using rule 46 (term -> unop term .)
    INTEGER         reduce using rule 46 (term -> unop term .)
    BOOLEAN         reduce using rule 46 (term -> unop term .)
    STRING          reduce using rule 46 (term -> unop term .)
    [               reduce using rule 46 (term -> unop term .)
    {               reduce using rule 46 (term -> unop term .)
    ]               reduce using rule 46 (term -> unop term .)
    :               reduce using rule 46 (term -> unop term .)


state 60

    (62) list -> [ term_list . ]
    (44) term_list -> term_list . , term

    ]               shift and go to state 76
    ,               shift and go to state 58


state 61

    (60) dict -> { term_map . }

    }               shift and go to state 77


state 62

    (61) dict -> { empty . }
    (55) term -> empty .

    }               shift and go to state 78
    :               reduce using rule 55 (term -> empty .)


state 63

    (42) term_map -> term . : term , term_map
    (43) term_map -> term . : term

    :               shift and go to state 79


state 64

    (32) exp -> term binop . exp
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    FN              reduce using rule 68 (empty -> .)
    COMMAND         reduce using rule 68 (empty -> .)
    TOKEN           reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)
    RET             reduce using rule 68 (empty -> .)
    GLOBAL          reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    term                           shift and go to state 47
    exp                            shift and go to state 80
    id                             shift and go to state 26
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 65

    (58) binop -> SIGN .

    IF              reduce using rule 58 (binop -> SIGN .)
    TRY             reduce using rule 58 (binop -> SIGN .)
    FOR             reduce using rule 58 (binop -> SIGN .)
    SIGN            reduce using rule 58 (binop -> SIGN .)
    UNITARY_OPERATOR reduce using rule 58 (binop -> SIGN .)
    FLOAT           reduce using rule 58 (binop -> SIGN .)
    INTEGER         reduce using rule 58 (binop -> SIGN .)
    BOOLEAN         reduce using rule 58 (binop -> SIGN .)
    STRING          reduce using rule 58 (binop -> SIGN .)
    .               reduce using rule 58 (binop -> SIGN .)
    ID              reduce using rule 58 (binop -> SIGN .)
    [               reduce using rule 58 (binop -> SIGN .)
    {               reduce using rule 58 (binop -> SIGN .)
    BINARY_OPERATOR reduce using rule 58 (binop -> SIGN .)
    FN              reduce using rule 58 (binop -> SIGN .)
    COMMAND         reduce using rule 58 (binop -> SIGN .)
    TOKEN           reduce using rule 58 (binop -> SIGN .)
    $end            reduce using rule 58 (binop -> SIGN .)
    }               reduce using rule 58 (binop -> SIGN .)
    RET             reduce using rule 58 (binop -> SIGN .)
    GLOBAL          reduce using rule 58 (binop -> SIGN .)


state 66

    (59) binop -> BINARY_OPERATOR .

    IF              reduce using rule 59 (binop -> BINARY_OPERATOR .)
    TRY             reduce using rule 59 (binop -> BINARY_OPERATOR .)
    FOR             reduce using rule 59 (binop -> BINARY_OPERATOR .)
    SIGN            reduce using rule 59 (binop -> BINARY_OPERATOR .)
    UNITARY_OPERATOR reduce using rule 59 (binop -> BINARY_OPERATOR .)
    FLOAT           reduce using rule 59 (binop -> BINARY_OPERATOR .)
    INTEGER         reduce using rule 59 (binop -> BINARY_OPERATOR .)
    BOOLEAN         reduce using rule 59 (binop -> BINARY_OPERATOR .)
    STRING          reduce using rule 59 (binop -> BINARY_OPERATOR .)
    .               reduce using rule 59 (binop -> BINARY_OPERATOR .)
    ID              reduce using rule 59 (binop -> BINARY_OPERATOR .)
    [               reduce using rule 59 (binop -> BINARY_OPERATOR .)
    {               reduce using rule 59 (binop -> BINARY_OPERATOR .)
    BINARY_OPERATOR reduce using rule 59 (binop -> BINARY_OPERATOR .)
    FN              reduce using rule 59 (binop -> BINARY_OPERATOR .)
    COMMAND         reduce using rule 59 (binop -> BINARY_OPERATOR .)
    TOKEN           reduce using rule 59 (binop -> BINARY_OPERATOR .)
    $end            reduce using rule 59 (binop -> BINARY_OPERATOR .)
    }               reduce using rule 59 (binop -> BINARY_OPERATOR .)
    RET             reduce using rule 59 (binop -> BINARY_OPERATOR .)
    GLOBAL          reduce using rule 59 (binop -> BINARY_OPERATOR .)


state 67

    (34) exp -> IF exp . { body } ELSE { body }
    (35) exp -> IF exp . { body }

    {               shift and go to state 81


state 68

    (36) exp -> TRY { . body } CATCH { body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (67) id -> . ID
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    body                           shift and go to state 82
    exp                            shift and go to state 83
    variable                       shift and go to state 84
    return                         shift and go to state 85
    global                         shift and go to state 86
    function_call                  shift and go to state 87
    python_function_call           shift and go to state 88
    id                             shift and go to state 89
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 69

    (37) exp -> FOR id . IN number . . number { body }
    (38) exp -> FOR id . IN id { body }

    IN              shift and go to state 92


state 70

    (13) function -> COMMAND id ( parameter . ) { body }

    )               shift and go to state 93


state 71

    (16) python_function_call -> . id ( term_list . )
    (44) term_list -> term_list . , term

    )               shift and go to state 94
    ,               shift and go to state 58


state 72

    (14) token -> TOKEN ( string ) .

    FN              reduce using rule 14 (token -> TOKEN ( string ) .)
    COMMAND         reduce using rule 14 (token -> TOKEN ( string ) .)
    .               reduce using rule 14 (token -> TOKEN ( string ) .)
    TOKEN           reduce using rule 14 (token -> TOKEN ( string ) .)
    ID              reduce using rule 14 (token -> TOKEN ( string ) .)
    $end            reduce using rule 14 (token -> TOKEN ( string ) .)


state 73

    (17) parameter -> id , . parameter
    (17) parameter -> . id , parameter
    (18) parameter -> . id
    (19) parameter -> . empty
    (67) id -> . ID
    (68) empty -> .

    ID              shift and go to state 13
    )               reduce using rule 68 (empty -> .)

    id                             shift and go to state 54
    parameter                      shift and go to state 95
    empty                          shift and go to state 56

state 74

    (12) function -> FN id ( parameter ) . { body }

    {               shift and go to state 96


state 75

    (44) term_list -> term_list , term .

    )               reduce using rule 44 (term_list -> term_list , term .)
    ,               reduce using rule 44 (term_list -> term_list , term .)
    ]               reduce using rule 44 (term_list -> term_list , term .)
    }               reduce using rule 44 (term_list -> term_list , term .)
    IF              reduce using rule 44 (term_list -> term_list , term .)
    TRY             reduce using rule 44 (term_list -> term_list , term .)
    FOR             reduce using rule 44 (term_list -> term_list , term .)
    RET             reduce using rule 44 (term_list -> term_list , term .)
    GLOBAL          reduce using rule 44 (term_list -> term_list , term .)
    .               reduce using rule 44 (term_list -> term_list , term .)
    ID              reduce using rule 44 (term_list -> term_list , term .)
    SIGN            reduce using rule 44 (term_list -> term_list , term .)
    UNITARY_OPERATOR reduce using rule 44 (term_list -> term_list , term .)
    FLOAT           reduce using rule 44 (term_list -> term_list , term .)
    INTEGER         reduce using rule 44 (term_list -> term_list , term .)
    BOOLEAN         reduce using rule 44 (term_list -> term_list , term .)
    STRING          reduce using rule 44 (term_list -> term_list , term .)
    [               reduce using rule 44 (term_list -> term_list , term .)
    {               reduce using rule 44 (term_list -> term_list , term .)
    BINARY_OPERATOR reduce using rule 44 (term_list -> term_list , term .)


state 76

    (62) list -> [ term_list ] .

    )               reduce using rule 62 (list -> [ term_list ] .)
    ,               reduce using rule 62 (list -> [ term_list ] .)
    SIGN            reduce using rule 62 (list -> [ term_list ] .)
    BINARY_OPERATOR reduce using rule 62 (list -> [ term_list ] .)
    FN              reduce using rule 62 (list -> [ term_list ] .)
    COMMAND         reduce using rule 62 (list -> [ term_list ] .)
    .               reduce using rule 62 (list -> [ term_list ] .)
    TOKEN           reduce using rule 62 (list -> [ term_list ] .)
    ID              reduce using rule 62 (list -> [ term_list ] .)
    $end            reduce using rule 62 (list -> [ term_list ] .)
    }               reduce using rule 62 (list -> [ term_list ] .)
    IF              reduce using rule 62 (list -> [ term_list ] .)
    TRY             reduce using rule 62 (list -> [ term_list ] .)
    FOR             reduce using rule 62 (list -> [ term_list ] .)
    RET             reduce using rule 62 (list -> [ term_list ] .)
    GLOBAL          reduce using rule 62 (list -> [ term_list ] .)
    UNITARY_OPERATOR reduce using rule 62 (list -> [ term_list ] .)
    FLOAT           reduce using rule 62 (list -> [ term_list ] .)
    INTEGER         reduce using rule 62 (list -> [ term_list ] .)
    BOOLEAN         reduce using rule 62 (list -> [ term_list ] .)
    STRING          reduce using rule 62 (list -> [ term_list ] .)
    [               reduce using rule 62 (list -> [ term_list ] .)
    {               reduce using rule 62 (list -> [ term_list ] .)
    ]               reduce using rule 62 (list -> [ term_list ] .)
    :               reduce using rule 62 (list -> [ term_list ] .)


state 77

    (60) dict -> { term_map } .

    )               reduce using rule 60 (dict -> { term_map } .)
    ,               reduce using rule 60 (dict -> { term_map } .)
    SIGN            reduce using rule 60 (dict -> { term_map } .)
    BINARY_OPERATOR reduce using rule 60 (dict -> { term_map } .)
    FN              reduce using rule 60 (dict -> { term_map } .)
    COMMAND         reduce using rule 60 (dict -> { term_map } .)
    .               reduce using rule 60 (dict -> { term_map } .)
    TOKEN           reduce using rule 60 (dict -> { term_map } .)
    ID              reduce using rule 60 (dict -> { term_map } .)
    $end            reduce using rule 60 (dict -> { term_map } .)
    }               reduce using rule 60 (dict -> { term_map } .)
    IF              reduce using rule 60 (dict -> { term_map } .)
    TRY             reduce using rule 60 (dict -> { term_map } .)
    FOR             reduce using rule 60 (dict -> { term_map } .)
    RET             reduce using rule 60 (dict -> { term_map } .)
    GLOBAL          reduce using rule 60 (dict -> { term_map } .)
    UNITARY_OPERATOR reduce using rule 60 (dict -> { term_map } .)
    FLOAT           reduce using rule 60 (dict -> { term_map } .)
    INTEGER         reduce using rule 60 (dict -> { term_map } .)
    BOOLEAN         reduce using rule 60 (dict -> { term_map } .)
    STRING          reduce using rule 60 (dict -> { term_map } .)
    [               reduce using rule 60 (dict -> { term_map } .)
    {               reduce using rule 60 (dict -> { term_map } .)
    ]               reduce using rule 60 (dict -> { term_map } .)
    :               reduce using rule 60 (dict -> { term_map } .)


state 78

    (61) dict -> { empty } .

    )               reduce using rule 61 (dict -> { empty } .)
    ,               reduce using rule 61 (dict -> { empty } .)
    SIGN            reduce using rule 61 (dict -> { empty } .)
    BINARY_OPERATOR reduce using rule 61 (dict -> { empty } .)
    FN              reduce using rule 61 (dict -> { empty } .)
    COMMAND         reduce using rule 61 (dict -> { empty } .)
    .               reduce using rule 61 (dict -> { empty } .)
    TOKEN           reduce using rule 61 (dict -> { empty } .)
    ID              reduce using rule 61 (dict -> { empty } .)
    $end            reduce using rule 61 (dict -> { empty } .)
    }               reduce using rule 61 (dict -> { empty } .)
    IF              reduce using rule 61 (dict -> { empty } .)
    TRY             reduce using rule 61 (dict -> { empty } .)
    FOR             reduce using rule 61 (dict -> { empty } .)
    RET             reduce using rule 61 (dict -> { empty } .)
    GLOBAL          reduce using rule 61 (dict -> { empty } .)
    UNITARY_OPERATOR reduce using rule 61 (dict -> { empty } .)
    FLOAT           reduce using rule 61 (dict -> { empty } .)
    INTEGER         reduce using rule 61 (dict -> { empty } .)
    BOOLEAN         reduce using rule 61 (dict -> { empty } .)
    STRING          reduce using rule 61 (dict -> { empty } .)
    [               reduce using rule 61 (dict -> { empty } .)
    {               reduce using rule 61 (dict -> { empty } .)
    ]               reduce using rule 61 (dict -> { empty } .)
    :               reduce using rule 61 (dict -> { empty } .)


state 79

    (42) term_map -> term : . term , term_map
    (43) term_map -> term : . term
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    ,               reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)

    term                           shift and go to state 97
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    id                             shift and go to state 26
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 80

    (32) exp -> term binop exp .

    FN              reduce using rule 32 (exp -> term binop exp .)
    COMMAND         reduce using rule 32 (exp -> term binop exp .)
    .               reduce using rule 32 (exp -> term binop exp .)
    TOKEN           reduce using rule 32 (exp -> term binop exp .)
    ID              reduce using rule 32 (exp -> term binop exp .)
    $end            reduce using rule 32 (exp -> term binop exp .)
    }               reduce using rule 32 (exp -> term binop exp .)
    IF              reduce using rule 32 (exp -> term binop exp .)
    TRY             reduce using rule 32 (exp -> term binop exp .)
    FOR             reduce using rule 32 (exp -> term binop exp .)
    RET             reduce using rule 32 (exp -> term binop exp .)
    GLOBAL          reduce using rule 32 (exp -> term binop exp .)
    SIGN            reduce using rule 32 (exp -> term binop exp .)
    UNITARY_OPERATOR reduce using rule 32 (exp -> term binop exp .)
    FLOAT           reduce using rule 32 (exp -> term binop exp .)
    INTEGER         reduce using rule 32 (exp -> term binop exp .)
    BOOLEAN         reduce using rule 32 (exp -> term binop exp .)
    STRING          reduce using rule 32 (exp -> term binop exp .)
    [               reduce using rule 32 (exp -> term binop exp .)
    {               reduce using rule 32 (exp -> term binop exp .)
    BINARY_OPERATOR reduce using rule 32 (exp -> term binop exp .)


state 81

    (34) exp -> IF exp { . body } ELSE { body }
    (35) exp -> IF exp { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (67) id -> . ID
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    exp                            shift and go to state 83
    body                           shift and go to state 98
    variable                       shift and go to state 84
    return                         shift and go to state 85
    global                         shift and go to state 86
    function_call                  shift and go to state 87
    python_function_call           shift and go to state 88
    id                             shift and go to state 89
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 82

    (36) exp -> TRY { body . } CATCH { body }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (67) id -> . ID
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 99
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! }               [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    exp                            shift and go to state 100
    variable                       shift and go to state 101
    return                         shift and go to state 102
    global                         shift and go to state 103
    function_call                  shift and go to state 104
    python_function_call           shift and go to state 105
    term                           shift and go to state 47
    id                             shift and go to state 106
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 83

    (28) body -> exp .

    }               reduce using rule 28 (body -> exp .)
    IF              reduce using rule 28 (body -> exp .)
    TRY             reduce using rule 28 (body -> exp .)
    FOR             reduce using rule 28 (body -> exp .)
    RET             reduce using rule 28 (body -> exp .)
    GLOBAL          reduce using rule 28 (body -> exp .)
    .               reduce using rule 28 (body -> exp .)
    ID              reduce using rule 28 (body -> exp .)
    SIGN            reduce using rule 28 (body -> exp .)
    UNITARY_OPERATOR reduce using rule 28 (body -> exp .)
    FLOAT           reduce using rule 28 (body -> exp .)
    INTEGER         reduce using rule 28 (body -> exp .)
    BOOLEAN         reduce using rule 28 (body -> exp .)
    STRING          reduce using rule 28 (body -> exp .)
    [               reduce using rule 28 (body -> exp .)
    {               reduce using rule 28 (body -> exp .)
    BINARY_OPERATOR reduce using rule 28 (body -> exp .)


state 84

    (29) body -> variable .

    }               reduce using rule 29 (body -> variable .)
    IF              reduce using rule 29 (body -> variable .)
    TRY             reduce using rule 29 (body -> variable .)
    FOR             reduce using rule 29 (body -> variable .)
    RET             reduce using rule 29 (body -> variable .)
    GLOBAL          reduce using rule 29 (body -> variable .)
    .               reduce using rule 29 (body -> variable .)
    ID              reduce using rule 29 (body -> variable .)
    SIGN            reduce using rule 29 (body -> variable .)
    UNITARY_OPERATOR reduce using rule 29 (body -> variable .)
    FLOAT           reduce using rule 29 (body -> variable .)
    INTEGER         reduce using rule 29 (body -> variable .)
    BOOLEAN         reduce using rule 29 (body -> variable .)
    STRING          reduce using rule 29 (body -> variable .)
    [               reduce using rule 29 (body -> variable .)
    {               reduce using rule 29 (body -> variable .)
    BINARY_OPERATOR reduce using rule 29 (body -> variable .)


state 85

    (30) body -> return .

    }               reduce using rule 30 (body -> return .)
    IF              reduce using rule 30 (body -> return .)
    TRY             reduce using rule 30 (body -> return .)
    FOR             reduce using rule 30 (body -> return .)
    RET             reduce using rule 30 (body -> return .)
    GLOBAL          reduce using rule 30 (body -> return .)
    .               reduce using rule 30 (body -> return .)
    ID              reduce using rule 30 (body -> return .)
    SIGN            reduce using rule 30 (body -> return .)
    UNITARY_OPERATOR reduce using rule 30 (body -> return .)
    FLOAT           reduce using rule 30 (body -> return .)
    INTEGER         reduce using rule 30 (body -> return .)
    BOOLEAN         reduce using rule 30 (body -> return .)
    STRING          reduce using rule 30 (body -> return .)
    [               reduce using rule 30 (body -> return .)
    {               reduce using rule 30 (body -> return .)
    BINARY_OPERATOR reduce using rule 30 (body -> return .)


state 86

    (31) body -> global .

    }               reduce using rule 31 (body -> global .)
    IF              reduce using rule 31 (body -> global .)
    TRY             reduce using rule 31 (body -> global .)
    FOR             reduce using rule 31 (body -> global .)
    RET             reduce using rule 31 (body -> global .)
    GLOBAL          reduce using rule 31 (body -> global .)
    .               reduce using rule 31 (body -> global .)
    ID              reduce using rule 31 (body -> global .)
    SIGN            reduce using rule 31 (body -> global .)
    UNITARY_OPERATOR reduce using rule 31 (body -> global .)
    FLOAT           reduce using rule 31 (body -> global .)
    INTEGER         reduce using rule 31 (body -> global .)
    BOOLEAN         reduce using rule 31 (body -> global .)
    STRING          reduce using rule 31 (body -> global .)
    [               reduce using rule 31 (body -> global .)
    {               reduce using rule 31 (body -> global .)
    BINARY_OPERATOR reduce using rule 31 (body -> global .)


state 87

    (26) body -> function_call .
    (50) term -> function_call .

  ! reduce/reduce conflict for SIGN resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for BINARY_OPERATOR resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for } resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for IF resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for TRY resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for FOR resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for RET resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for . resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for ID resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for UNITARY_OPERATOR resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for FLOAT resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for INTEGER resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for STRING resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for [ resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for { resolved using rule 26 (body -> function_call .)
    }               reduce using rule 26 (body -> function_call .)
    IF              reduce using rule 26 (body -> function_call .)
    TRY             reduce using rule 26 (body -> function_call .)
    FOR             reduce using rule 26 (body -> function_call .)
    RET             reduce using rule 26 (body -> function_call .)
    GLOBAL          reduce using rule 26 (body -> function_call .)
    .               reduce using rule 26 (body -> function_call .)
    ID              reduce using rule 26 (body -> function_call .)
    SIGN            reduce using rule 26 (body -> function_call .)
    UNITARY_OPERATOR reduce using rule 26 (body -> function_call .)
    FLOAT           reduce using rule 26 (body -> function_call .)
    INTEGER         reduce using rule 26 (body -> function_call .)
    BOOLEAN         reduce using rule 26 (body -> function_call .)
    STRING          reduce using rule 26 (body -> function_call .)
    [               reduce using rule 26 (body -> function_call .)
    {               reduce using rule 26 (body -> function_call .)
    BINARY_OPERATOR reduce using rule 26 (body -> function_call .)

  ! SIGN            [ reduce using rule 50 (term -> function_call .) ]
  ! BINARY_OPERATOR [ reduce using rule 50 (term -> function_call .) ]
  ! }               [ reduce using rule 50 (term -> function_call .) ]
  ! IF              [ reduce using rule 50 (term -> function_call .) ]
  ! TRY             [ reduce using rule 50 (term -> function_call .) ]
  ! FOR             [ reduce using rule 50 (term -> function_call .) ]
  ! RET             [ reduce using rule 50 (term -> function_call .) ]
  ! GLOBAL          [ reduce using rule 50 (term -> function_call .) ]
  ! .               [ reduce using rule 50 (term -> function_call .) ]
  ! ID              [ reduce using rule 50 (term -> function_call .) ]
  ! UNITARY_OPERATOR [ reduce using rule 50 (term -> function_call .) ]
  ! FLOAT           [ reduce using rule 50 (term -> function_call .) ]
  ! INTEGER         [ reduce using rule 50 (term -> function_call .) ]
  ! BOOLEAN         [ reduce using rule 50 (term -> function_call .) ]
  ! STRING          [ reduce using rule 50 (term -> function_call .) ]
  ! [               [ reduce using rule 50 (term -> function_call .) ]
  ! {               [ reduce using rule 50 (term -> function_call .) ]


state 88

    (27) body -> python_function_call .
    (51) term -> python_function_call .

  ! reduce/reduce conflict for SIGN resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for BINARY_OPERATOR resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for } resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for IF resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for TRY resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for FOR resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for RET resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for . resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for ID resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for UNITARY_OPERATOR resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for FLOAT resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for INTEGER resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for STRING resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for [ resolved using rule 27 (body -> python_function_call .)
  ! reduce/reduce conflict for { resolved using rule 27 (body -> python_function_call .)
    }               reduce using rule 27 (body -> python_function_call .)
    IF              reduce using rule 27 (body -> python_function_call .)
    TRY             reduce using rule 27 (body -> python_function_call .)
    FOR             reduce using rule 27 (body -> python_function_call .)
    RET             reduce using rule 27 (body -> python_function_call .)
    GLOBAL          reduce using rule 27 (body -> python_function_call .)
    .               reduce using rule 27 (body -> python_function_call .)
    ID              reduce using rule 27 (body -> python_function_call .)
    SIGN            reduce using rule 27 (body -> python_function_call .)
    UNITARY_OPERATOR reduce using rule 27 (body -> python_function_call .)
    FLOAT           reduce using rule 27 (body -> python_function_call .)
    INTEGER         reduce using rule 27 (body -> python_function_call .)
    BOOLEAN         reduce using rule 27 (body -> python_function_call .)
    STRING          reduce using rule 27 (body -> python_function_call .)
    [               reduce using rule 27 (body -> python_function_call .)
    {               reduce using rule 27 (body -> python_function_call .)
    BINARY_OPERATOR reduce using rule 27 (body -> python_function_call .)

  ! SIGN            [ reduce using rule 51 (term -> python_function_call .) ]
  ! BINARY_OPERATOR [ reduce using rule 51 (term -> python_function_call .) ]
  ! }               [ reduce using rule 51 (term -> python_function_call .) ]
  ! IF              [ reduce using rule 51 (term -> python_function_call .) ]
  ! TRY             [ reduce using rule 51 (term -> python_function_call .) ]
  ! FOR             [ reduce using rule 51 (term -> python_function_call .) ]
  ! RET             [ reduce using rule 51 (term -> python_function_call .) ]
  ! GLOBAL          [ reduce using rule 51 (term -> python_function_call .) ]
  ! .               [ reduce using rule 51 (term -> python_function_call .) ]
  ! ID              [ reduce using rule 51 (term -> python_function_call .) ]
  ! UNITARY_OPERATOR [ reduce using rule 51 (term -> python_function_call .) ]
  ! FLOAT           [ reduce using rule 51 (term -> python_function_call .) ]
  ! INTEGER         [ reduce using rule 51 (term -> python_function_call .) ]
  ! BOOLEAN         [ reduce using rule 51 (term -> python_function_call .) ]
  ! STRING          [ reduce using rule 51 (term -> python_function_call .) ]
  ! [               [ reduce using rule 51 (term -> python_function_call .) ]
  ! {               [ reduce using rule 51 (term -> python_function_call .) ]


state 89

    (15) function_call -> id . ( term_list )
    (39) variable -> id . = exp
    (52) term -> id .

    (               shift and go to state 20
    =               shift and go to state 21
    SIGN            reduce using rule 52 (term -> id .)
    BINARY_OPERATOR reduce using rule 52 (term -> id .)
    }               reduce using rule 52 (term -> id .)
    IF              reduce using rule 52 (term -> id .)
    TRY             reduce using rule 52 (term -> id .)
    FOR             reduce using rule 52 (term -> id .)
    RET             reduce using rule 52 (term -> id .)
    GLOBAL          reduce using rule 52 (term -> id .)
    .               reduce using rule 52 (term -> id .)
    ID              reduce using rule 52 (term -> id .)
    UNITARY_OPERATOR reduce using rule 52 (term -> id .)
    FLOAT           reduce using rule 52 (term -> id .)
    INTEGER         reduce using rule 52 (term -> id .)
    BOOLEAN         reduce using rule 52 (term -> id .)
    STRING          reduce using rule 52 (term -> id .)
    [               reduce using rule 52 (term -> id .)
    {               reduce using rule 52 (term -> id .)


state 90

    (40) return -> RET . id
    (67) id -> . ID

    ID              shift and go to state 13

    id                             shift and go to state 107

state 91

    (41) global -> GLOBAL . term_list
    (44) term_list -> . term_list , term
    (45) term_list -> . term
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    ,               reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    TRY             reduce using rule 68 (empty -> .)
    FOR             reduce using rule 68 (empty -> .)
    RET             reduce using rule 68 (empty -> .)
    GLOBAL          reduce using rule 68 (empty -> .)
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    term_list                      shift and go to state 108
    term                           shift and go to state 28
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    id                             shift and go to state 26
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 92

    (37) exp -> FOR id IN . number . . number { body }
    (38) exp -> FOR id IN . id { body }
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (67) id -> . ID

    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    ID              shift and go to state 13

    id                             shift and go to state 109
    number                         shift and go to state 110

state 93

    (13) function -> COMMAND id ( parameter ) . { body }

    {               shift and go to state 111


state 94

    (16) python_function_call -> . id ( term_list ) .

    FN              reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    COMMAND         reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    .               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    TOKEN           reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    ID              reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    $end            reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    )               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    ,               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    SIGN            reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    BINARY_OPERATOR reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    }               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    IF              reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    TRY             reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    FOR             reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    RET             reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    GLOBAL          reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    UNITARY_OPERATOR reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    FLOAT           reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    INTEGER         reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    BOOLEAN         reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    STRING          reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    [               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    {               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    ]               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    :               reduce using rule 16 (python_function_call -> . id ( term_list ) .)


state 95

    (17) parameter -> id , parameter .

    )               reduce using rule 17 (parameter -> id , parameter .)


state 96

    (12) function -> FN id ( parameter ) { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (67) id -> . ID
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    id                             shift and go to state 89
    body                           shift and go to state 112
    exp                            shift and go to state 83
    variable                       shift and go to state 84
    return                         shift and go to state 85
    global                         shift and go to state 86
    function_call                  shift and go to state 87
    python_function_call           shift and go to state 88
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 97

    (42) term_map -> term : term . , term_map
    (43) term_map -> term : term .

    ,               shift and go to state 113
    }               reduce using rule 43 (term_map -> term : term .)


state 98

    (34) exp -> IF exp { body . } ELSE { body }
    (35) exp -> IF exp { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (67) id -> . ID
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 114
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! }               [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    exp                            shift and go to state 100
    variable                       shift and go to state 101
    return                         shift and go to state 102
    global                         shift and go to state 103
    function_call                  shift and go to state 104
    python_function_call           shift and go to state 105
    term                           shift and go to state 47
    id                             shift and go to state 106
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 99

    (36) exp -> TRY { body } . CATCH { body }

    CATCH           shift and go to state 115


state 100

    (20) body -> body exp .

    }               reduce using rule 20 (body -> body exp .)
    IF              reduce using rule 20 (body -> body exp .)
    TRY             reduce using rule 20 (body -> body exp .)
    FOR             reduce using rule 20 (body -> body exp .)
    RET             reduce using rule 20 (body -> body exp .)
    GLOBAL          reduce using rule 20 (body -> body exp .)
    .               reduce using rule 20 (body -> body exp .)
    ID              reduce using rule 20 (body -> body exp .)
    SIGN            reduce using rule 20 (body -> body exp .)
    UNITARY_OPERATOR reduce using rule 20 (body -> body exp .)
    FLOAT           reduce using rule 20 (body -> body exp .)
    INTEGER         reduce using rule 20 (body -> body exp .)
    BOOLEAN         reduce using rule 20 (body -> body exp .)
    STRING          reduce using rule 20 (body -> body exp .)
    [               reduce using rule 20 (body -> body exp .)
    {               reduce using rule 20 (body -> body exp .)
    BINARY_OPERATOR reduce using rule 20 (body -> body exp .)


state 101

    (21) body -> body variable .

    }               reduce using rule 21 (body -> body variable .)
    IF              reduce using rule 21 (body -> body variable .)
    TRY             reduce using rule 21 (body -> body variable .)
    FOR             reduce using rule 21 (body -> body variable .)
    RET             reduce using rule 21 (body -> body variable .)
    GLOBAL          reduce using rule 21 (body -> body variable .)
    .               reduce using rule 21 (body -> body variable .)
    ID              reduce using rule 21 (body -> body variable .)
    SIGN            reduce using rule 21 (body -> body variable .)
    UNITARY_OPERATOR reduce using rule 21 (body -> body variable .)
    FLOAT           reduce using rule 21 (body -> body variable .)
    INTEGER         reduce using rule 21 (body -> body variable .)
    BOOLEAN         reduce using rule 21 (body -> body variable .)
    STRING          reduce using rule 21 (body -> body variable .)
    [               reduce using rule 21 (body -> body variable .)
    {               reduce using rule 21 (body -> body variable .)
    BINARY_OPERATOR reduce using rule 21 (body -> body variable .)


state 102

    (22) body -> body return .

    }               reduce using rule 22 (body -> body return .)
    IF              reduce using rule 22 (body -> body return .)
    TRY             reduce using rule 22 (body -> body return .)
    FOR             reduce using rule 22 (body -> body return .)
    RET             reduce using rule 22 (body -> body return .)
    GLOBAL          reduce using rule 22 (body -> body return .)
    .               reduce using rule 22 (body -> body return .)
    ID              reduce using rule 22 (body -> body return .)
    SIGN            reduce using rule 22 (body -> body return .)
    UNITARY_OPERATOR reduce using rule 22 (body -> body return .)
    FLOAT           reduce using rule 22 (body -> body return .)
    INTEGER         reduce using rule 22 (body -> body return .)
    BOOLEAN         reduce using rule 22 (body -> body return .)
    STRING          reduce using rule 22 (body -> body return .)
    [               reduce using rule 22 (body -> body return .)
    {               reduce using rule 22 (body -> body return .)
    BINARY_OPERATOR reduce using rule 22 (body -> body return .)


state 103

    (23) body -> body global .

    }               reduce using rule 23 (body -> body global .)
    IF              reduce using rule 23 (body -> body global .)
    TRY             reduce using rule 23 (body -> body global .)
    FOR             reduce using rule 23 (body -> body global .)
    RET             reduce using rule 23 (body -> body global .)
    GLOBAL          reduce using rule 23 (body -> body global .)
    .               reduce using rule 23 (body -> body global .)
    ID              reduce using rule 23 (body -> body global .)
    SIGN            reduce using rule 23 (body -> body global .)
    UNITARY_OPERATOR reduce using rule 23 (body -> body global .)
    FLOAT           reduce using rule 23 (body -> body global .)
    INTEGER         reduce using rule 23 (body -> body global .)
    BOOLEAN         reduce using rule 23 (body -> body global .)
    STRING          reduce using rule 23 (body -> body global .)
    [               reduce using rule 23 (body -> body global .)
    {               reduce using rule 23 (body -> body global .)
    BINARY_OPERATOR reduce using rule 23 (body -> body global .)


state 104

    (24) body -> body function_call .
    (50) term -> function_call .

  ! reduce/reduce conflict for SIGN resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for BINARY_OPERATOR resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for } resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for IF resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for TRY resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for RET resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for . resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for ID resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for UNITARY_OPERATOR resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for FLOAT resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for INTEGER resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for STRING resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for [ resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for { resolved using rule 24 (body -> body function_call .)
    }               reduce using rule 24 (body -> body function_call .)
    IF              reduce using rule 24 (body -> body function_call .)
    TRY             reduce using rule 24 (body -> body function_call .)
    FOR             reduce using rule 24 (body -> body function_call .)
    RET             reduce using rule 24 (body -> body function_call .)
    GLOBAL          reduce using rule 24 (body -> body function_call .)
    .               reduce using rule 24 (body -> body function_call .)
    ID              reduce using rule 24 (body -> body function_call .)
    SIGN            reduce using rule 24 (body -> body function_call .)
    UNITARY_OPERATOR reduce using rule 24 (body -> body function_call .)
    FLOAT           reduce using rule 24 (body -> body function_call .)
    INTEGER         reduce using rule 24 (body -> body function_call .)
    BOOLEAN         reduce using rule 24 (body -> body function_call .)
    STRING          reduce using rule 24 (body -> body function_call .)
    [               reduce using rule 24 (body -> body function_call .)
    {               reduce using rule 24 (body -> body function_call .)
    BINARY_OPERATOR reduce using rule 24 (body -> body function_call .)

  ! SIGN            [ reduce using rule 50 (term -> function_call .) ]
  ! BINARY_OPERATOR [ reduce using rule 50 (term -> function_call .) ]
  ! }               [ reduce using rule 50 (term -> function_call .) ]
  ! IF              [ reduce using rule 50 (term -> function_call .) ]
  ! TRY             [ reduce using rule 50 (term -> function_call .) ]
  ! FOR             [ reduce using rule 50 (term -> function_call .) ]
  ! RET             [ reduce using rule 50 (term -> function_call .) ]
  ! GLOBAL          [ reduce using rule 50 (term -> function_call .) ]
  ! .               [ reduce using rule 50 (term -> function_call .) ]
  ! ID              [ reduce using rule 50 (term -> function_call .) ]
  ! UNITARY_OPERATOR [ reduce using rule 50 (term -> function_call .) ]
  ! FLOAT           [ reduce using rule 50 (term -> function_call .) ]
  ! INTEGER         [ reduce using rule 50 (term -> function_call .) ]
  ! BOOLEAN         [ reduce using rule 50 (term -> function_call .) ]
  ! STRING          [ reduce using rule 50 (term -> function_call .) ]
  ! [               [ reduce using rule 50 (term -> function_call .) ]
  ! {               [ reduce using rule 50 (term -> function_call .) ]


state 105

    (25) body -> body python_function_call .
    (51) term -> python_function_call .

  ! reduce/reduce conflict for SIGN resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for BINARY_OPERATOR resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for } resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for IF resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for TRY resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for RET resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for . resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for ID resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for UNITARY_OPERATOR resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for FLOAT resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for INTEGER resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for STRING resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for [ resolved using rule 25 (body -> body python_function_call .)
  ! reduce/reduce conflict for { resolved using rule 25 (body -> body python_function_call .)
    }               reduce using rule 25 (body -> body python_function_call .)
    IF              reduce using rule 25 (body -> body python_function_call .)
    TRY             reduce using rule 25 (body -> body python_function_call .)
    FOR             reduce using rule 25 (body -> body python_function_call .)
    RET             reduce using rule 25 (body -> body python_function_call .)
    GLOBAL          reduce using rule 25 (body -> body python_function_call .)
    .               reduce using rule 25 (body -> body python_function_call .)
    ID              reduce using rule 25 (body -> body python_function_call .)
    SIGN            reduce using rule 25 (body -> body python_function_call .)
    UNITARY_OPERATOR reduce using rule 25 (body -> body python_function_call .)
    FLOAT           reduce using rule 25 (body -> body python_function_call .)
    INTEGER         reduce using rule 25 (body -> body python_function_call .)
    BOOLEAN         reduce using rule 25 (body -> body python_function_call .)
    STRING          reduce using rule 25 (body -> body python_function_call .)
    [               reduce using rule 25 (body -> body python_function_call .)
    {               reduce using rule 25 (body -> body python_function_call .)
    BINARY_OPERATOR reduce using rule 25 (body -> body python_function_call .)

  ! SIGN            [ reduce using rule 51 (term -> python_function_call .) ]
  ! BINARY_OPERATOR [ reduce using rule 51 (term -> python_function_call .) ]
  ! }               [ reduce using rule 51 (term -> python_function_call .) ]
  ! IF              [ reduce using rule 51 (term -> python_function_call .) ]
  ! TRY             [ reduce using rule 51 (term -> python_function_call .) ]
  ! FOR             [ reduce using rule 51 (term -> python_function_call .) ]
  ! RET             [ reduce using rule 51 (term -> python_function_call .) ]
  ! GLOBAL          [ reduce using rule 51 (term -> python_function_call .) ]
  ! .               [ reduce using rule 51 (term -> python_function_call .) ]
  ! ID              [ reduce using rule 51 (term -> python_function_call .) ]
  ! UNITARY_OPERATOR [ reduce using rule 51 (term -> python_function_call .) ]
  ! FLOAT           [ reduce using rule 51 (term -> python_function_call .) ]
  ! INTEGER         [ reduce using rule 51 (term -> python_function_call .) ]
  ! BOOLEAN         [ reduce using rule 51 (term -> python_function_call .) ]
  ! STRING          [ reduce using rule 51 (term -> python_function_call .) ]
  ! [               [ reduce using rule 51 (term -> python_function_call .) ]
  ! {               [ reduce using rule 51 (term -> python_function_call .) ]


state 106

    (39) variable -> id . = exp
    (15) function_call -> id . ( term_list )
    (52) term -> id .

    =               shift and go to state 21
    (               shift and go to state 20
    SIGN            reduce using rule 52 (term -> id .)
    BINARY_OPERATOR reduce using rule 52 (term -> id .)
    }               reduce using rule 52 (term -> id .)
    IF              reduce using rule 52 (term -> id .)
    TRY             reduce using rule 52 (term -> id .)
    FOR             reduce using rule 52 (term -> id .)
    RET             reduce using rule 52 (term -> id .)
    GLOBAL          reduce using rule 52 (term -> id .)
    .               reduce using rule 52 (term -> id .)
    ID              reduce using rule 52 (term -> id .)
    UNITARY_OPERATOR reduce using rule 52 (term -> id .)
    FLOAT           reduce using rule 52 (term -> id .)
    INTEGER         reduce using rule 52 (term -> id .)
    BOOLEAN         reduce using rule 52 (term -> id .)
    STRING          reduce using rule 52 (term -> id .)
    [               reduce using rule 52 (term -> id .)
    {               reduce using rule 52 (term -> id .)


state 107

    (40) return -> RET id .

    }               reduce using rule 40 (return -> RET id .)
    IF              reduce using rule 40 (return -> RET id .)
    TRY             reduce using rule 40 (return -> RET id .)
    FOR             reduce using rule 40 (return -> RET id .)
    RET             reduce using rule 40 (return -> RET id .)
    GLOBAL          reduce using rule 40 (return -> RET id .)
    .               reduce using rule 40 (return -> RET id .)
    ID              reduce using rule 40 (return -> RET id .)
    SIGN            reduce using rule 40 (return -> RET id .)
    UNITARY_OPERATOR reduce using rule 40 (return -> RET id .)
    FLOAT           reduce using rule 40 (return -> RET id .)
    INTEGER         reduce using rule 40 (return -> RET id .)
    BOOLEAN         reduce using rule 40 (return -> RET id .)
    STRING          reduce using rule 40 (return -> RET id .)
    [               reduce using rule 40 (return -> RET id .)
    {               reduce using rule 40 (return -> RET id .)
    BINARY_OPERATOR reduce using rule 40 (return -> RET id .)


state 108

    (41) global -> GLOBAL term_list .
    (44) term_list -> term_list . , term

    }               reduce using rule 41 (global -> GLOBAL term_list .)
    IF              reduce using rule 41 (global -> GLOBAL term_list .)
    TRY             reduce using rule 41 (global -> GLOBAL term_list .)
    FOR             reduce using rule 41 (global -> GLOBAL term_list .)
    RET             reduce using rule 41 (global -> GLOBAL term_list .)
    GLOBAL          reduce using rule 41 (global -> GLOBAL term_list .)
    .               reduce using rule 41 (global -> GLOBAL term_list .)
    ID              reduce using rule 41 (global -> GLOBAL term_list .)
    SIGN            reduce using rule 41 (global -> GLOBAL term_list .)
    UNITARY_OPERATOR reduce using rule 41 (global -> GLOBAL term_list .)
    FLOAT           reduce using rule 41 (global -> GLOBAL term_list .)
    INTEGER         reduce using rule 41 (global -> GLOBAL term_list .)
    BOOLEAN         reduce using rule 41 (global -> GLOBAL term_list .)
    STRING          reduce using rule 41 (global -> GLOBAL term_list .)
    [               reduce using rule 41 (global -> GLOBAL term_list .)
    {               reduce using rule 41 (global -> GLOBAL term_list .)
    BINARY_OPERATOR reduce using rule 41 (global -> GLOBAL term_list .)
    ,               shift and go to state 58


state 109

    (38) exp -> FOR id IN id . { body }

    {               shift and go to state 116


state 110

    (37) exp -> FOR id IN number . . . number { body }

    .               shift and go to state 117


state 111

    (13) function -> COMMAND id ( parameter ) { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (67) id -> . ID
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    id                             shift and go to state 89
    body                           shift and go to state 118
    exp                            shift and go to state 83
    variable                       shift and go to state 84
    return                         shift and go to state 85
    global                         shift and go to state 86
    function_call                  shift and go to state 87
    python_function_call           shift and go to state 88
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 112

    (12) function -> FN id ( parameter ) { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (67) id -> . ID
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 119
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! }               [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    id                             shift and go to state 106
    exp                            shift and go to state 100
    variable                       shift and go to state 101
    return                         shift and go to state 102
    global                         shift and go to state 103
    function_call                  shift and go to state 104
    python_function_call           shift and go to state 105
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 113

    (42) term_map -> term : term , . term_map
    (42) term_map -> . term : term , term_map
    (43) term_map -> . term : term
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (67) id -> . ID
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    .               shift and go to state 11
    ID              shift and go to state 13
    [               shift and go to state 44
    {               shift and go to state 45
    :               reduce using rule 68 (empty -> .)

    term                           shift and go to state 63
    term_map                       shift and go to state 120
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    python_function_call           shift and go to state 34
    id                             shift and go to state 26
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 114

    (34) exp -> IF exp { body } . ELSE { body }
    (35) exp -> IF exp { body } .

    ELSE            shift and go to state 121
    FN              reduce using rule 35 (exp -> IF exp { body } .)
    COMMAND         reduce using rule 35 (exp -> IF exp { body } .)
    .               reduce using rule 35 (exp -> IF exp { body } .)
    TOKEN           reduce using rule 35 (exp -> IF exp { body } .)
    ID              reduce using rule 35 (exp -> IF exp { body } .)
    $end            reduce using rule 35 (exp -> IF exp { body } .)
    }               reduce using rule 35 (exp -> IF exp { body } .)
    IF              reduce using rule 35 (exp -> IF exp { body } .)
    TRY             reduce using rule 35 (exp -> IF exp { body } .)
    FOR             reduce using rule 35 (exp -> IF exp { body } .)
    RET             reduce using rule 35 (exp -> IF exp { body } .)
    GLOBAL          reduce using rule 35 (exp -> IF exp { body } .)
    SIGN            reduce using rule 35 (exp -> IF exp { body } .)
    UNITARY_OPERATOR reduce using rule 35 (exp -> IF exp { body } .)
    FLOAT           reduce using rule 35 (exp -> IF exp { body } .)
    INTEGER         reduce using rule 35 (exp -> IF exp { body } .)
    BOOLEAN         reduce using rule 35 (exp -> IF exp { body } .)
    STRING          reduce using rule 35 (exp -> IF exp { body } .)
    [               reduce using rule 35 (exp -> IF exp { body } .)
    {               reduce using rule 35 (exp -> IF exp { body } .)
    BINARY_OPERATOR reduce using rule 35 (exp -> IF exp { body } .)


state 115

    (36) exp -> TRY { body } CATCH . { body }

    {               shift and go to state 122


state 116

    (38) exp -> FOR id IN id { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (67) id -> . ID
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    id                             shift and go to state 89
    body                           shift and go to state 123
    exp                            shift and go to state 83
    variable                       shift and go to state 84
    return                         shift and go to state 85
    global                         shift and go to state 86
    function_call                  shift and go to state 87
    python_function_call           shift and go to state 88
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 117

    (37) exp -> FOR id IN number . . . number { body }

    .               shift and go to state 124


state 118

    (13) function -> COMMAND id ( parameter ) { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (67) id -> . ID
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 125
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! }               [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    id                             shift and go to state 106
    exp                            shift and go to state 100
    variable                       shift and go to state 101
    return                         shift and go to state 102
    global                         shift and go to state 103
    function_call                  shift and go to state 104
    python_function_call           shift and go to state 105
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 119

    (12) function -> FN id ( parameter ) { body } .

    FN              reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    COMMAND         reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    .               reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    TOKEN           reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    ID              reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    $end            reduce using rule 12 (function -> FN id ( parameter ) { body } .)


state 120

    (42) term_map -> term : term , term_map .

    }               reduce using rule 42 (term_map -> term : term , term_map .)


state 121

    (34) exp -> IF exp { body } ELSE . { body }

    {               shift and go to state 126


state 122

    (36) exp -> TRY { body } CATCH { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (67) id -> . ID
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    body                           shift and go to state 127
    exp                            shift and go to state 83
    variable                       shift and go to state 84
    return                         shift and go to state 85
    global                         shift and go to state 86
    function_call                  shift and go to state 87
    python_function_call           shift and go to state 88
    id                             shift and go to state 89
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 123

    (38) exp -> FOR id IN id { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (67) id -> . ID
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 128
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! }               [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    id                             shift and go to state 106
    exp                            shift and go to state 100
    variable                       shift and go to state 101
    return                         shift and go to state 102
    global                         shift and go to state 103
    function_call                  shift and go to state 104
    python_function_call           shift and go to state 105
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 124

    (37) exp -> FOR id IN number . . . number { body }
    (63) number -> . FLOAT
    (64) number -> . INTEGER

    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41

    number                         shift and go to state 129

state 125

    (13) function -> COMMAND id ( parameter ) { body } .

    FN              reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    COMMAND         reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    .               reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    TOKEN           reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    ID              reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    $end            reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)


state 126

    (34) exp -> IF exp { body } ELSE { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (67) id -> . ID
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    exp                            shift and go to state 83
    body                           shift and go to state 130
    variable                       shift and go to state 84
    return                         shift and go to state 85
    global                         shift and go to state 86
    function_call                  shift and go to state 87
    python_function_call           shift and go to state 88
    id                             shift and go to state 89
    term                           shift and go to state 47
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 127

    (36) exp -> TRY { body } CATCH { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (67) id -> . ID
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 131
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! }               [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    exp                            shift and go to state 100
    variable                       shift and go to state 101
    return                         shift and go to state 102
    global                         shift and go to state 103
    function_call                  shift and go to state 104
    python_function_call           shift and go to state 105
    term                           shift and go to state 47
    id                             shift and go to state 106
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 128

    (38) exp -> FOR id IN id { body } .

    FN              reduce using rule 38 (exp -> FOR id IN id { body } .)
    COMMAND         reduce using rule 38 (exp -> FOR id IN id { body } .)
    .               reduce using rule 38 (exp -> FOR id IN id { body } .)
    TOKEN           reduce using rule 38 (exp -> FOR id IN id { body } .)
    ID              reduce using rule 38 (exp -> FOR id IN id { body } .)
    $end            reduce using rule 38 (exp -> FOR id IN id { body } .)
    }               reduce using rule 38 (exp -> FOR id IN id { body } .)
    IF              reduce using rule 38 (exp -> FOR id IN id { body } .)
    TRY             reduce using rule 38 (exp -> FOR id IN id { body } .)
    FOR             reduce using rule 38 (exp -> FOR id IN id { body } .)
    RET             reduce using rule 38 (exp -> FOR id IN id { body } .)
    GLOBAL          reduce using rule 38 (exp -> FOR id IN id { body } .)
    SIGN            reduce using rule 38 (exp -> FOR id IN id { body } .)
    UNITARY_OPERATOR reduce using rule 38 (exp -> FOR id IN id { body } .)
    FLOAT           reduce using rule 38 (exp -> FOR id IN id { body } .)
    INTEGER         reduce using rule 38 (exp -> FOR id IN id { body } .)
    BOOLEAN         reduce using rule 38 (exp -> FOR id IN id { body } .)
    STRING          reduce using rule 38 (exp -> FOR id IN id { body } .)
    [               reduce using rule 38 (exp -> FOR id IN id { body } .)
    {               reduce using rule 38 (exp -> FOR id IN id { body } .)
    BINARY_OPERATOR reduce using rule 38 (exp -> FOR id IN id { body } .)


state 129

    (37) exp -> FOR id IN number . . number . { body }

    {               shift and go to state 132


state 130

    (34) exp -> IF exp { body } ELSE { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (67) id -> . ID
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 133
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! }               [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    exp                            shift and go to state 100
    variable                       shift and go to state 101
    return                         shift and go to state 102
    global                         shift and go to state 103
    function_call                  shift and go to state 104
    python_function_call           shift and go to state 105
    term                           shift and go to state 47
    id                             shift and go to state 106
    number                         shift and go to state 30
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 131

    (36) exp -> TRY { body } CATCH { body } .

    FN              reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    COMMAND         reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    .               reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    TOKEN           reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    ID              reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    $end            reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    }               reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    IF              reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    TRY             reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    FOR             reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    RET             reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    GLOBAL          reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    SIGN            reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    UNITARY_OPERATOR reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    FLOAT           reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    INTEGER         reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    BOOLEAN         reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    STRING          reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    [               reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    {               reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    BINARY_OPERATOR reduce using rule 36 (exp -> TRY { body } CATCH { body } .)


state 132

    (37) exp -> FOR id IN number . . number { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (67) id -> . ID
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)
    }               reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    id                             shift and go to state 89
    number                         shift and go to state 30
    body                           shift and go to state 134
    exp                            shift and go to state 83
    variable                       shift and go to state 84
    return                         shift and go to state 85
    global                         shift and go to state 86
    function_call                  shift and go to state 87
    python_function_call           shift and go to state 88
    term                           shift and go to state 47
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 133

    (34) exp -> IF exp { body } ELSE { body } .

    FN              reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    COMMAND         reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    .               reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    TOKEN           reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    ID              reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    $end            reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    }               reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    IF              reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    TRY             reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    FOR             reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    RET             reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    GLOBAL          reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    SIGN            reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    UNITARY_OPERATOR reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    FLOAT           reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    INTEGER         reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    BOOLEAN         reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    STRING          reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    [               reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    {               reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    BINARY_OPERATOR reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)


state 134

    (37) exp -> FOR id IN number . . number { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) exp -> . FOR id IN number . . number { body }
    (38) exp -> . FOR id IN id { body }
    (39) variable -> . id = exp
    (40) return -> . RET id
    (41) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (46) term -> . unop term
    (47) term -> . number
    (48) term -> . boolean
    (49) term -> . string
    (50) term -> . function_call
    (51) term -> . python_function_call
    (52) term -> . id
    (53) term -> . list
    (54) term -> . dict
    (55) term -> . empty
    (67) id -> . ID
    (56) unop -> . SIGN
    (57) unop -> . UNITARY_OPERATOR
    (63) number -> . FLOAT
    (64) number -> . INTEGER
    (65) boolean -> . BOOLEAN
    (66) string -> . STRING
    (62) list -> . [ term_list ]
    (60) dict -> . { term_map }
    (61) dict -> . { empty }
    (68) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 135
    IF              shift and go to state 48
    TRY             shift and go to state 49
    FOR             shift and go to state 50
    RET             shift and go to state 90
    GLOBAL          shift and go to state 91
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 38
    UNITARY_OPERATOR shift and go to state 39
    FLOAT           shift and go to state 40
    INTEGER         shift and go to state 41
    BOOLEAN         shift and go to state 42
    STRING          shift and go to state 43
    [               shift and go to state 44
    {               shift and go to state 45
    BINARY_OPERATOR reduce using rule 68 (empty -> .)

  ! SIGN            [ reduce using rule 68 (empty -> .) ]
  ! }               [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]
  ! RET             [ reduce using rule 68 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 68 (empty -> .) ]
  ! .               [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! INTEGER         [ reduce using rule 68 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! [               [ reduce using rule 68 (empty -> .) ]
  ! {               [ reduce using rule 68 (empty -> .) ]

    id                             shift and go to state 106
    number                         shift and go to state 30
    exp                            shift and go to state 100
    variable                       shift and go to state 101
    return                         shift and go to state 102
    global                         shift and go to state 103
    function_call                  shift and go to state 104
    python_function_call           shift and go to state 105
    term                           shift and go to state 47
    unop                           shift and go to state 29
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 35
    dict                           shift and go to state 36
    empty                          shift and go to state 37

state 135

    (37) exp -> FOR id IN number . . number { body } .

    FN              reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    COMMAND         reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    .               reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    TOKEN           reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    ID              reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    $end            reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    }               reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    IF              reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    TRY             reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    FOR             reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    RET             reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    GLOBAL          reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    SIGN            reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    UNITARY_OPERATOR reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    FLOAT           reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    INTEGER         reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    BOOLEAN         reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    STRING          reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    [               reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    {               reduce using rule 37 (exp -> FOR id IN number . . number { body } .)
    BINARY_OPERATOR reduce using rule 37 (exp -> FOR id IN number . . number { body } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SIGN in state 21 resolved as shift
WARNING: shift/reduce conflict for . in state 21 resolved as shift
WARNING: shift/reduce conflict for ID in state 21 resolved as shift
WARNING: shift/reduce conflict for IF in state 21 resolved as shift
WARNING: shift/reduce conflict for TRY in state 21 resolved as shift
WARNING: shift/reduce conflict for FOR in state 21 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 21 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 21 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 21 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 21 resolved as shift
WARNING: shift/reduce conflict for STRING in state 21 resolved as shift
WARNING: shift/reduce conflict for [ in state 21 resolved as shift
WARNING: shift/reduce conflict for { in state 21 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 29 resolved as shift
WARNING: shift/reduce conflict for . in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 29 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 29 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 29 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 29 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 29 resolved as shift
WARNING: shift/reduce conflict for STRING in state 29 resolved as shift
WARNING: shift/reduce conflict for [ in state 29 resolved as shift
WARNING: shift/reduce conflict for { in state 29 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 47 resolved as shift
WARNING: shift/reduce conflict for BINARY_OPERATOR in state 47 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 48 resolved as shift
WARNING: shift/reduce conflict for { in state 48 resolved as shift
WARNING: shift/reduce conflict for . in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 58 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 58 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 58 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 58 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 58 resolved as shift
WARNING: shift/reduce conflict for STRING in state 58 resolved as shift
WARNING: shift/reduce conflict for [ in state 58 resolved as shift
WARNING: shift/reduce conflict for { in state 58 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 64 resolved as shift
WARNING: shift/reduce conflict for . in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for IF in state 64 resolved as shift
WARNING: shift/reduce conflict for TRY in state 64 resolved as shift
WARNING: shift/reduce conflict for FOR in state 64 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 64 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 64 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 64 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 64 resolved as shift
WARNING: shift/reduce conflict for STRING in state 64 resolved as shift
WARNING: shift/reduce conflict for [ in state 64 resolved as shift
WARNING: shift/reduce conflict for { in state 64 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for TRY in state 68 resolved as shift
WARNING: shift/reduce conflict for FOR in state 68 resolved as shift
WARNING: shift/reduce conflict for RET in state 68 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 68 resolved as shift
WARNING: shift/reduce conflict for . in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 68 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 68 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 68 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 68 resolved as shift
WARNING: shift/reduce conflict for STRING in state 68 resolved as shift
WARNING: shift/reduce conflict for [ in state 68 resolved as shift
WARNING: shift/reduce conflict for { in state 68 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 81 resolved as shift
WARNING: shift/reduce conflict for IF in state 81 resolved as shift
WARNING: shift/reduce conflict for TRY in state 81 resolved as shift
WARNING: shift/reduce conflict for FOR in state 81 resolved as shift
WARNING: shift/reduce conflict for RET in state 81 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 81 resolved as shift
WARNING: shift/reduce conflict for . in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 81 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 81 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 81 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 81 resolved as shift
WARNING: shift/reduce conflict for STRING in state 81 resolved as shift
WARNING: shift/reduce conflict for [ in state 81 resolved as shift
WARNING: shift/reduce conflict for { in state 81 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 82 resolved as shift
WARNING: shift/reduce conflict for } in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for TRY in state 82 resolved as shift
WARNING: shift/reduce conflict for FOR in state 82 resolved as shift
WARNING: shift/reduce conflict for RET in state 82 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 82 resolved as shift
WARNING: shift/reduce conflict for . in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 82 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 82 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 82 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 82 resolved as shift
WARNING: shift/reduce conflict for STRING in state 82 resolved as shift
WARNING: shift/reduce conflict for [ in state 82 resolved as shift
WARNING: shift/reduce conflict for { in state 82 resolved as shift
WARNING: shift/reduce conflict for . in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 91 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 91 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 91 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 91 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 91 resolved as shift
WARNING: shift/reduce conflict for STRING in state 91 resolved as shift
WARNING: shift/reduce conflict for [ in state 91 resolved as shift
WARNING: shift/reduce conflict for { in state 91 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for TRY in state 96 resolved as shift
WARNING: shift/reduce conflict for FOR in state 96 resolved as shift
WARNING: shift/reduce conflict for RET in state 96 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 96 resolved as shift
WARNING: shift/reduce conflict for . in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 96 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 96 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 96 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 96 resolved as shift
WARNING: shift/reduce conflict for STRING in state 96 resolved as shift
WARNING: shift/reduce conflict for [ in state 96 resolved as shift
WARNING: shift/reduce conflict for { in state 96 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 98 resolved as shift
WARNING: shift/reduce conflict for } in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for TRY in state 98 resolved as shift
WARNING: shift/reduce conflict for FOR in state 98 resolved as shift
WARNING: shift/reduce conflict for RET in state 98 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 98 resolved as shift
WARNING: shift/reduce conflict for . in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 98 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 98 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 98 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 98 resolved as shift
WARNING: shift/reduce conflict for STRING in state 98 resolved as shift
WARNING: shift/reduce conflict for [ in state 98 resolved as shift
WARNING: shift/reduce conflict for { in state 98 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for TRY in state 111 resolved as shift
WARNING: shift/reduce conflict for FOR in state 111 resolved as shift
WARNING: shift/reduce conflict for RET in state 111 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 111 resolved as shift
WARNING: shift/reduce conflict for . in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 111 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 111 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 111 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 111 resolved as shift
WARNING: shift/reduce conflict for STRING in state 111 resolved as shift
WARNING: shift/reduce conflict for [ in state 111 resolved as shift
WARNING: shift/reduce conflict for { in state 111 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 112 resolved as shift
WARNING: shift/reduce conflict for } in state 112 resolved as shift
WARNING: shift/reduce conflict for IF in state 112 resolved as shift
WARNING: shift/reduce conflict for TRY in state 112 resolved as shift
WARNING: shift/reduce conflict for FOR in state 112 resolved as shift
WARNING: shift/reduce conflict for RET in state 112 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 112 resolved as shift
WARNING: shift/reduce conflict for . in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 112 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 112 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 112 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 112 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 112 resolved as shift
WARNING: shift/reduce conflict for STRING in state 112 resolved as shift
WARNING: shift/reduce conflict for [ in state 112 resolved as shift
WARNING: shift/reduce conflict for { in state 112 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for TRY in state 116 resolved as shift
WARNING: shift/reduce conflict for FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for RET in state 116 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 116 resolved as shift
WARNING: shift/reduce conflict for . in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 116 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 116 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 116 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 116 resolved as shift
WARNING: shift/reduce conflict for STRING in state 116 resolved as shift
WARNING: shift/reduce conflict for [ in state 116 resolved as shift
WARNING: shift/reduce conflict for { in state 116 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 118 resolved as shift
WARNING: shift/reduce conflict for } in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for TRY in state 118 resolved as shift
WARNING: shift/reduce conflict for FOR in state 118 resolved as shift
WARNING: shift/reduce conflict for RET in state 118 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 118 resolved as shift
WARNING: shift/reduce conflict for . in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 118 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 118 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 118 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 118 resolved as shift
WARNING: shift/reduce conflict for STRING in state 118 resolved as shift
WARNING: shift/reduce conflict for [ in state 118 resolved as shift
WARNING: shift/reduce conflict for { in state 118 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 122 resolved as shift
WARNING: shift/reduce conflict for IF in state 122 resolved as shift
WARNING: shift/reduce conflict for TRY in state 122 resolved as shift
WARNING: shift/reduce conflict for FOR in state 122 resolved as shift
WARNING: shift/reduce conflict for RET in state 122 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 122 resolved as shift
WARNING: shift/reduce conflict for . in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 122 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 122 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 122 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 122 resolved as shift
WARNING: shift/reduce conflict for STRING in state 122 resolved as shift
WARNING: shift/reduce conflict for [ in state 122 resolved as shift
WARNING: shift/reduce conflict for { in state 122 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 123 resolved as shift
WARNING: shift/reduce conflict for } in state 123 resolved as shift
WARNING: shift/reduce conflict for IF in state 123 resolved as shift
WARNING: shift/reduce conflict for TRY in state 123 resolved as shift
WARNING: shift/reduce conflict for FOR in state 123 resolved as shift
WARNING: shift/reduce conflict for RET in state 123 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 123 resolved as shift
WARNING: shift/reduce conflict for . in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 123 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 123 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 123 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 123 resolved as shift
WARNING: shift/reduce conflict for STRING in state 123 resolved as shift
WARNING: shift/reduce conflict for [ in state 123 resolved as shift
WARNING: shift/reduce conflict for { in state 123 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 126 resolved as shift
WARNING: shift/reduce conflict for IF in state 126 resolved as shift
WARNING: shift/reduce conflict for TRY in state 126 resolved as shift
WARNING: shift/reduce conflict for FOR in state 126 resolved as shift
WARNING: shift/reduce conflict for RET in state 126 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 126 resolved as shift
WARNING: shift/reduce conflict for . in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 126 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 126 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 126 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 126 resolved as shift
WARNING: shift/reduce conflict for STRING in state 126 resolved as shift
WARNING: shift/reduce conflict for [ in state 126 resolved as shift
WARNING: shift/reduce conflict for { in state 126 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 127 resolved as shift
WARNING: shift/reduce conflict for } in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 127 resolved as shift
WARNING: shift/reduce conflict for TRY in state 127 resolved as shift
WARNING: shift/reduce conflict for FOR in state 127 resolved as shift
WARNING: shift/reduce conflict for RET in state 127 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 127 resolved as shift
WARNING: shift/reduce conflict for . in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 127 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 127 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 127 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 127 resolved as shift
WARNING: shift/reduce conflict for STRING in state 127 resolved as shift
WARNING: shift/reduce conflict for [ in state 127 resolved as shift
WARNING: shift/reduce conflict for { in state 127 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 130 resolved as shift
WARNING: shift/reduce conflict for } in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for TRY in state 130 resolved as shift
WARNING: shift/reduce conflict for FOR in state 130 resolved as shift
WARNING: shift/reduce conflict for RET in state 130 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 130 resolved as shift
WARNING: shift/reduce conflict for . in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 130 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 130 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 130 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 130 resolved as shift
WARNING: shift/reduce conflict for STRING in state 130 resolved as shift
WARNING: shift/reduce conflict for [ in state 130 resolved as shift
WARNING: shift/reduce conflict for { in state 130 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 132 resolved as shift
WARNING: shift/reduce conflict for IF in state 132 resolved as shift
WARNING: shift/reduce conflict for TRY in state 132 resolved as shift
WARNING: shift/reduce conflict for FOR in state 132 resolved as shift
WARNING: shift/reduce conflict for RET in state 132 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 132 resolved as shift
WARNING: shift/reduce conflict for . in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 132 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 132 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 132 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 132 resolved as shift
WARNING: shift/reduce conflict for STRING in state 132 resolved as shift
WARNING: shift/reduce conflict for [ in state 132 resolved as shift
WARNING: shift/reduce conflict for { in state 132 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for } in state 134 resolved as shift
WARNING: shift/reduce conflict for IF in state 134 resolved as shift
WARNING: shift/reduce conflict for TRY in state 134 resolved as shift
WARNING: shift/reduce conflict for FOR in state 134 resolved as shift
WARNING: shift/reduce conflict for RET in state 134 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 134 resolved as shift
WARNING: shift/reduce conflict for . in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 134 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 134 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 134 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 134 resolved as shift
WARNING: shift/reduce conflict for STRING in state 134 resolved as shift
WARNING: shift/reduce conflict for [ in state 134 resolved as shift
WARNING: shift/reduce conflict for { in state 134 resolved as shift
WARNING: reduce/reduce conflict in state 87 resolved using rule (body -> function_call)
WARNING: rejected rule (term -> function_call) in state 87
WARNING: reduce/reduce conflict in state 88 resolved using rule (body -> python_function_call)
WARNING: rejected rule (term -> python_function_call) in state 88
WARNING: reduce/reduce conflict in state 104 resolved using rule (body -> body function_call)
WARNING: rejected rule (term -> function_call) in state 104
WARNING: reduce/reduce conflict in state 105 resolved using rule (body -> body python_function_call)
WARNING: rejected rule (term -> python_function_call) in state 105
