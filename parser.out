Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> run
Rule 1     run -> program
Rule 2     program -> program function
Rule 3     program -> program function_call
Rule 4     program -> program python_function_call
Rule 5     program -> program variable
Rule 6     program -> program token
Rule 7     program -> function
Rule 8     program -> function_call
Rule 9     program -> python_function_call
Rule 10    program -> variable
Rule 11    program -> token
Rule 12    function -> FN id ( parameter ) { body }
Rule 13    function -> COMMAND id ( parameter ) { body }
Rule 14    token -> TOKEN ( string )
Rule 15    function_call -> id ( term_list )
Rule 16    python_function_call -> . id ( term_list )
Rule 17    parameter -> id , parameter
Rule 18    parameter -> id
Rule 19    parameter -> empty
Rule 20    body -> body exp
Rule 21    body -> body variable
Rule 22    body -> body return
Rule 23    body -> body global
Rule 24    body -> body function_call
Rule 25    body -> body python_function_call
Rule 26    body -> function_call
Rule 27    body -> python_function_call
Rule 28    body -> exp
Rule 29    body -> variable
Rule 30    body -> return
Rule 31    body -> global
Rule 32    exp -> term binop exp
Rule 33    exp -> term
Rule 34    exp -> IF exp { body } ELSE { body }
Rule 35    exp -> IF exp { body }
Rule 36    exp -> TRY { body } CATCH { body }
Rule 37    variable -> id = exp
Rule 38    return -> RET id
Rule 39    global -> GLOBAL term_list
Rule 40    term_map -> term : term , term_map
Rule 41    term_map -> term : term
Rule 42    term_list -> term_list , term
Rule 43    term_list -> term
Rule 44    term -> unop term
Rule 45    term -> number
Rule 46    term -> boolean
Rule 47    term -> string
Rule 48    term -> function_call
Rule 49    term -> id
Rule 50    term -> list
Rule 51    term -> dict
Rule 52    term -> empty
Rule 53    unop -> SIGN
Rule 54    unop -> UNITARY_OPERATOR
Rule 55    binop -> SIGN
Rule 56    binop -> BINARY_OPERATOR
Rule 57    dict -> { term_map }
Rule 58    dict -> { empty }
Rule 59    list -> [ term_list ]
Rule 60    number -> FLOAT
Rule 61    number -> INTEGER
Rule 62    boolean -> BOOLEAN
Rule 63    string -> STRING
Rule 64    id -> ID
Rule 65    empty -> <empty>

Terminals, with rules where they appear

(                    : 12 13 14 15 16
)                    : 12 13 14 15 16
,                    : 17 40 42
.                    : 16
:                    : 40 41
=                    : 37
BINARY_OPERATOR      : 56
BOOLEAN              : 62
CATCH                : 36
COMMAND              : 13
ELSE                 : 34
FLOAT                : 60
FN                   : 12
GLOBAL               : 39
ID                   : 64
IF                   : 34 35
INTEGER              : 61
RET                  : 38
SIGN                 : 53 55
STRING               : 63
TOKEN                : 14
TRY                  : 36
UNITARY_OPERATOR     : 54
[                    : 59
]                    : 59
error                : 
{                    : 12 13 34 34 35 36 36 57 58
}                    : 12 13 34 34 35 36 36 57 58

Nonterminals, with rules where they appear

binop                : 32
body                 : 12 13 20 21 22 23 24 25 34 34 35 36 36
boolean              : 46
dict                 : 51
empty                : 19 52 58
exp                  : 20 28 32 34 35 37
function             : 2 7
function_call        : 3 8 24 26 48
global               : 23 31
id                   : 12 13 15 16 17 18 37 38 49
list                 : 50
number               : 45
parameter            : 12 13 17
program              : 1 2 3 4 5 6
python_function_call : 4 9 25 27
return               : 22 30
run                  : 0
string               : 14 47
term                 : 32 33 40 40 41 41 42 43 44
term_list            : 15 16 39 42 59
term_map             : 40 57
token                : 6 11
unop                 : 44
variable             : 5 10 21 29

Parsing method: LALR

state 0

    (0) S' -> . run
    (1) run -> . program
    (2) program -> . program function
    (3) program -> . program function_call
    (4) program -> . program python_function_call
    (5) program -> . program variable
    (6) program -> . program token
    (7) program -> . function
    (8) program -> . function_call
    (9) program -> . python_function_call
    (10) program -> . variable
    (11) program -> . token
    (12) function -> . FN id ( parameter ) { body }
    (13) function -> . COMMAND id ( parameter ) { body }
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (37) variable -> . id = exp
    (14) token -> . TOKEN ( string )
    (64) id -> . ID

    FN              shift and go to state 8
    COMMAND         shift and go to state 10
    .               shift and go to state 11
    TOKEN           shift and go to state 12
    ID              shift and go to state 13

    run                            shift and go to state 1
    program                        shift and go to state 2
    function                       shift and go to state 3
    function_call                  shift and go to state 4
    python_function_call           shift and go to state 5
    variable                       shift and go to state 6
    token                          shift and go to state 7
    id                             shift and go to state 9

state 1

    (0) S' -> run .



state 2

    (1) run -> program .
    (2) program -> program . function
    (3) program -> program . function_call
    (4) program -> program . python_function_call
    (5) program -> program . variable
    (6) program -> program . token
    (12) function -> . FN id ( parameter ) { body }
    (13) function -> . COMMAND id ( parameter ) { body }
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (37) variable -> . id = exp
    (14) token -> . TOKEN ( string )
    (64) id -> . ID

    $end            reduce using rule 1 (run -> program .)
    FN              shift and go to state 8
    COMMAND         shift and go to state 10
    .               shift and go to state 11
    TOKEN           shift and go to state 12
    ID              shift and go to state 13

    function                       shift and go to state 14
    function_call                  shift and go to state 15
    python_function_call           shift and go to state 16
    variable                       shift and go to state 17
    token                          shift and go to state 18
    id                             shift and go to state 9

state 3

    (7) program -> function .

    FN              reduce using rule 7 (program -> function .)
    COMMAND         reduce using rule 7 (program -> function .)
    .               reduce using rule 7 (program -> function .)
    TOKEN           reduce using rule 7 (program -> function .)
    ID              reduce using rule 7 (program -> function .)
    $end            reduce using rule 7 (program -> function .)


state 4

    (8) program -> function_call .

    FN              reduce using rule 8 (program -> function_call .)
    COMMAND         reduce using rule 8 (program -> function_call .)
    .               reduce using rule 8 (program -> function_call .)
    TOKEN           reduce using rule 8 (program -> function_call .)
    ID              reduce using rule 8 (program -> function_call .)
    $end            reduce using rule 8 (program -> function_call .)


state 5

    (9) program -> python_function_call .

    FN              reduce using rule 9 (program -> python_function_call .)
    COMMAND         reduce using rule 9 (program -> python_function_call .)
    .               reduce using rule 9 (program -> python_function_call .)
    TOKEN           reduce using rule 9 (program -> python_function_call .)
    ID              reduce using rule 9 (program -> python_function_call .)
    $end            reduce using rule 9 (program -> python_function_call .)


state 6

    (10) program -> variable .

    FN              reduce using rule 10 (program -> variable .)
    COMMAND         reduce using rule 10 (program -> variable .)
    .               reduce using rule 10 (program -> variable .)
    TOKEN           reduce using rule 10 (program -> variable .)
    ID              reduce using rule 10 (program -> variable .)
    $end            reduce using rule 10 (program -> variable .)


state 7

    (11) program -> token .

    FN              reduce using rule 11 (program -> token .)
    COMMAND         reduce using rule 11 (program -> token .)
    .               reduce using rule 11 (program -> token .)
    TOKEN           reduce using rule 11 (program -> token .)
    ID              reduce using rule 11 (program -> token .)
    $end            reduce using rule 11 (program -> token .)


state 8

    (12) function -> FN . id ( parameter ) { body }
    (64) id -> . ID

    ID              shift and go to state 13

    id                             shift and go to state 19

state 9

    (15) function_call -> id . ( term_list )
    (37) variable -> id . = exp

    (               shift and go to state 20
    =               shift and go to state 21


state 10

    (13) function -> COMMAND . id ( parameter ) { body }
    (64) id -> . ID

    ID              shift and go to state 13

    id                             shift and go to state 22

state 11

    (16) python_function_call -> . . id ( term_list )
    (64) id -> . ID

    ID              shift and go to state 13

    id                             shift and go to state 23

state 12

    (14) token -> TOKEN . ( string )

    (               shift and go to state 24


state 13

    (64) id -> ID .

    (               reduce using rule 64 (id -> ID .)
    =               reduce using rule 64 (id -> ID .)
    )               reduce using rule 64 (id -> ID .)
    ,               reduce using rule 64 (id -> ID .)
    SIGN            reduce using rule 64 (id -> ID .)
    BINARY_OPERATOR reduce using rule 64 (id -> ID .)
    FN              reduce using rule 64 (id -> ID .)
    COMMAND         reduce using rule 64 (id -> ID .)
    .               reduce using rule 64 (id -> ID .)
    TOKEN           reduce using rule 64 (id -> ID .)
    ID              reduce using rule 64 (id -> ID .)
    $end            reduce using rule 64 (id -> ID .)
    }               reduce using rule 64 (id -> ID .)
    IF              reduce using rule 64 (id -> ID .)
    TRY             reduce using rule 64 (id -> ID .)
    RET             reduce using rule 64 (id -> ID .)
    GLOBAL          reduce using rule 64 (id -> ID .)
    UNITARY_OPERATOR reduce using rule 64 (id -> ID .)
    FLOAT           reduce using rule 64 (id -> ID .)
    INTEGER         reduce using rule 64 (id -> ID .)
    BOOLEAN         reduce using rule 64 (id -> ID .)
    STRING          reduce using rule 64 (id -> ID .)
    [               reduce using rule 64 (id -> ID .)
    {               reduce using rule 64 (id -> ID .)
    ]               reduce using rule 64 (id -> ID .)
    :               reduce using rule 64 (id -> ID .)


state 14

    (2) program -> program function .

    FN              reduce using rule 2 (program -> program function .)
    COMMAND         reduce using rule 2 (program -> program function .)
    .               reduce using rule 2 (program -> program function .)
    TOKEN           reduce using rule 2 (program -> program function .)
    ID              reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 15

    (3) program -> program function_call .

    FN              reduce using rule 3 (program -> program function_call .)
    COMMAND         reduce using rule 3 (program -> program function_call .)
    .               reduce using rule 3 (program -> program function_call .)
    TOKEN           reduce using rule 3 (program -> program function_call .)
    ID              reduce using rule 3 (program -> program function_call .)
    $end            reduce using rule 3 (program -> program function_call .)


state 16

    (4) program -> program python_function_call .

    FN              reduce using rule 4 (program -> program python_function_call .)
    COMMAND         reduce using rule 4 (program -> program python_function_call .)
    .               reduce using rule 4 (program -> program python_function_call .)
    TOKEN           reduce using rule 4 (program -> program python_function_call .)
    ID              reduce using rule 4 (program -> program python_function_call .)
    $end            reduce using rule 4 (program -> program python_function_call .)


state 17

    (5) program -> program variable .

    FN              reduce using rule 5 (program -> program variable .)
    COMMAND         reduce using rule 5 (program -> program variable .)
    .               reduce using rule 5 (program -> program variable .)
    TOKEN           reduce using rule 5 (program -> program variable .)
    ID              reduce using rule 5 (program -> program variable .)
    $end            reduce using rule 5 (program -> program variable .)


state 18

    (6) program -> program token .

    FN              reduce using rule 6 (program -> program token .)
    COMMAND         reduce using rule 6 (program -> program token .)
    .               reduce using rule 6 (program -> program token .)
    TOKEN           reduce using rule 6 (program -> program token .)
    ID              reduce using rule 6 (program -> program token .)
    $end            reduce using rule 6 (program -> program token .)


state 19

    (12) function -> FN id . ( parameter ) { body }

    (               shift and go to state 25


state 20

    (15) function_call -> id ( . term_list )
    (42) term_list -> . term_list , term
    (43) term_list -> . term
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    )               reduce using rule 65 (empty -> .)
    ,               reduce using rule 65 (empty -> .)

    id                             shift and go to state 26
    term_list                      shift and go to state 27
    term                           shift and go to state 28
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 21

    (37) variable -> id = . exp
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    IF              shift and go to state 47
    TRY             shift and go to state 48
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)
    FN              reduce using rule 65 (empty -> .)
    COMMAND         reduce using rule 65 (empty -> .)
    .               reduce using rule 65 (empty -> .)
    TOKEN           reduce using rule 65 (empty -> .)
    $end            reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)
    RET             reduce using rule 65 (empty -> .)
    GLOBAL          reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    id                             shift and go to state 26
    exp                            shift and go to state 45
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 22

    (13) function -> COMMAND id . ( parameter ) { body }

    (               shift and go to state 49


state 23

    (16) python_function_call -> . id . ( term_list )

    (               shift and go to state 50


state 24

    (14) token -> TOKEN ( . string )
    (63) string -> . STRING

    STRING          shift and go to state 42

    string                         shift and go to state 51

state 25

    (12) function -> FN id ( . parameter ) { body }
    (17) parameter -> . id , parameter
    (18) parameter -> . id
    (19) parameter -> . empty
    (64) id -> . ID
    (65) empty -> .

    ID              shift and go to state 13
    )               reduce using rule 65 (empty -> .)

    id                             shift and go to state 52
    parameter                      shift and go to state 53
    empty                          shift and go to state 54

state 26

    (49) term -> id .
    (15) function_call -> id . ( term_list )

    )               reduce using rule 49 (term -> id .)
    ,               reduce using rule 49 (term -> id .)
    SIGN            reduce using rule 49 (term -> id .)
    BINARY_OPERATOR reduce using rule 49 (term -> id .)
    FN              reduce using rule 49 (term -> id .)
    COMMAND         reduce using rule 49 (term -> id .)
    .               reduce using rule 49 (term -> id .)
    TOKEN           reduce using rule 49 (term -> id .)
    ID              reduce using rule 49 (term -> id .)
    $end            reduce using rule 49 (term -> id .)
    }               reduce using rule 49 (term -> id .)
    IF              reduce using rule 49 (term -> id .)
    TRY             reduce using rule 49 (term -> id .)
    RET             reduce using rule 49 (term -> id .)
    GLOBAL          reduce using rule 49 (term -> id .)
    UNITARY_OPERATOR reduce using rule 49 (term -> id .)
    FLOAT           reduce using rule 49 (term -> id .)
    INTEGER         reduce using rule 49 (term -> id .)
    BOOLEAN         reduce using rule 49 (term -> id .)
    STRING          reduce using rule 49 (term -> id .)
    [               reduce using rule 49 (term -> id .)
    {               reduce using rule 49 (term -> id .)
    ]               reduce using rule 49 (term -> id .)
    :               reduce using rule 49 (term -> id .)
    (               shift and go to state 20


state 27

    (15) function_call -> id ( term_list . )
    (42) term_list -> term_list . , term

    )               shift and go to state 55
    ,               shift and go to state 56


state 28

    (43) term_list -> term .

    )               reduce using rule 43 (term_list -> term .)
    ,               reduce using rule 43 (term_list -> term .)
    ]               reduce using rule 43 (term_list -> term .)
    }               reduce using rule 43 (term_list -> term .)
    IF              reduce using rule 43 (term_list -> term .)
    TRY             reduce using rule 43 (term_list -> term .)
    RET             reduce using rule 43 (term_list -> term .)
    GLOBAL          reduce using rule 43 (term_list -> term .)
    .               reduce using rule 43 (term_list -> term .)
    ID              reduce using rule 43 (term_list -> term .)
    SIGN            reduce using rule 43 (term_list -> term .)
    UNITARY_OPERATOR reduce using rule 43 (term_list -> term .)
    FLOAT           reduce using rule 43 (term_list -> term .)
    INTEGER         reduce using rule 43 (term_list -> term .)
    BOOLEAN         reduce using rule 43 (term_list -> term .)
    STRING          reduce using rule 43 (term_list -> term .)
    [               reduce using rule 43 (term_list -> term .)
    {               reduce using rule 43 (term_list -> term .)
    BINARY_OPERATOR reduce using rule 43 (term_list -> term .)


state 29

    (44) term -> unop . term
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    )               reduce using rule 65 (empty -> .)
    ,               reduce using rule 65 (empty -> .)
    BINARY_OPERATOR reduce using rule 65 (empty -> .)
    FN              reduce using rule 65 (empty -> .)
    COMMAND         reduce using rule 65 (empty -> .)
    .               reduce using rule 65 (empty -> .)
    TOKEN           reduce using rule 65 (empty -> .)
    $end            reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    TRY             reduce using rule 65 (empty -> .)
    RET             reduce using rule 65 (empty -> .)
    GLOBAL          reduce using rule 65 (empty -> .)
    ]               reduce using rule 65 (empty -> .)
    :               reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    unop                           shift and go to state 29
    term                           shift and go to state 57
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    id                             shift and go to state 26
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 30

    (45) term -> number .

    )               reduce using rule 45 (term -> number .)
    ,               reduce using rule 45 (term -> number .)
    SIGN            reduce using rule 45 (term -> number .)
    BINARY_OPERATOR reduce using rule 45 (term -> number .)
    FN              reduce using rule 45 (term -> number .)
    COMMAND         reduce using rule 45 (term -> number .)
    .               reduce using rule 45 (term -> number .)
    TOKEN           reduce using rule 45 (term -> number .)
    ID              reduce using rule 45 (term -> number .)
    $end            reduce using rule 45 (term -> number .)
    }               reduce using rule 45 (term -> number .)
    IF              reduce using rule 45 (term -> number .)
    TRY             reduce using rule 45 (term -> number .)
    RET             reduce using rule 45 (term -> number .)
    GLOBAL          reduce using rule 45 (term -> number .)
    UNITARY_OPERATOR reduce using rule 45 (term -> number .)
    FLOAT           reduce using rule 45 (term -> number .)
    INTEGER         reduce using rule 45 (term -> number .)
    BOOLEAN         reduce using rule 45 (term -> number .)
    STRING          reduce using rule 45 (term -> number .)
    [               reduce using rule 45 (term -> number .)
    {               reduce using rule 45 (term -> number .)
    ]               reduce using rule 45 (term -> number .)
    :               reduce using rule 45 (term -> number .)


state 31

    (46) term -> boolean .

    )               reduce using rule 46 (term -> boolean .)
    ,               reduce using rule 46 (term -> boolean .)
    SIGN            reduce using rule 46 (term -> boolean .)
    BINARY_OPERATOR reduce using rule 46 (term -> boolean .)
    FN              reduce using rule 46 (term -> boolean .)
    COMMAND         reduce using rule 46 (term -> boolean .)
    .               reduce using rule 46 (term -> boolean .)
    TOKEN           reduce using rule 46 (term -> boolean .)
    ID              reduce using rule 46 (term -> boolean .)
    $end            reduce using rule 46 (term -> boolean .)
    }               reduce using rule 46 (term -> boolean .)
    IF              reduce using rule 46 (term -> boolean .)
    TRY             reduce using rule 46 (term -> boolean .)
    RET             reduce using rule 46 (term -> boolean .)
    GLOBAL          reduce using rule 46 (term -> boolean .)
    UNITARY_OPERATOR reduce using rule 46 (term -> boolean .)
    FLOAT           reduce using rule 46 (term -> boolean .)
    INTEGER         reduce using rule 46 (term -> boolean .)
    BOOLEAN         reduce using rule 46 (term -> boolean .)
    STRING          reduce using rule 46 (term -> boolean .)
    [               reduce using rule 46 (term -> boolean .)
    {               reduce using rule 46 (term -> boolean .)
    ]               reduce using rule 46 (term -> boolean .)
    :               reduce using rule 46 (term -> boolean .)


state 32

    (47) term -> string .

    )               reduce using rule 47 (term -> string .)
    ,               reduce using rule 47 (term -> string .)
    SIGN            reduce using rule 47 (term -> string .)
    BINARY_OPERATOR reduce using rule 47 (term -> string .)
    FN              reduce using rule 47 (term -> string .)
    COMMAND         reduce using rule 47 (term -> string .)
    .               reduce using rule 47 (term -> string .)
    TOKEN           reduce using rule 47 (term -> string .)
    ID              reduce using rule 47 (term -> string .)
    $end            reduce using rule 47 (term -> string .)
    }               reduce using rule 47 (term -> string .)
    IF              reduce using rule 47 (term -> string .)
    TRY             reduce using rule 47 (term -> string .)
    RET             reduce using rule 47 (term -> string .)
    GLOBAL          reduce using rule 47 (term -> string .)
    UNITARY_OPERATOR reduce using rule 47 (term -> string .)
    FLOAT           reduce using rule 47 (term -> string .)
    INTEGER         reduce using rule 47 (term -> string .)
    BOOLEAN         reduce using rule 47 (term -> string .)
    STRING          reduce using rule 47 (term -> string .)
    [               reduce using rule 47 (term -> string .)
    {               reduce using rule 47 (term -> string .)
    ]               reduce using rule 47 (term -> string .)
    :               reduce using rule 47 (term -> string .)


state 33

    (48) term -> function_call .

    )               reduce using rule 48 (term -> function_call .)
    ,               reduce using rule 48 (term -> function_call .)
    SIGN            reduce using rule 48 (term -> function_call .)
    BINARY_OPERATOR reduce using rule 48 (term -> function_call .)
    FN              reduce using rule 48 (term -> function_call .)
    COMMAND         reduce using rule 48 (term -> function_call .)
    .               reduce using rule 48 (term -> function_call .)
    TOKEN           reduce using rule 48 (term -> function_call .)
    ID              reduce using rule 48 (term -> function_call .)
    $end            reduce using rule 48 (term -> function_call .)
    }               reduce using rule 48 (term -> function_call .)
    IF              reduce using rule 48 (term -> function_call .)
    TRY             reduce using rule 48 (term -> function_call .)
    RET             reduce using rule 48 (term -> function_call .)
    GLOBAL          reduce using rule 48 (term -> function_call .)
    UNITARY_OPERATOR reduce using rule 48 (term -> function_call .)
    FLOAT           reduce using rule 48 (term -> function_call .)
    INTEGER         reduce using rule 48 (term -> function_call .)
    BOOLEAN         reduce using rule 48 (term -> function_call .)
    STRING          reduce using rule 48 (term -> function_call .)
    [               reduce using rule 48 (term -> function_call .)
    {               reduce using rule 48 (term -> function_call .)
    ]               reduce using rule 48 (term -> function_call .)
    :               reduce using rule 48 (term -> function_call .)


state 34

    (50) term -> list .

    )               reduce using rule 50 (term -> list .)
    ,               reduce using rule 50 (term -> list .)
    SIGN            reduce using rule 50 (term -> list .)
    BINARY_OPERATOR reduce using rule 50 (term -> list .)
    FN              reduce using rule 50 (term -> list .)
    COMMAND         reduce using rule 50 (term -> list .)
    .               reduce using rule 50 (term -> list .)
    TOKEN           reduce using rule 50 (term -> list .)
    ID              reduce using rule 50 (term -> list .)
    $end            reduce using rule 50 (term -> list .)
    }               reduce using rule 50 (term -> list .)
    IF              reduce using rule 50 (term -> list .)
    TRY             reduce using rule 50 (term -> list .)
    RET             reduce using rule 50 (term -> list .)
    GLOBAL          reduce using rule 50 (term -> list .)
    UNITARY_OPERATOR reduce using rule 50 (term -> list .)
    FLOAT           reduce using rule 50 (term -> list .)
    INTEGER         reduce using rule 50 (term -> list .)
    BOOLEAN         reduce using rule 50 (term -> list .)
    STRING          reduce using rule 50 (term -> list .)
    [               reduce using rule 50 (term -> list .)
    {               reduce using rule 50 (term -> list .)
    ]               reduce using rule 50 (term -> list .)
    :               reduce using rule 50 (term -> list .)


state 35

    (51) term -> dict .

    )               reduce using rule 51 (term -> dict .)
    ,               reduce using rule 51 (term -> dict .)
    SIGN            reduce using rule 51 (term -> dict .)
    BINARY_OPERATOR reduce using rule 51 (term -> dict .)
    FN              reduce using rule 51 (term -> dict .)
    COMMAND         reduce using rule 51 (term -> dict .)
    .               reduce using rule 51 (term -> dict .)
    TOKEN           reduce using rule 51 (term -> dict .)
    ID              reduce using rule 51 (term -> dict .)
    $end            reduce using rule 51 (term -> dict .)
    }               reduce using rule 51 (term -> dict .)
    IF              reduce using rule 51 (term -> dict .)
    TRY             reduce using rule 51 (term -> dict .)
    RET             reduce using rule 51 (term -> dict .)
    GLOBAL          reduce using rule 51 (term -> dict .)
    UNITARY_OPERATOR reduce using rule 51 (term -> dict .)
    FLOAT           reduce using rule 51 (term -> dict .)
    INTEGER         reduce using rule 51 (term -> dict .)
    BOOLEAN         reduce using rule 51 (term -> dict .)
    STRING          reduce using rule 51 (term -> dict .)
    [               reduce using rule 51 (term -> dict .)
    {               reduce using rule 51 (term -> dict .)
    ]               reduce using rule 51 (term -> dict .)
    :               reduce using rule 51 (term -> dict .)


state 36

    (52) term -> empty .

    )               reduce using rule 52 (term -> empty .)
    ,               reduce using rule 52 (term -> empty .)
    SIGN            reduce using rule 52 (term -> empty .)
    BINARY_OPERATOR reduce using rule 52 (term -> empty .)
    FN              reduce using rule 52 (term -> empty .)
    COMMAND         reduce using rule 52 (term -> empty .)
    .               reduce using rule 52 (term -> empty .)
    TOKEN           reduce using rule 52 (term -> empty .)
    ID              reduce using rule 52 (term -> empty .)
    $end            reduce using rule 52 (term -> empty .)
    }               reduce using rule 52 (term -> empty .)
    IF              reduce using rule 52 (term -> empty .)
    TRY             reduce using rule 52 (term -> empty .)
    RET             reduce using rule 52 (term -> empty .)
    GLOBAL          reduce using rule 52 (term -> empty .)
    UNITARY_OPERATOR reduce using rule 52 (term -> empty .)
    FLOAT           reduce using rule 52 (term -> empty .)
    INTEGER         reduce using rule 52 (term -> empty .)
    BOOLEAN         reduce using rule 52 (term -> empty .)
    STRING          reduce using rule 52 (term -> empty .)
    [               reduce using rule 52 (term -> empty .)
    {               reduce using rule 52 (term -> empty .)
    ]               reduce using rule 52 (term -> empty .)
    :               reduce using rule 52 (term -> empty .)


state 37

    (53) unop -> SIGN .

    SIGN            reduce using rule 53 (unop -> SIGN .)
    UNITARY_OPERATOR reduce using rule 53 (unop -> SIGN .)
    FLOAT           reduce using rule 53 (unop -> SIGN .)
    INTEGER         reduce using rule 53 (unop -> SIGN .)
    BOOLEAN         reduce using rule 53 (unop -> SIGN .)
    STRING          reduce using rule 53 (unop -> SIGN .)
    ID              reduce using rule 53 (unop -> SIGN .)
    [               reduce using rule 53 (unop -> SIGN .)
    {               reduce using rule 53 (unop -> SIGN .)
    )               reduce using rule 53 (unop -> SIGN .)
    ,               reduce using rule 53 (unop -> SIGN .)
    BINARY_OPERATOR reduce using rule 53 (unop -> SIGN .)
    FN              reduce using rule 53 (unop -> SIGN .)
    COMMAND         reduce using rule 53 (unop -> SIGN .)
    .               reduce using rule 53 (unop -> SIGN .)
    TOKEN           reduce using rule 53 (unop -> SIGN .)
    $end            reduce using rule 53 (unop -> SIGN .)
    }               reduce using rule 53 (unop -> SIGN .)
    IF              reduce using rule 53 (unop -> SIGN .)
    TRY             reduce using rule 53 (unop -> SIGN .)
    RET             reduce using rule 53 (unop -> SIGN .)
    GLOBAL          reduce using rule 53 (unop -> SIGN .)
    ]               reduce using rule 53 (unop -> SIGN .)
    :               reduce using rule 53 (unop -> SIGN .)


state 38

    (54) unop -> UNITARY_OPERATOR .

    SIGN            reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    UNITARY_OPERATOR reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    FLOAT           reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    INTEGER         reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    BOOLEAN         reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    STRING          reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    ID              reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    [               reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    {               reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    )               reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    ,               reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    BINARY_OPERATOR reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    FN              reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    COMMAND         reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    .               reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    TOKEN           reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    $end            reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    }               reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    IF              reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    TRY             reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    RET             reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    GLOBAL          reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    ]               reduce using rule 54 (unop -> UNITARY_OPERATOR .)
    :               reduce using rule 54 (unop -> UNITARY_OPERATOR .)


state 39

    (60) number -> FLOAT .

    )               reduce using rule 60 (number -> FLOAT .)
    ,               reduce using rule 60 (number -> FLOAT .)
    SIGN            reduce using rule 60 (number -> FLOAT .)
    BINARY_OPERATOR reduce using rule 60 (number -> FLOAT .)
    FN              reduce using rule 60 (number -> FLOAT .)
    COMMAND         reduce using rule 60 (number -> FLOAT .)
    .               reduce using rule 60 (number -> FLOAT .)
    TOKEN           reduce using rule 60 (number -> FLOAT .)
    ID              reduce using rule 60 (number -> FLOAT .)
    $end            reduce using rule 60 (number -> FLOAT .)
    }               reduce using rule 60 (number -> FLOAT .)
    IF              reduce using rule 60 (number -> FLOAT .)
    TRY             reduce using rule 60 (number -> FLOAT .)
    RET             reduce using rule 60 (number -> FLOAT .)
    GLOBAL          reduce using rule 60 (number -> FLOAT .)
    UNITARY_OPERATOR reduce using rule 60 (number -> FLOAT .)
    FLOAT           reduce using rule 60 (number -> FLOAT .)
    INTEGER         reduce using rule 60 (number -> FLOAT .)
    BOOLEAN         reduce using rule 60 (number -> FLOAT .)
    STRING          reduce using rule 60 (number -> FLOAT .)
    [               reduce using rule 60 (number -> FLOAT .)
    {               reduce using rule 60 (number -> FLOAT .)
    ]               reduce using rule 60 (number -> FLOAT .)
    :               reduce using rule 60 (number -> FLOAT .)


state 40

    (61) number -> INTEGER .

    )               reduce using rule 61 (number -> INTEGER .)
    ,               reduce using rule 61 (number -> INTEGER .)
    SIGN            reduce using rule 61 (number -> INTEGER .)
    BINARY_OPERATOR reduce using rule 61 (number -> INTEGER .)
    FN              reduce using rule 61 (number -> INTEGER .)
    COMMAND         reduce using rule 61 (number -> INTEGER .)
    .               reduce using rule 61 (number -> INTEGER .)
    TOKEN           reduce using rule 61 (number -> INTEGER .)
    ID              reduce using rule 61 (number -> INTEGER .)
    $end            reduce using rule 61 (number -> INTEGER .)
    }               reduce using rule 61 (number -> INTEGER .)
    IF              reduce using rule 61 (number -> INTEGER .)
    TRY             reduce using rule 61 (number -> INTEGER .)
    RET             reduce using rule 61 (number -> INTEGER .)
    GLOBAL          reduce using rule 61 (number -> INTEGER .)
    UNITARY_OPERATOR reduce using rule 61 (number -> INTEGER .)
    FLOAT           reduce using rule 61 (number -> INTEGER .)
    INTEGER         reduce using rule 61 (number -> INTEGER .)
    BOOLEAN         reduce using rule 61 (number -> INTEGER .)
    STRING          reduce using rule 61 (number -> INTEGER .)
    [               reduce using rule 61 (number -> INTEGER .)
    {               reduce using rule 61 (number -> INTEGER .)
    ]               reduce using rule 61 (number -> INTEGER .)
    :               reduce using rule 61 (number -> INTEGER .)


state 41

    (62) boolean -> BOOLEAN .

    )               reduce using rule 62 (boolean -> BOOLEAN .)
    ,               reduce using rule 62 (boolean -> BOOLEAN .)
    SIGN            reduce using rule 62 (boolean -> BOOLEAN .)
    BINARY_OPERATOR reduce using rule 62 (boolean -> BOOLEAN .)
    FN              reduce using rule 62 (boolean -> BOOLEAN .)
    COMMAND         reduce using rule 62 (boolean -> BOOLEAN .)
    .               reduce using rule 62 (boolean -> BOOLEAN .)
    TOKEN           reduce using rule 62 (boolean -> BOOLEAN .)
    ID              reduce using rule 62 (boolean -> BOOLEAN .)
    $end            reduce using rule 62 (boolean -> BOOLEAN .)
    }               reduce using rule 62 (boolean -> BOOLEAN .)
    IF              reduce using rule 62 (boolean -> BOOLEAN .)
    TRY             reduce using rule 62 (boolean -> BOOLEAN .)
    RET             reduce using rule 62 (boolean -> BOOLEAN .)
    GLOBAL          reduce using rule 62 (boolean -> BOOLEAN .)
    UNITARY_OPERATOR reduce using rule 62 (boolean -> BOOLEAN .)
    FLOAT           reduce using rule 62 (boolean -> BOOLEAN .)
    INTEGER         reduce using rule 62 (boolean -> BOOLEAN .)
    BOOLEAN         reduce using rule 62 (boolean -> BOOLEAN .)
    STRING          reduce using rule 62 (boolean -> BOOLEAN .)
    [               reduce using rule 62 (boolean -> BOOLEAN .)
    {               reduce using rule 62 (boolean -> BOOLEAN .)
    ]               reduce using rule 62 (boolean -> BOOLEAN .)
    :               reduce using rule 62 (boolean -> BOOLEAN .)


state 42

    (63) string -> STRING .

    )               reduce using rule 63 (string -> STRING .)
    ,               reduce using rule 63 (string -> STRING .)
    SIGN            reduce using rule 63 (string -> STRING .)
    BINARY_OPERATOR reduce using rule 63 (string -> STRING .)
    FN              reduce using rule 63 (string -> STRING .)
    COMMAND         reduce using rule 63 (string -> STRING .)
    .               reduce using rule 63 (string -> STRING .)
    TOKEN           reduce using rule 63 (string -> STRING .)
    ID              reduce using rule 63 (string -> STRING .)
    $end            reduce using rule 63 (string -> STRING .)
    }               reduce using rule 63 (string -> STRING .)
    IF              reduce using rule 63 (string -> STRING .)
    TRY             reduce using rule 63 (string -> STRING .)
    RET             reduce using rule 63 (string -> STRING .)
    GLOBAL          reduce using rule 63 (string -> STRING .)
    UNITARY_OPERATOR reduce using rule 63 (string -> STRING .)
    FLOAT           reduce using rule 63 (string -> STRING .)
    INTEGER         reduce using rule 63 (string -> STRING .)
    BOOLEAN         reduce using rule 63 (string -> STRING .)
    STRING          reduce using rule 63 (string -> STRING .)
    [               reduce using rule 63 (string -> STRING .)
    {               reduce using rule 63 (string -> STRING .)
    ]               reduce using rule 63 (string -> STRING .)
    :               reduce using rule 63 (string -> STRING .)


state 43

    (59) list -> [ . term_list ]
    (42) term_list -> . term_list , term
    (43) term_list -> . term
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    ]               reduce using rule 65 (empty -> .)
    ,               reduce using rule 65 (empty -> .)

    term_list                      shift and go to state 58
    term                           shift and go to state 28
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    id                             shift and go to state 26
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 44

    (57) dict -> { . term_map }
    (58) dict -> { . empty }
    (40) term_map -> . term : term , term_map
    (41) term_map -> . term : term
    (65) empty -> .
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }

    }               reduce using rule 65 (empty -> .)
    :               reduce using rule 65 (empty -> .)
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44

    term_map                       shift and go to state 59
    empty                          shift and go to state 60
    term                           shift and go to state 61
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    id                             shift and go to state 26
    list                           shift and go to state 34
    dict                           shift and go to state 35

state 45

    (37) variable -> id = exp .

    FN              reduce using rule 37 (variable -> id = exp .)
    COMMAND         reduce using rule 37 (variable -> id = exp .)
    .               reduce using rule 37 (variable -> id = exp .)
    TOKEN           reduce using rule 37 (variable -> id = exp .)
    ID              reduce using rule 37 (variable -> id = exp .)
    $end            reduce using rule 37 (variable -> id = exp .)
    }               reduce using rule 37 (variable -> id = exp .)
    IF              reduce using rule 37 (variable -> id = exp .)
    TRY             reduce using rule 37 (variable -> id = exp .)
    RET             reduce using rule 37 (variable -> id = exp .)
    GLOBAL          reduce using rule 37 (variable -> id = exp .)
    SIGN            reduce using rule 37 (variable -> id = exp .)
    UNITARY_OPERATOR reduce using rule 37 (variable -> id = exp .)
    FLOAT           reduce using rule 37 (variable -> id = exp .)
    INTEGER         reduce using rule 37 (variable -> id = exp .)
    BOOLEAN         reduce using rule 37 (variable -> id = exp .)
    STRING          reduce using rule 37 (variable -> id = exp .)
    [               reduce using rule 37 (variable -> id = exp .)
    {               reduce using rule 37 (variable -> id = exp .)
    BINARY_OPERATOR reduce using rule 37 (variable -> id = exp .)


state 46

    (32) exp -> term . binop exp
    (33) exp -> term .
    (55) binop -> . SIGN
    (56) binop -> . BINARY_OPERATOR

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for BINARY_OPERATOR resolved as shift
    FN              reduce using rule 33 (exp -> term .)
    COMMAND         reduce using rule 33 (exp -> term .)
    .               reduce using rule 33 (exp -> term .)
    TOKEN           reduce using rule 33 (exp -> term .)
    ID              reduce using rule 33 (exp -> term .)
    $end            reduce using rule 33 (exp -> term .)
    }               reduce using rule 33 (exp -> term .)
    IF              reduce using rule 33 (exp -> term .)
    TRY             reduce using rule 33 (exp -> term .)
    RET             reduce using rule 33 (exp -> term .)
    GLOBAL          reduce using rule 33 (exp -> term .)
    UNITARY_OPERATOR reduce using rule 33 (exp -> term .)
    FLOAT           reduce using rule 33 (exp -> term .)
    INTEGER         reduce using rule 33 (exp -> term .)
    BOOLEAN         reduce using rule 33 (exp -> term .)
    STRING          reduce using rule 33 (exp -> term .)
    [               reduce using rule 33 (exp -> term .)
    {               reduce using rule 33 (exp -> term .)
    SIGN            shift and go to state 63
    BINARY_OPERATOR shift and go to state 64

  ! SIGN            [ reduce using rule 33 (exp -> term .) ]
  ! BINARY_OPERATOR [ reduce using rule 33 (exp -> term .) ]

    binop                          shift and go to state 62

state 47

    (34) exp -> IF . exp { body } ELSE { body }
    (35) exp -> IF . exp { body }
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for { resolved as shift
    IF              shift and go to state 47
    TRY             shift and go to state 48
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 65
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    id                             shift and go to state 26
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 48

    (36) exp -> TRY . { body } CATCH { body }

    {               shift and go to state 66


state 49

    (13) function -> COMMAND id ( . parameter ) { body }
    (17) parameter -> . id , parameter
    (18) parameter -> . id
    (19) parameter -> . empty
    (64) id -> . ID
    (65) empty -> .

    ID              shift and go to state 13
    )               reduce using rule 65 (empty -> .)

    id                             shift and go to state 52
    parameter                      shift and go to state 67
    empty                          shift and go to state 54

state 50

    (16) python_function_call -> . id ( . term_list )
    (42) term_list -> . term_list , term
    (43) term_list -> . term
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    )               reduce using rule 65 (empty -> .)
    ,               reduce using rule 65 (empty -> .)

    id                             shift and go to state 26
    term_list                      shift and go to state 68
    term                           shift and go to state 28
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 51

    (14) token -> TOKEN ( string . )

    )               shift and go to state 69


state 52

    (17) parameter -> id . , parameter
    (18) parameter -> id .

    ,               shift and go to state 70
    )               reduce using rule 18 (parameter -> id .)


state 53

    (12) function -> FN id ( parameter . ) { body }

    )               shift and go to state 71


state 54

    (19) parameter -> empty .

    )               reduce using rule 19 (parameter -> empty .)


state 55

    (15) function_call -> id ( term_list ) .

    FN              reduce using rule 15 (function_call -> id ( term_list ) .)
    COMMAND         reduce using rule 15 (function_call -> id ( term_list ) .)
    .               reduce using rule 15 (function_call -> id ( term_list ) .)
    TOKEN           reduce using rule 15 (function_call -> id ( term_list ) .)
    ID              reduce using rule 15 (function_call -> id ( term_list ) .)
    $end            reduce using rule 15 (function_call -> id ( term_list ) .)
    )               reduce using rule 15 (function_call -> id ( term_list ) .)
    ,               reduce using rule 15 (function_call -> id ( term_list ) .)
    SIGN            reduce using rule 15 (function_call -> id ( term_list ) .)
    BINARY_OPERATOR reduce using rule 15 (function_call -> id ( term_list ) .)
    }               reduce using rule 15 (function_call -> id ( term_list ) .)
    IF              reduce using rule 15 (function_call -> id ( term_list ) .)
    TRY             reduce using rule 15 (function_call -> id ( term_list ) .)
    RET             reduce using rule 15 (function_call -> id ( term_list ) .)
    GLOBAL          reduce using rule 15 (function_call -> id ( term_list ) .)
    UNITARY_OPERATOR reduce using rule 15 (function_call -> id ( term_list ) .)
    FLOAT           reduce using rule 15 (function_call -> id ( term_list ) .)
    INTEGER         reduce using rule 15 (function_call -> id ( term_list ) .)
    BOOLEAN         reduce using rule 15 (function_call -> id ( term_list ) .)
    STRING          reduce using rule 15 (function_call -> id ( term_list ) .)
    [               reduce using rule 15 (function_call -> id ( term_list ) .)
    {               reduce using rule 15 (function_call -> id ( term_list ) .)
    ]               reduce using rule 15 (function_call -> id ( term_list ) .)
    :               reduce using rule 15 (function_call -> id ( term_list ) .)


state 56

    (42) term_list -> term_list , . term
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    )               reduce using rule 65 (empty -> .)
    ,               reduce using rule 65 (empty -> .)
    ]               reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    TRY             reduce using rule 65 (empty -> .)
    RET             reduce using rule 65 (empty -> .)
    GLOBAL          reduce using rule 65 (empty -> .)
    .               reduce using rule 65 (empty -> .)
    BINARY_OPERATOR reduce using rule 65 (empty -> .)

  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    term                           shift and go to state 72
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    id                             shift and go to state 26
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 57

    (44) term -> unop term .

    )               reduce using rule 44 (term -> unop term .)
    ,               reduce using rule 44 (term -> unop term .)
    SIGN            reduce using rule 44 (term -> unop term .)
    BINARY_OPERATOR reduce using rule 44 (term -> unop term .)
    FN              reduce using rule 44 (term -> unop term .)
    COMMAND         reduce using rule 44 (term -> unop term .)
    .               reduce using rule 44 (term -> unop term .)
    TOKEN           reduce using rule 44 (term -> unop term .)
    ID              reduce using rule 44 (term -> unop term .)
    $end            reduce using rule 44 (term -> unop term .)
    }               reduce using rule 44 (term -> unop term .)
    IF              reduce using rule 44 (term -> unop term .)
    TRY             reduce using rule 44 (term -> unop term .)
    RET             reduce using rule 44 (term -> unop term .)
    GLOBAL          reduce using rule 44 (term -> unop term .)
    UNITARY_OPERATOR reduce using rule 44 (term -> unop term .)
    FLOAT           reduce using rule 44 (term -> unop term .)
    INTEGER         reduce using rule 44 (term -> unop term .)
    BOOLEAN         reduce using rule 44 (term -> unop term .)
    STRING          reduce using rule 44 (term -> unop term .)
    [               reduce using rule 44 (term -> unop term .)
    {               reduce using rule 44 (term -> unop term .)
    ]               reduce using rule 44 (term -> unop term .)
    :               reduce using rule 44 (term -> unop term .)


state 58

    (59) list -> [ term_list . ]
    (42) term_list -> term_list . , term

    ]               shift and go to state 73
    ,               shift and go to state 56


state 59

    (57) dict -> { term_map . }

    }               shift and go to state 74


state 60

    (58) dict -> { empty . }
    (52) term -> empty .

    }               shift and go to state 75
    :               reduce using rule 52 (term -> empty .)


state 61

    (40) term_map -> term . : term , term_map
    (41) term_map -> term . : term

    :               shift and go to state 76


state 62

    (32) exp -> term binop . exp
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    IF              shift and go to state 47
    TRY             shift and go to state 48
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)
    FN              reduce using rule 65 (empty -> .)
    COMMAND         reduce using rule 65 (empty -> .)
    .               reduce using rule 65 (empty -> .)
    TOKEN           reduce using rule 65 (empty -> .)
    $end            reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)
    RET             reduce using rule 65 (empty -> .)
    GLOBAL          reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    term                           shift and go to state 46
    exp                            shift and go to state 77
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    id                             shift and go to state 26
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 63

    (55) binop -> SIGN .

    IF              reduce using rule 55 (binop -> SIGN .)
    TRY             reduce using rule 55 (binop -> SIGN .)
    SIGN            reduce using rule 55 (binop -> SIGN .)
    UNITARY_OPERATOR reduce using rule 55 (binop -> SIGN .)
    FLOAT           reduce using rule 55 (binop -> SIGN .)
    INTEGER         reduce using rule 55 (binop -> SIGN .)
    BOOLEAN         reduce using rule 55 (binop -> SIGN .)
    STRING          reduce using rule 55 (binop -> SIGN .)
    ID              reduce using rule 55 (binop -> SIGN .)
    [               reduce using rule 55 (binop -> SIGN .)
    {               reduce using rule 55 (binop -> SIGN .)
    BINARY_OPERATOR reduce using rule 55 (binop -> SIGN .)
    FN              reduce using rule 55 (binop -> SIGN .)
    COMMAND         reduce using rule 55 (binop -> SIGN .)
    .               reduce using rule 55 (binop -> SIGN .)
    TOKEN           reduce using rule 55 (binop -> SIGN .)
    $end            reduce using rule 55 (binop -> SIGN .)
    }               reduce using rule 55 (binop -> SIGN .)
    RET             reduce using rule 55 (binop -> SIGN .)
    GLOBAL          reduce using rule 55 (binop -> SIGN .)


state 64

    (56) binop -> BINARY_OPERATOR .

    IF              reduce using rule 56 (binop -> BINARY_OPERATOR .)
    TRY             reduce using rule 56 (binop -> BINARY_OPERATOR .)
    SIGN            reduce using rule 56 (binop -> BINARY_OPERATOR .)
    UNITARY_OPERATOR reduce using rule 56 (binop -> BINARY_OPERATOR .)
    FLOAT           reduce using rule 56 (binop -> BINARY_OPERATOR .)
    INTEGER         reduce using rule 56 (binop -> BINARY_OPERATOR .)
    BOOLEAN         reduce using rule 56 (binop -> BINARY_OPERATOR .)
    STRING          reduce using rule 56 (binop -> BINARY_OPERATOR .)
    ID              reduce using rule 56 (binop -> BINARY_OPERATOR .)
    [               reduce using rule 56 (binop -> BINARY_OPERATOR .)
    {               reduce using rule 56 (binop -> BINARY_OPERATOR .)
    BINARY_OPERATOR reduce using rule 56 (binop -> BINARY_OPERATOR .)
    FN              reduce using rule 56 (binop -> BINARY_OPERATOR .)
    COMMAND         reduce using rule 56 (binop -> BINARY_OPERATOR .)
    .               reduce using rule 56 (binop -> BINARY_OPERATOR .)
    TOKEN           reduce using rule 56 (binop -> BINARY_OPERATOR .)
    $end            reduce using rule 56 (binop -> BINARY_OPERATOR .)
    }               reduce using rule 56 (binop -> BINARY_OPERATOR .)
    RET             reduce using rule 56 (binop -> BINARY_OPERATOR .)
    GLOBAL          reduce using rule 56 (binop -> BINARY_OPERATOR .)


state 65

    (34) exp -> IF exp . { body } ELSE { body }
    (35) exp -> IF exp . { body }

    {               shift and go to state 78


state 66

    (36) exp -> TRY { . body } CATCH { body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (64) id -> . ID
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    body                           shift and go to state 79
    exp                            shift and go to state 80
    variable                       shift and go to state 81
    return                         shift and go to state 82
    global                         shift and go to state 83
    function_call                  shift and go to state 84
    python_function_call           shift and go to state 85
    id                             shift and go to state 86
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 67

    (13) function -> COMMAND id ( parameter . ) { body }

    )               shift and go to state 89


state 68

    (16) python_function_call -> . id ( term_list . )
    (42) term_list -> term_list . , term

    )               shift and go to state 90
    ,               shift and go to state 56


state 69

    (14) token -> TOKEN ( string ) .

    FN              reduce using rule 14 (token -> TOKEN ( string ) .)
    COMMAND         reduce using rule 14 (token -> TOKEN ( string ) .)
    .               reduce using rule 14 (token -> TOKEN ( string ) .)
    TOKEN           reduce using rule 14 (token -> TOKEN ( string ) .)
    ID              reduce using rule 14 (token -> TOKEN ( string ) .)
    $end            reduce using rule 14 (token -> TOKEN ( string ) .)


state 70

    (17) parameter -> id , . parameter
    (17) parameter -> . id , parameter
    (18) parameter -> . id
    (19) parameter -> . empty
    (64) id -> . ID
    (65) empty -> .

    ID              shift and go to state 13
    )               reduce using rule 65 (empty -> .)

    id                             shift and go to state 52
    parameter                      shift and go to state 91
    empty                          shift and go to state 54

state 71

    (12) function -> FN id ( parameter ) . { body }

    {               shift and go to state 92


state 72

    (42) term_list -> term_list , term .

    )               reduce using rule 42 (term_list -> term_list , term .)
    ,               reduce using rule 42 (term_list -> term_list , term .)
    ]               reduce using rule 42 (term_list -> term_list , term .)
    }               reduce using rule 42 (term_list -> term_list , term .)
    IF              reduce using rule 42 (term_list -> term_list , term .)
    TRY             reduce using rule 42 (term_list -> term_list , term .)
    RET             reduce using rule 42 (term_list -> term_list , term .)
    GLOBAL          reduce using rule 42 (term_list -> term_list , term .)
    .               reduce using rule 42 (term_list -> term_list , term .)
    ID              reduce using rule 42 (term_list -> term_list , term .)
    SIGN            reduce using rule 42 (term_list -> term_list , term .)
    UNITARY_OPERATOR reduce using rule 42 (term_list -> term_list , term .)
    FLOAT           reduce using rule 42 (term_list -> term_list , term .)
    INTEGER         reduce using rule 42 (term_list -> term_list , term .)
    BOOLEAN         reduce using rule 42 (term_list -> term_list , term .)
    STRING          reduce using rule 42 (term_list -> term_list , term .)
    [               reduce using rule 42 (term_list -> term_list , term .)
    {               reduce using rule 42 (term_list -> term_list , term .)
    BINARY_OPERATOR reduce using rule 42 (term_list -> term_list , term .)


state 73

    (59) list -> [ term_list ] .

    )               reduce using rule 59 (list -> [ term_list ] .)
    ,               reduce using rule 59 (list -> [ term_list ] .)
    SIGN            reduce using rule 59 (list -> [ term_list ] .)
    BINARY_OPERATOR reduce using rule 59 (list -> [ term_list ] .)
    FN              reduce using rule 59 (list -> [ term_list ] .)
    COMMAND         reduce using rule 59 (list -> [ term_list ] .)
    .               reduce using rule 59 (list -> [ term_list ] .)
    TOKEN           reduce using rule 59 (list -> [ term_list ] .)
    ID              reduce using rule 59 (list -> [ term_list ] .)
    $end            reduce using rule 59 (list -> [ term_list ] .)
    }               reduce using rule 59 (list -> [ term_list ] .)
    IF              reduce using rule 59 (list -> [ term_list ] .)
    TRY             reduce using rule 59 (list -> [ term_list ] .)
    RET             reduce using rule 59 (list -> [ term_list ] .)
    GLOBAL          reduce using rule 59 (list -> [ term_list ] .)
    UNITARY_OPERATOR reduce using rule 59 (list -> [ term_list ] .)
    FLOAT           reduce using rule 59 (list -> [ term_list ] .)
    INTEGER         reduce using rule 59 (list -> [ term_list ] .)
    BOOLEAN         reduce using rule 59 (list -> [ term_list ] .)
    STRING          reduce using rule 59 (list -> [ term_list ] .)
    [               reduce using rule 59 (list -> [ term_list ] .)
    {               reduce using rule 59 (list -> [ term_list ] .)
    ]               reduce using rule 59 (list -> [ term_list ] .)
    :               reduce using rule 59 (list -> [ term_list ] .)


state 74

    (57) dict -> { term_map } .

    )               reduce using rule 57 (dict -> { term_map } .)
    ,               reduce using rule 57 (dict -> { term_map } .)
    SIGN            reduce using rule 57 (dict -> { term_map } .)
    BINARY_OPERATOR reduce using rule 57 (dict -> { term_map } .)
    FN              reduce using rule 57 (dict -> { term_map } .)
    COMMAND         reduce using rule 57 (dict -> { term_map } .)
    .               reduce using rule 57 (dict -> { term_map } .)
    TOKEN           reduce using rule 57 (dict -> { term_map } .)
    ID              reduce using rule 57 (dict -> { term_map } .)
    $end            reduce using rule 57 (dict -> { term_map } .)
    }               reduce using rule 57 (dict -> { term_map } .)
    IF              reduce using rule 57 (dict -> { term_map } .)
    TRY             reduce using rule 57 (dict -> { term_map } .)
    RET             reduce using rule 57 (dict -> { term_map } .)
    GLOBAL          reduce using rule 57 (dict -> { term_map } .)
    UNITARY_OPERATOR reduce using rule 57 (dict -> { term_map } .)
    FLOAT           reduce using rule 57 (dict -> { term_map } .)
    INTEGER         reduce using rule 57 (dict -> { term_map } .)
    BOOLEAN         reduce using rule 57 (dict -> { term_map } .)
    STRING          reduce using rule 57 (dict -> { term_map } .)
    [               reduce using rule 57 (dict -> { term_map } .)
    {               reduce using rule 57 (dict -> { term_map } .)
    ]               reduce using rule 57 (dict -> { term_map } .)
    :               reduce using rule 57 (dict -> { term_map } .)


state 75

    (58) dict -> { empty } .

    )               reduce using rule 58 (dict -> { empty } .)
    ,               reduce using rule 58 (dict -> { empty } .)
    SIGN            reduce using rule 58 (dict -> { empty } .)
    BINARY_OPERATOR reduce using rule 58 (dict -> { empty } .)
    FN              reduce using rule 58 (dict -> { empty } .)
    COMMAND         reduce using rule 58 (dict -> { empty } .)
    .               reduce using rule 58 (dict -> { empty } .)
    TOKEN           reduce using rule 58 (dict -> { empty } .)
    ID              reduce using rule 58 (dict -> { empty } .)
    $end            reduce using rule 58 (dict -> { empty } .)
    }               reduce using rule 58 (dict -> { empty } .)
    IF              reduce using rule 58 (dict -> { empty } .)
    TRY             reduce using rule 58 (dict -> { empty } .)
    RET             reduce using rule 58 (dict -> { empty } .)
    GLOBAL          reduce using rule 58 (dict -> { empty } .)
    UNITARY_OPERATOR reduce using rule 58 (dict -> { empty } .)
    FLOAT           reduce using rule 58 (dict -> { empty } .)
    INTEGER         reduce using rule 58 (dict -> { empty } .)
    BOOLEAN         reduce using rule 58 (dict -> { empty } .)
    STRING          reduce using rule 58 (dict -> { empty } .)
    [               reduce using rule 58 (dict -> { empty } .)
    {               reduce using rule 58 (dict -> { empty } .)
    ]               reduce using rule 58 (dict -> { empty } .)
    :               reduce using rule 58 (dict -> { empty } .)


state 76

    (40) term_map -> term : . term , term_map
    (41) term_map -> term : . term
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    ,               reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)

    term                           shift and go to state 93
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    id                             shift and go to state 26
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 77

    (32) exp -> term binop exp .

    FN              reduce using rule 32 (exp -> term binop exp .)
    COMMAND         reduce using rule 32 (exp -> term binop exp .)
    .               reduce using rule 32 (exp -> term binop exp .)
    TOKEN           reduce using rule 32 (exp -> term binop exp .)
    ID              reduce using rule 32 (exp -> term binop exp .)
    $end            reduce using rule 32 (exp -> term binop exp .)
    }               reduce using rule 32 (exp -> term binop exp .)
    IF              reduce using rule 32 (exp -> term binop exp .)
    TRY             reduce using rule 32 (exp -> term binop exp .)
    RET             reduce using rule 32 (exp -> term binop exp .)
    GLOBAL          reduce using rule 32 (exp -> term binop exp .)
    SIGN            reduce using rule 32 (exp -> term binop exp .)
    UNITARY_OPERATOR reduce using rule 32 (exp -> term binop exp .)
    FLOAT           reduce using rule 32 (exp -> term binop exp .)
    INTEGER         reduce using rule 32 (exp -> term binop exp .)
    BOOLEAN         reduce using rule 32 (exp -> term binop exp .)
    STRING          reduce using rule 32 (exp -> term binop exp .)
    [               reduce using rule 32 (exp -> term binop exp .)
    {               reduce using rule 32 (exp -> term binop exp .)
    BINARY_OPERATOR reduce using rule 32 (exp -> term binop exp .)


state 78

    (34) exp -> IF exp { . body } ELSE { body }
    (35) exp -> IF exp { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (64) id -> . ID
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 80
    body                           shift and go to state 94
    variable                       shift and go to state 81
    return                         shift and go to state 82
    global                         shift and go to state 83
    function_call                  shift and go to state 84
    python_function_call           shift and go to state 85
    id                             shift and go to state 86
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 79

    (36) exp -> TRY { body . } CATCH { body }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (64) id -> . ID
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 95
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! }               [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 96
    variable                       shift and go to state 97
    return                         shift and go to state 98
    global                         shift and go to state 99
    function_call                  shift and go to state 100
    python_function_call           shift and go to state 101
    term                           shift and go to state 46
    id                             shift and go to state 102
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 80

    (28) body -> exp .

    }               reduce using rule 28 (body -> exp .)
    IF              reduce using rule 28 (body -> exp .)
    TRY             reduce using rule 28 (body -> exp .)
    RET             reduce using rule 28 (body -> exp .)
    GLOBAL          reduce using rule 28 (body -> exp .)
    .               reduce using rule 28 (body -> exp .)
    ID              reduce using rule 28 (body -> exp .)
    SIGN            reduce using rule 28 (body -> exp .)
    UNITARY_OPERATOR reduce using rule 28 (body -> exp .)
    FLOAT           reduce using rule 28 (body -> exp .)
    INTEGER         reduce using rule 28 (body -> exp .)
    BOOLEAN         reduce using rule 28 (body -> exp .)
    STRING          reduce using rule 28 (body -> exp .)
    [               reduce using rule 28 (body -> exp .)
    {               reduce using rule 28 (body -> exp .)
    BINARY_OPERATOR reduce using rule 28 (body -> exp .)


state 81

    (29) body -> variable .

    }               reduce using rule 29 (body -> variable .)
    IF              reduce using rule 29 (body -> variable .)
    TRY             reduce using rule 29 (body -> variable .)
    RET             reduce using rule 29 (body -> variable .)
    GLOBAL          reduce using rule 29 (body -> variable .)
    .               reduce using rule 29 (body -> variable .)
    ID              reduce using rule 29 (body -> variable .)
    SIGN            reduce using rule 29 (body -> variable .)
    UNITARY_OPERATOR reduce using rule 29 (body -> variable .)
    FLOAT           reduce using rule 29 (body -> variable .)
    INTEGER         reduce using rule 29 (body -> variable .)
    BOOLEAN         reduce using rule 29 (body -> variable .)
    STRING          reduce using rule 29 (body -> variable .)
    [               reduce using rule 29 (body -> variable .)
    {               reduce using rule 29 (body -> variable .)
    BINARY_OPERATOR reduce using rule 29 (body -> variable .)


state 82

    (30) body -> return .

    }               reduce using rule 30 (body -> return .)
    IF              reduce using rule 30 (body -> return .)
    TRY             reduce using rule 30 (body -> return .)
    RET             reduce using rule 30 (body -> return .)
    GLOBAL          reduce using rule 30 (body -> return .)
    .               reduce using rule 30 (body -> return .)
    ID              reduce using rule 30 (body -> return .)
    SIGN            reduce using rule 30 (body -> return .)
    UNITARY_OPERATOR reduce using rule 30 (body -> return .)
    FLOAT           reduce using rule 30 (body -> return .)
    INTEGER         reduce using rule 30 (body -> return .)
    BOOLEAN         reduce using rule 30 (body -> return .)
    STRING          reduce using rule 30 (body -> return .)
    [               reduce using rule 30 (body -> return .)
    {               reduce using rule 30 (body -> return .)
    BINARY_OPERATOR reduce using rule 30 (body -> return .)


state 83

    (31) body -> global .

    }               reduce using rule 31 (body -> global .)
    IF              reduce using rule 31 (body -> global .)
    TRY             reduce using rule 31 (body -> global .)
    RET             reduce using rule 31 (body -> global .)
    GLOBAL          reduce using rule 31 (body -> global .)
    .               reduce using rule 31 (body -> global .)
    ID              reduce using rule 31 (body -> global .)
    SIGN            reduce using rule 31 (body -> global .)
    UNITARY_OPERATOR reduce using rule 31 (body -> global .)
    FLOAT           reduce using rule 31 (body -> global .)
    INTEGER         reduce using rule 31 (body -> global .)
    BOOLEAN         reduce using rule 31 (body -> global .)
    STRING          reduce using rule 31 (body -> global .)
    [               reduce using rule 31 (body -> global .)
    {               reduce using rule 31 (body -> global .)
    BINARY_OPERATOR reduce using rule 31 (body -> global .)


state 84

    (26) body -> function_call .
    (48) term -> function_call .

  ! reduce/reduce conflict for SIGN resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for BINARY_OPERATOR resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for } resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for IF resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for TRY resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for RET resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for . resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for ID resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for UNITARY_OPERATOR resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for FLOAT resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for INTEGER resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for STRING resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for [ resolved using rule 26 (body -> function_call .)
  ! reduce/reduce conflict for { resolved using rule 26 (body -> function_call .)
    }               reduce using rule 26 (body -> function_call .)
    IF              reduce using rule 26 (body -> function_call .)
    TRY             reduce using rule 26 (body -> function_call .)
    RET             reduce using rule 26 (body -> function_call .)
    GLOBAL          reduce using rule 26 (body -> function_call .)
    .               reduce using rule 26 (body -> function_call .)
    ID              reduce using rule 26 (body -> function_call .)
    SIGN            reduce using rule 26 (body -> function_call .)
    UNITARY_OPERATOR reduce using rule 26 (body -> function_call .)
    FLOAT           reduce using rule 26 (body -> function_call .)
    INTEGER         reduce using rule 26 (body -> function_call .)
    BOOLEAN         reduce using rule 26 (body -> function_call .)
    STRING          reduce using rule 26 (body -> function_call .)
    [               reduce using rule 26 (body -> function_call .)
    {               reduce using rule 26 (body -> function_call .)
    BINARY_OPERATOR reduce using rule 26 (body -> function_call .)

  ! SIGN            [ reduce using rule 48 (term -> function_call .) ]
  ! BINARY_OPERATOR [ reduce using rule 48 (term -> function_call .) ]
  ! }               [ reduce using rule 48 (term -> function_call .) ]
  ! IF              [ reduce using rule 48 (term -> function_call .) ]
  ! TRY             [ reduce using rule 48 (term -> function_call .) ]
  ! RET             [ reduce using rule 48 (term -> function_call .) ]
  ! GLOBAL          [ reduce using rule 48 (term -> function_call .) ]
  ! .               [ reduce using rule 48 (term -> function_call .) ]
  ! ID              [ reduce using rule 48 (term -> function_call .) ]
  ! UNITARY_OPERATOR [ reduce using rule 48 (term -> function_call .) ]
  ! FLOAT           [ reduce using rule 48 (term -> function_call .) ]
  ! INTEGER         [ reduce using rule 48 (term -> function_call .) ]
  ! BOOLEAN         [ reduce using rule 48 (term -> function_call .) ]
  ! STRING          [ reduce using rule 48 (term -> function_call .) ]
  ! [               [ reduce using rule 48 (term -> function_call .) ]
  ! {               [ reduce using rule 48 (term -> function_call .) ]


state 85

    (27) body -> python_function_call .

    }               reduce using rule 27 (body -> python_function_call .)
    IF              reduce using rule 27 (body -> python_function_call .)
    TRY             reduce using rule 27 (body -> python_function_call .)
    RET             reduce using rule 27 (body -> python_function_call .)
    GLOBAL          reduce using rule 27 (body -> python_function_call .)
    .               reduce using rule 27 (body -> python_function_call .)
    ID              reduce using rule 27 (body -> python_function_call .)
    SIGN            reduce using rule 27 (body -> python_function_call .)
    UNITARY_OPERATOR reduce using rule 27 (body -> python_function_call .)
    FLOAT           reduce using rule 27 (body -> python_function_call .)
    INTEGER         reduce using rule 27 (body -> python_function_call .)
    BOOLEAN         reduce using rule 27 (body -> python_function_call .)
    STRING          reduce using rule 27 (body -> python_function_call .)
    [               reduce using rule 27 (body -> python_function_call .)
    {               reduce using rule 27 (body -> python_function_call .)
    BINARY_OPERATOR reduce using rule 27 (body -> python_function_call .)


state 86

    (15) function_call -> id . ( term_list )
    (37) variable -> id . = exp
    (49) term -> id .

    (               shift and go to state 20
    =               shift and go to state 21
    SIGN            reduce using rule 49 (term -> id .)
    BINARY_OPERATOR reduce using rule 49 (term -> id .)
    }               reduce using rule 49 (term -> id .)
    IF              reduce using rule 49 (term -> id .)
    TRY             reduce using rule 49 (term -> id .)
    RET             reduce using rule 49 (term -> id .)
    GLOBAL          reduce using rule 49 (term -> id .)
    .               reduce using rule 49 (term -> id .)
    ID              reduce using rule 49 (term -> id .)
    UNITARY_OPERATOR reduce using rule 49 (term -> id .)
    FLOAT           reduce using rule 49 (term -> id .)
    INTEGER         reduce using rule 49 (term -> id .)
    BOOLEAN         reduce using rule 49 (term -> id .)
    STRING          reduce using rule 49 (term -> id .)
    [               reduce using rule 49 (term -> id .)
    {               reduce using rule 49 (term -> id .)


state 87

    (38) return -> RET . id
    (64) id -> . ID

    ID              shift and go to state 13

    id                             shift and go to state 103

state 88

    (39) global -> GLOBAL . term_list
    (42) term_list -> . term_list , term
    (43) term_list -> . term
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    ,               reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    TRY             reduce using rule 65 (empty -> .)
    RET             reduce using rule 65 (empty -> .)
    GLOBAL          reduce using rule 65 (empty -> .)
    .               reduce using rule 65 (empty -> .)
    BINARY_OPERATOR reduce using rule 65 (empty -> .)

  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    term_list                      shift and go to state 104
    term                           shift and go to state 28
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    id                             shift and go to state 26
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 89

    (13) function -> COMMAND id ( parameter ) . { body }

    {               shift and go to state 105


state 90

    (16) python_function_call -> . id ( term_list ) .

    FN              reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    COMMAND         reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    .               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    TOKEN           reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    ID              reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    $end            reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    }               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    IF              reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    TRY             reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    RET             reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    GLOBAL          reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    SIGN            reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    UNITARY_OPERATOR reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    FLOAT           reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    INTEGER         reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    BOOLEAN         reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    STRING          reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    [               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    {               reduce using rule 16 (python_function_call -> . id ( term_list ) .)
    BINARY_OPERATOR reduce using rule 16 (python_function_call -> . id ( term_list ) .)


state 91

    (17) parameter -> id , parameter .

    )               reduce using rule 17 (parameter -> id , parameter .)


state 92

    (12) function -> FN id ( parameter ) { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (64) id -> . ID
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    id                             shift and go to state 86
    body                           shift and go to state 106
    exp                            shift and go to state 80
    variable                       shift and go to state 81
    return                         shift and go to state 82
    global                         shift and go to state 83
    function_call                  shift and go to state 84
    python_function_call           shift and go to state 85
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 93

    (40) term_map -> term : term . , term_map
    (41) term_map -> term : term .

    ,               shift and go to state 107
    }               reduce using rule 41 (term_map -> term : term .)


state 94

    (34) exp -> IF exp { body . } ELSE { body }
    (35) exp -> IF exp { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (64) id -> . ID
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 108
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! }               [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 96
    variable                       shift and go to state 97
    return                         shift and go to state 98
    global                         shift and go to state 99
    function_call                  shift and go to state 100
    python_function_call           shift and go to state 101
    term                           shift and go to state 46
    id                             shift and go to state 102
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 95

    (36) exp -> TRY { body } . CATCH { body }

    CATCH           shift and go to state 109


state 96

    (20) body -> body exp .

    }               reduce using rule 20 (body -> body exp .)
    IF              reduce using rule 20 (body -> body exp .)
    TRY             reduce using rule 20 (body -> body exp .)
    RET             reduce using rule 20 (body -> body exp .)
    GLOBAL          reduce using rule 20 (body -> body exp .)
    .               reduce using rule 20 (body -> body exp .)
    ID              reduce using rule 20 (body -> body exp .)
    SIGN            reduce using rule 20 (body -> body exp .)
    UNITARY_OPERATOR reduce using rule 20 (body -> body exp .)
    FLOAT           reduce using rule 20 (body -> body exp .)
    INTEGER         reduce using rule 20 (body -> body exp .)
    BOOLEAN         reduce using rule 20 (body -> body exp .)
    STRING          reduce using rule 20 (body -> body exp .)
    [               reduce using rule 20 (body -> body exp .)
    {               reduce using rule 20 (body -> body exp .)
    BINARY_OPERATOR reduce using rule 20 (body -> body exp .)


state 97

    (21) body -> body variable .

    }               reduce using rule 21 (body -> body variable .)
    IF              reduce using rule 21 (body -> body variable .)
    TRY             reduce using rule 21 (body -> body variable .)
    RET             reduce using rule 21 (body -> body variable .)
    GLOBAL          reduce using rule 21 (body -> body variable .)
    .               reduce using rule 21 (body -> body variable .)
    ID              reduce using rule 21 (body -> body variable .)
    SIGN            reduce using rule 21 (body -> body variable .)
    UNITARY_OPERATOR reduce using rule 21 (body -> body variable .)
    FLOAT           reduce using rule 21 (body -> body variable .)
    INTEGER         reduce using rule 21 (body -> body variable .)
    BOOLEAN         reduce using rule 21 (body -> body variable .)
    STRING          reduce using rule 21 (body -> body variable .)
    [               reduce using rule 21 (body -> body variable .)
    {               reduce using rule 21 (body -> body variable .)
    BINARY_OPERATOR reduce using rule 21 (body -> body variable .)


state 98

    (22) body -> body return .

    }               reduce using rule 22 (body -> body return .)
    IF              reduce using rule 22 (body -> body return .)
    TRY             reduce using rule 22 (body -> body return .)
    RET             reduce using rule 22 (body -> body return .)
    GLOBAL          reduce using rule 22 (body -> body return .)
    .               reduce using rule 22 (body -> body return .)
    ID              reduce using rule 22 (body -> body return .)
    SIGN            reduce using rule 22 (body -> body return .)
    UNITARY_OPERATOR reduce using rule 22 (body -> body return .)
    FLOAT           reduce using rule 22 (body -> body return .)
    INTEGER         reduce using rule 22 (body -> body return .)
    BOOLEAN         reduce using rule 22 (body -> body return .)
    STRING          reduce using rule 22 (body -> body return .)
    [               reduce using rule 22 (body -> body return .)
    {               reduce using rule 22 (body -> body return .)
    BINARY_OPERATOR reduce using rule 22 (body -> body return .)


state 99

    (23) body -> body global .

    }               reduce using rule 23 (body -> body global .)
    IF              reduce using rule 23 (body -> body global .)
    TRY             reduce using rule 23 (body -> body global .)
    RET             reduce using rule 23 (body -> body global .)
    GLOBAL          reduce using rule 23 (body -> body global .)
    .               reduce using rule 23 (body -> body global .)
    ID              reduce using rule 23 (body -> body global .)
    SIGN            reduce using rule 23 (body -> body global .)
    UNITARY_OPERATOR reduce using rule 23 (body -> body global .)
    FLOAT           reduce using rule 23 (body -> body global .)
    INTEGER         reduce using rule 23 (body -> body global .)
    BOOLEAN         reduce using rule 23 (body -> body global .)
    STRING          reduce using rule 23 (body -> body global .)
    [               reduce using rule 23 (body -> body global .)
    {               reduce using rule 23 (body -> body global .)
    BINARY_OPERATOR reduce using rule 23 (body -> body global .)


state 100

    (24) body -> body function_call .
    (48) term -> function_call .

  ! reduce/reduce conflict for SIGN resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for BINARY_OPERATOR resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for } resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for IF resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for TRY resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for RET resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for . resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for ID resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for UNITARY_OPERATOR resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for FLOAT resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for INTEGER resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for STRING resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for [ resolved using rule 24 (body -> body function_call .)
  ! reduce/reduce conflict for { resolved using rule 24 (body -> body function_call .)
    }               reduce using rule 24 (body -> body function_call .)
    IF              reduce using rule 24 (body -> body function_call .)
    TRY             reduce using rule 24 (body -> body function_call .)
    RET             reduce using rule 24 (body -> body function_call .)
    GLOBAL          reduce using rule 24 (body -> body function_call .)
    .               reduce using rule 24 (body -> body function_call .)
    ID              reduce using rule 24 (body -> body function_call .)
    SIGN            reduce using rule 24 (body -> body function_call .)
    UNITARY_OPERATOR reduce using rule 24 (body -> body function_call .)
    FLOAT           reduce using rule 24 (body -> body function_call .)
    INTEGER         reduce using rule 24 (body -> body function_call .)
    BOOLEAN         reduce using rule 24 (body -> body function_call .)
    STRING          reduce using rule 24 (body -> body function_call .)
    [               reduce using rule 24 (body -> body function_call .)
    {               reduce using rule 24 (body -> body function_call .)
    BINARY_OPERATOR reduce using rule 24 (body -> body function_call .)

  ! SIGN            [ reduce using rule 48 (term -> function_call .) ]
  ! BINARY_OPERATOR [ reduce using rule 48 (term -> function_call .) ]
  ! }               [ reduce using rule 48 (term -> function_call .) ]
  ! IF              [ reduce using rule 48 (term -> function_call .) ]
  ! TRY             [ reduce using rule 48 (term -> function_call .) ]
  ! RET             [ reduce using rule 48 (term -> function_call .) ]
  ! GLOBAL          [ reduce using rule 48 (term -> function_call .) ]
  ! .               [ reduce using rule 48 (term -> function_call .) ]
  ! ID              [ reduce using rule 48 (term -> function_call .) ]
  ! UNITARY_OPERATOR [ reduce using rule 48 (term -> function_call .) ]
  ! FLOAT           [ reduce using rule 48 (term -> function_call .) ]
  ! INTEGER         [ reduce using rule 48 (term -> function_call .) ]
  ! BOOLEAN         [ reduce using rule 48 (term -> function_call .) ]
  ! STRING          [ reduce using rule 48 (term -> function_call .) ]
  ! [               [ reduce using rule 48 (term -> function_call .) ]
  ! {               [ reduce using rule 48 (term -> function_call .) ]


state 101

    (25) body -> body python_function_call .

    }               reduce using rule 25 (body -> body python_function_call .)
    IF              reduce using rule 25 (body -> body python_function_call .)
    TRY             reduce using rule 25 (body -> body python_function_call .)
    RET             reduce using rule 25 (body -> body python_function_call .)
    GLOBAL          reduce using rule 25 (body -> body python_function_call .)
    .               reduce using rule 25 (body -> body python_function_call .)
    ID              reduce using rule 25 (body -> body python_function_call .)
    SIGN            reduce using rule 25 (body -> body python_function_call .)
    UNITARY_OPERATOR reduce using rule 25 (body -> body python_function_call .)
    FLOAT           reduce using rule 25 (body -> body python_function_call .)
    INTEGER         reduce using rule 25 (body -> body python_function_call .)
    BOOLEAN         reduce using rule 25 (body -> body python_function_call .)
    STRING          reduce using rule 25 (body -> body python_function_call .)
    [               reduce using rule 25 (body -> body python_function_call .)
    {               reduce using rule 25 (body -> body python_function_call .)
    BINARY_OPERATOR reduce using rule 25 (body -> body python_function_call .)


state 102

    (37) variable -> id . = exp
    (15) function_call -> id . ( term_list )
    (49) term -> id .

    =               shift and go to state 21
    (               shift and go to state 20
    SIGN            reduce using rule 49 (term -> id .)
    BINARY_OPERATOR reduce using rule 49 (term -> id .)
    }               reduce using rule 49 (term -> id .)
    IF              reduce using rule 49 (term -> id .)
    TRY             reduce using rule 49 (term -> id .)
    RET             reduce using rule 49 (term -> id .)
    GLOBAL          reduce using rule 49 (term -> id .)
    .               reduce using rule 49 (term -> id .)
    ID              reduce using rule 49 (term -> id .)
    UNITARY_OPERATOR reduce using rule 49 (term -> id .)
    FLOAT           reduce using rule 49 (term -> id .)
    INTEGER         reduce using rule 49 (term -> id .)
    BOOLEAN         reduce using rule 49 (term -> id .)
    STRING          reduce using rule 49 (term -> id .)
    [               reduce using rule 49 (term -> id .)
    {               reduce using rule 49 (term -> id .)


state 103

    (38) return -> RET id .

    }               reduce using rule 38 (return -> RET id .)
    IF              reduce using rule 38 (return -> RET id .)
    TRY             reduce using rule 38 (return -> RET id .)
    RET             reduce using rule 38 (return -> RET id .)
    GLOBAL          reduce using rule 38 (return -> RET id .)
    .               reduce using rule 38 (return -> RET id .)
    ID              reduce using rule 38 (return -> RET id .)
    SIGN            reduce using rule 38 (return -> RET id .)
    UNITARY_OPERATOR reduce using rule 38 (return -> RET id .)
    FLOAT           reduce using rule 38 (return -> RET id .)
    INTEGER         reduce using rule 38 (return -> RET id .)
    BOOLEAN         reduce using rule 38 (return -> RET id .)
    STRING          reduce using rule 38 (return -> RET id .)
    [               reduce using rule 38 (return -> RET id .)
    {               reduce using rule 38 (return -> RET id .)
    BINARY_OPERATOR reduce using rule 38 (return -> RET id .)


state 104

    (39) global -> GLOBAL term_list .
    (42) term_list -> term_list . , term

    }               reduce using rule 39 (global -> GLOBAL term_list .)
    IF              reduce using rule 39 (global -> GLOBAL term_list .)
    TRY             reduce using rule 39 (global -> GLOBAL term_list .)
    RET             reduce using rule 39 (global -> GLOBAL term_list .)
    GLOBAL          reduce using rule 39 (global -> GLOBAL term_list .)
    .               reduce using rule 39 (global -> GLOBAL term_list .)
    ID              reduce using rule 39 (global -> GLOBAL term_list .)
    SIGN            reduce using rule 39 (global -> GLOBAL term_list .)
    UNITARY_OPERATOR reduce using rule 39 (global -> GLOBAL term_list .)
    FLOAT           reduce using rule 39 (global -> GLOBAL term_list .)
    INTEGER         reduce using rule 39 (global -> GLOBAL term_list .)
    BOOLEAN         reduce using rule 39 (global -> GLOBAL term_list .)
    STRING          reduce using rule 39 (global -> GLOBAL term_list .)
    [               reduce using rule 39 (global -> GLOBAL term_list .)
    {               reduce using rule 39 (global -> GLOBAL term_list .)
    BINARY_OPERATOR reduce using rule 39 (global -> GLOBAL term_list .)
    ,               shift and go to state 56


state 105

    (13) function -> COMMAND id ( parameter ) { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (64) id -> . ID
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    id                             shift and go to state 86
    body                           shift and go to state 110
    exp                            shift and go to state 80
    variable                       shift and go to state 81
    return                         shift and go to state 82
    global                         shift and go to state 83
    function_call                  shift and go to state 84
    python_function_call           shift and go to state 85
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 106

    (12) function -> FN id ( parameter ) { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (64) id -> . ID
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 111
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! }               [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    id                             shift and go to state 102
    exp                            shift and go to state 96
    variable                       shift and go to state 97
    return                         shift and go to state 98
    global                         shift and go to state 99
    function_call                  shift and go to state 100
    python_function_call           shift and go to state 101
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 107

    (40) term_map -> term : term , . term_map
    (40) term_map -> . term : term , term_map
    (41) term_map -> . term : term
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (15) function_call -> . id ( term_list )
    (64) id -> . ID
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    ID              shift and go to state 13
    [               shift and go to state 43
    {               shift and go to state 44
    :               reduce using rule 65 (empty -> .)

    term                           shift and go to state 61
    term_map                       shift and go to state 112
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    function_call                  shift and go to state 33
    id                             shift and go to state 26
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 108

    (34) exp -> IF exp { body } . ELSE { body }
    (35) exp -> IF exp { body } .

    ELSE            shift and go to state 113
    FN              reduce using rule 35 (exp -> IF exp { body } .)
    COMMAND         reduce using rule 35 (exp -> IF exp { body } .)
    .               reduce using rule 35 (exp -> IF exp { body } .)
    TOKEN           reduce using rule 35 (exp -> IF exp { body } .)
    ID              reduce using rule 35 (exp -> IF exp { body } .)
    $end            reduce using rule 35 (exp -> IF exp { body } .)
    }               reduce using rule 35 (exp -> IF exp { body } .)
    IF              reduce using rule 35 (exp -> IF exp { body } .)
    TRY             reduce using rule 35 (exp -> IF exp { body } .)
    RET             reduce using rule 35 (exp -> IF exp { body } .)
    GLOBAL          reduce using rule 35 (exp -> IF exp { body } .)
    SIGN            reduce using rule 35 (exp -> IF exp { body } .)
    UNITARY_OPERATOR reduce using rule 35 (exp -> IF exp { body } .)
    FLOAT           reduce using rule 35 (exp -> IF exp { body } .)
    INTEGER         reduce using rule 35 (exp -> IF exp { body } .)
    BOOLEAN         reduce using rule 35 (exp -> IF exp { body } .)
    STRING          reduce using rule 35 (exp -> IF exp { body } .)
    [               reduce using rule 35 (exp -> IF exp { body } .)
    {               reduce using rule 35 (exp -> IF exp { body } .)
    BINARY_OPERATOR reduce using rule 35 (exp -> IF exp { body } .)


state 109

    (36) exp -> TRY { body } CATCH . { body }

    {               shift and go to state 114


state 110

    (13) function -> COMMAND id ( parameter ) { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (64) id -> . ID
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 115
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! }               [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    id                             shift and go to state 102
    exp                            shift and go to state 96
    variable                       shift and go to state 97
    return                         shift and go to state 98
    global                         shift and go to state 99
    function_call                  shift and go to state 100
    python_function_call           shift and go to state 101
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 111

    (12) function -> FN id ( parameter ) { body } .

    FN              reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    COMMAND         reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    .               reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    TOKEN           reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    ID              reduce using rule 12 (function -> FN id ( parameter ) { body } .)
    $end            reduce using rule 12 (function -> FN id ( parameter ) { body } .)


state 112

    (40) term_map -> term : term , term_map .

    }               reduce using rule 40 (term_map -> term : term , term_map .)


state 113

    (34) exp -> IF exp { body } ELSE . { body }

    {               shift and go to state 116


state 114

    (36) exp -> TRY { body } CATCH { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (64) id -> . ID
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    body                           shift and go to state 117
    exp                            shift and go to state 80
    variable                       shift and go to state 81
    return                         shift and go to state 82
    global                         shift and go to state 83
    function_call                  shift and go to state 84
    python_function_call           shift and go to state 85
    id                             shift and go to state 86
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 115

    (13) function -> COMMAND id ( parameter ) { body } .

    FN              reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    COMMAND         reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    .               reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    TOKEN           reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    ID              reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)
    $end            reduce using rule 13 (function -> COMMAND id ( parameter ) { body } .)


state 116

    (34) exp -> IF exp { body } ELSE { . body }
    (20) body -> . body exp
    (21) body -> . body variable
    (22) body -> . body return
    (23) body -> . body global
    (24) body -> . body function_call
    (25) body -> . body python_function_call
    (26) body -> . function_call
    (27) body -> . python_function_call
    (28) body -> . exp
    (29) body -> . variable
    (30) body -> . return
    (31) body -> . global
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (64) id -> . ID
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    .               shift and go to state 11
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)
    }               reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 80
    body                           shift and go to state 118
    variable                       shift and go to state 81
    return                         shift and go to state 82
    global                         shift and go to state 83
    function_call                  shift and go to state 84
    python_function_call           shift and go to state 85
    id                             shift and go to state 86
    term                           shift and go to state 46
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 117

    (36) exp -> TRY { body } CATCH { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (64) id -> . ID
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 119
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! }               [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 96
    variable                       shift and go to state 97
    return                         shift and go to state 98
    global                         shift and go to state 99
    function_call                  shift and go to state 100
    python_function_call           shift and go to state 101
    term                           shift and go to state 46
    id                             shift and go to state 102
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 118

    (34) exp -> IF exp { body } ELSE { body . }
    (20) body -> body . exp
    (21) body -> body . variable
    (22) body -> body . return
    (23) body -> body . global
    (24) body -> body . function_call
    (25) body -> body . python_function_call
    (32) exp -> . term binop exp
    (33) exp -> . term
    (34) exp -> . IF exp { body } ELSE { body }
    (35) exp -> . IF exp { body }
    (36) exp -> . TRY { body } CATCH { body }
    (37) variable -> . id = exp
    (38) return -> . RET id
    (39) global -> . GLOBAL term_list
    (15) function_call -> . id ( term_list )
    (16) python_function_call -> . . id ( term_list )
    (44) term -> . unop term
    (45) term -> . number
    (46) term -> . boolean
    (47) term -> . string
    (48) term -> . function_call
    (49) term -> . id
    (50) term -> . list
    (51) term -> . dict
    (52) term -> . empty
    (64) id -> . ID
    (53) unop -> . SIGN
    (54) unop -> . UNITARY_OPERATOR
    (60) number -> . FLOAT
    (61) number -> . INTEGER
    (62) boolean -> . BOOLEAN
    (63) string -> . STRING
    (59) list -> . [ term_list ]
    (57) dict -> . { term_map }
    (58) dict -> . { empty }
    (65) empty -> .

  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for RET resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNITARY_OPERATOR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
    }               shift and go to state 120
    IF              shift and go to state 47
    TRY             shift and go to state 48
    RET             shift and go to state 87
    GLOBAL          shift and go to state 88
    .               shift and go to state 11
    ID              shift and go to state 13
    SIGN            shift and go to state 37
    UNITARY_OPERATOR shift and go to state 38
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40
    BOOLEAN         shift and go to state 41
    STRING          shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 44
    BINARY_OPERATOR reduce using rule 65 (empty -> .)

  ! SIGN            [ reduce using rule 65 (empty -> .) ]
  ! }               [ reduce using rule 65 (empty -> .) ]
  ! IF              [ reduce using rule 65 (empty -> .) ]
  ! TRY             [ reduce using rule 65 (empty -> .) ]
  ! RET             [ reduce using rule 65 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 65 (empty -> .) ]
  ! .               [ reduce using rule 65 (empty -> .) ]
  ! ID              [ reduce using rule 65 (empty -> .) ]
  ! UNITARY_OPERATOR [ reduce using rule 65 (empty -> .) ]
  ! FLOAT           [ reduce using rule 65 (empty -> .) ]
  ! INTEGER         [ reduce using rule 65 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (empty -> .) ]
  ! STRING          [ reduce using rule 65 (empty -> .) ]
  ! [               [ reduce using rule 65 (empty -> .) ]
  ! {               [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 96
    variable                       shift and go to state 97
    return                         shift and go to state 98
    global                         shift and go to state 99
    function_call                  shift and go to state 100
    python_function_call           shift and go to state 101
    term                           shift and go to state 46
    id                             shift and go to state 102
    unop                           shift and go to state 29
    number                         shift and go to state 30
    boolean                        shift and go to state 31
    string                         shift and go to state 32
    list                           shift and go to state 34
    dict                           shift and go to state 35
    empty                          shift and go to state 36

state 119

    (36) exp -> TRY { body } CATCH { body } .

    FN              reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    COMMAND         reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    .               reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    TOKEN           reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    ID              reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    $end            reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    }               reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    IF              reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    TRY             reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    RET             reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    GLOBAL          reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    SIGN            reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    UNITARY_OPERATOR reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    FLOAT           reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    INTEGER         reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    BOOLEAN         reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    STRING          reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    [               reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    {               reduce using rule 36 (exp -> TRY { body } CATCH { body } .)
    BINARY_OPERATOR reduce using rule 36 (exp -> TRY { body } CATCH { body } .)


state 120

    (34) exp -> IF exp { body } ELSE { body } .

    FN              reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    COMMAND         reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    .               reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    TOKEN           reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    ID              reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    $end            reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    }               reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    IF              reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    TRY             reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    RET             reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    GLOBAL          reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    SIGN            reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    UNITARY_OPERATOR reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    FLOAT           reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    INTEGER         reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    BOOLEAN         reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    STRING          reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    [               reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    {               reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)
    BINARY_OPERATOR reduce using rule 34 (exp -> IF exp { body } ELSE { body } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SIGN in state 21 resolved as shift
WARNING: shift/reduce conflict for ID in state 21 resolved as shift
WARNING: shift/reduce conflict for IF in state 21 resolved as shift
WARNING: shift/reduce conflict for TRY in state 21 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 21 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 21 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 21 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 21 resolved as shift
WARNING: shift/reduce conflict for STRING in state 21 resolved as shift
WARNING: shift/reduce conflict for [ in state 21 resolved as shift
WARNING: shift/reduce conflict for { in state 21 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 29 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 29 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 29 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 29 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 29 resolved as shift
WARNING: shift/reduce conflict for STRING in state 29 resolved as shift
WARNING: shift/reduce conflict for [ in state 29 resolved as shift
WARNING: shift/reduce conflict for { in state 29 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 46 resolved as shift
WARNING: shift/reduce conflict for BINARY_OPERATOR in state 46 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 47 resolved as shift
WARNING: shift/reduce conflict for { in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 56 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 56 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 56 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 56 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING in state 56 resolved as shift
WARNING: shift/reduce conflict for [ in state 56 resolved as shift
WARNING: shift/reduce conflict for { in state 56 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for TRY in state 62 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 62 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 62 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 62 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 62 resolved as shift
WARNING: shift/reduce conflict for STRING in state 62 resolved as shift
WARNING: shift/reduce conflict for [ in state 62 resolved as shift
WARNING: shift/reduce conflict for { in state 62 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for TRY in state 66 resolved as shift
WARNING: shift/reduce conflict for RET in state 66 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 66 resolved as shift
WARNING: shift/reduce conflict for . in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 66 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 66 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 66 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 66 resolved as shift
WARNING: shift/reduce conflict for STRING in state 66 resolved as shift
WARNING: shift/reduce conflict for [ in state 66 resolved as shift
WARNING: shift/reduce conflict for { in state 66 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 78 resolved as shift
WARNING: shift/reduce conflict for IF in state 78 resolved as shift
WARNING: shift/reduce conflict for TRY in state 78 resolved as shift
WARNING: shift/reduce conflict for RET in state 78 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 78 resolved as shift
WARNING: shift/reduce conflict for . in state 78 resolved as shift
WARNING: shift/reduce conflict for ID in state 78 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 78 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 78 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 78 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 78 resolved as shift
WARNING: shift/reduce conflict for STRING in state 78 resolved as shift
WARNING: shift/reduce conflict for [ in state 78 resolved as shift
WARNING: shift/reduce conflict for { in state 78 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 79 resolved as shift
WARNING: shift/reduce conflict for } in state 79 resolved as shift
WARNING: shift/reduce conflict for IF in state 79 resolved as shift
WARNING: shift/reduce conflict for TRY in state 79 resolved as shift
WARNING: shift/reduce conflict for RET in state 79 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 79 resolved as shift
WARNING: shift/reduce conflict for . in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 79 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 79 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 79 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 79 resolved as shift
WARNING: shift/reduce conflict for STRING in state 79 resolved as shift
WARNING: shift/reduce conflict for [ in state 79 resolved as shift
WARNING: shift/reduce conflict for { in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 88 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 88 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 88 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 88 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 88 resolved as shift
WARNING: shift/reduce conflict for STRING in state 88 resolved as shift
WARNING: shift/reduce conflict for [ in state 88 resolved as shift
WARNING: shift/reduce conflict for { in state 88 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for TRY in state 92 resolved as shift
WARNING: shift/reduce conflict for RET in state 92 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 92 resolved as shift
WARNING: shift/reduce conflict for . in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 92 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 92 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 92 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 92 resolved as shift
WARNING: shift/reduce conflict for STRING in state 92 resolved as shift
WARNING: shift/reduce conflict for [ in state 92 resolved as shift
WARNING: shift/reduce conflict for { in state 92 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 94 resolved as shift
WARNING: shift/reduce conflict for } in state 94 resolved as shift
WARNING: shift/reduce conflict for IF in state 94 resolved as shift
WARNING: shift/reduce conflict for TRY in state 94 resolved as shift
WARNING: shift/reduce conflict for RET in state 94 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 94 resolved as shift
WARNING: shift/reduce conflict for . in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 94 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 94 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 94 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 94 resolved as shift
WARNING: shift/reduce conflict for STRING in state 94 resolved as shift
WARNING: shift/reduce conflict for [ in state 94 resolved as shift
WARNING: shift/reduce conflict for { in state 94 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 105 resolved as shift
WARNING: shift/reduce conflict for IF in state 105 resolved as shift
WARNING: shift/reduce conflict for TRY in state 105 resolved as shift
WARNING: shift/reduce conflict for RET in state 105 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 105 resolved as shift
WARNING: shift/reduce conflict for . in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 105 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 105 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 105 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 105 resolved as shift
WARNING: shift/reduce conflict for STRING in state 105 resolved as shift
WARNING: shift/reduce conflict for [ in state 105 resolved as shift
WARNING: shift/reduce conflict for { in state 105 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 106 resolved as shift
WARNING: shift/reduce conflict for } in state 106 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for TRY in state 106 resolved as shift
WARNING: shift/reduce conflict for RET in state 106 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 106 resolved as shift
WARNING: shift/reduce conflict for . in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 106 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 106 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 106 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 106 resolved as shift
WARNING: shift/reduce conflict for STRING in state 106 resolved as shift
WARNING: shift/reduce conflict for [ in state 106 resolved as shift
WARNING: shift/reduce conflict for { in state 106 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 110 resolved as shift
WARNING: shift/reduce conflict for } in state 110 resolved as shift
WARNING: shift/reduce conflict for IF in state 110 resolved as shift
WARNING: shift/reduce conflict for TRY in state 110 resolved as shift
WARNING: shift/reduce conflict for RET in state 110 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 110 resolved as shift
WARNING: shift/reduce conflict for . in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 110 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 110 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 110 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 110 resolved as shift
WARNING: shift/reduce conflict for STRING in state 110 resolved as shift
WARNING: shift/reduce conflict for [ in state 110 resolved as shift
WARNING: shift/reduce conflict for { in state 110 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 114 resolved as shift
WARNING: shift/reduce conflict for IF in state 114 resolved as shift
WARNING: shift/reduce conflict for TRY in state 114 resolved as shift
WARNING: shift/reduce conflict for RET in state 114 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 114 resolved as shift
WARNING: shift/reduce conflict for . in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 114 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 114 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 114 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 114 resolved as shift
WARNING: shift/reduce conflict for STRING in state 114 resolved as shift
WARNING: shift/reduce conflict for [ in state 114 resolved as shift
WARNING: shift/reduce conflict for { in state 114 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for TRY in state 116 resolved as shift
WARNING: shift/reduce conflict for RET in state 116 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 116 resolved as shift
WARNING: shift/reduce conflict for . in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 116 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 116 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 116 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 116 resolved as shift
WARNING: shift/reduce conflict for STRING in state 116 resolved as shift
WARNING: shift/reduce conflict for [ in state 116 resolved as shift
WARNING: shift/reduce conflict for { in state 116 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 117 resolved as shift
WARNING: shift/reduce conflict for } in state 117 resolved as shift
WARNING: shift/reduce conflict for IF in state 117 resolved as shift
WARNING: shift/reduce conflict for TRY in state 117 resolved as shift
WARNING: shift/reduce conflict for RET in state 117 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 117 resolved as shift
WARNING: shift/reduce conflict for . in state 117 resolved as shift
WARNING: shift/reduce conflict for ID in state 117 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 117 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 117 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 117 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 117 resolved as shift
WARNING: shift/reduce conflict for STRING in state 117 resolved as shift
WARNING: shift/reduce conflict for [ in state 117 resolved as shift
WARNING: shift/reduce conflict for { in state 117 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 118 resolved as shift
WARNING: shift/reduce conflict for } in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for TRY in state 118 resolved as shift
WARNING: shift/reduce conflict for RET in state 118 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 118 resolved as shift
WARNING: shift/reduce conflict for . in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for UNITARY_OPERATOR in state 118 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 118 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 118 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 118 resolved as shift
WARNING: shift/reduce conflict for STRING in state 118 resolved as shift
WARNING: shift/reduce conflict for [ in state 118 resolved as shift
WARNING: shift/reduce conflict for { in state 118 resolved as shift
WARNING: reduce/reduce conflict in state 84 resolved using rule (body -> function_call)
WARNING: rejected rule (term -> function_call) in state 84
WARNING: reduce/reduce conflict in state 100 resolved using rule (body -> body function_call)
WARNING: rejected rule (term -> function_call) in state 100
